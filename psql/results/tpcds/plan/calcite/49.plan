                                                                                                           QUERY PLAN                                                                                                            
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2576348.22..2576348.23 rows=3 width=84)
   ->  Sort  (cost=2576348.22..2576348.23 rows=3 width=84)
         Sort Key: ('web'::text) NULLS FIRST, t10.return_rank NULLS FIRST, t10.currency_rank NULLS FIRST, t10.item NULLS FIRST
         ->  HashAggregate  (cost=2576348.14..2576348.17 rows=3 width=84)
               Group Key: ('web'::text), t10.item, t10.return_ratio, t10.return_rank, t10.currency_rank
               ->  Append  (cost=1264237.34..2576348.10 rows=3 width=84)
                     ->  Unique  (cost=1264237.34..1264237.37 rows=2 width=84)
                           ->  Sort  (cost=1264237.34..1264237.35 rows=2 width=84)
                                 Sort Key: ('web'::text), t10.item, t10.return_ratio, t10.return_rank, t10.currency_rank
                                 ->  Append  (cost=410707.43..1264237.33 rows=2 width=84)
                                       ->  Subquery Scan on t10  (cost=410707.43..410707.49 rows=1 width=84)
                                             Filter: ((t10.return_rank <= 10) OR (t10.currency_rank <= 10))
                                             ->  WindowAgg  (cost=410707.43..410707.47 rows=1 width=84)
                                                   ->  Sort  (cost=410707.43..410707.43 rows=1 width=76)
                                                         Sort Key: (((t9."$f1")::numeric(15,4) / (t9."$f2")::numeric(15,4)))
                                                         ->  WindowAgg  (cost=410707.38..410707.42 rows=1 width=76)
                                                               ->  Sort  (cost=410707.38..410707.38 rows=1 width=68)
                                                                     Sort Key: (((t9."$f3")::numeric(15,4) / (t9."$f4")::numeric(15,4)))
                                                                     ->  Subquery Scan on t9  (cost=410707.29..410707.37 rows=1 width=68)
                                                                           ->  GroupAggregate  (cost=410707.29..410707.33 rows=1 width=60)
                                                                                 Group Key: web_sales.ws_item_sk
                                                                                 ->  Sort  (cost=410707.29..410707.30 rows=1 width=28)
                                                                                       Sort Key: web_sales.ws_item_sk
                                                                                       ->  Gather  (cost=1000.86..410707.28 rows=1 width=28)
                                                                                             Workers Planned: 2
                                                                                             ->  Nested Loop  (cost=0.86..409707.18 rows=1 width=28)
                                                                                                   ->  Nested Loop  (cost=0.57..409680.96 rows=4 width=32)
                                                                                                         ->  Parallel Seq Scan on web_returns  (cost=0.00..185363.80 rows=27678 width=20)
                                                                                                               Filter: (wr_return_amt > '10000'::double precision)
                                                                                                         ->  Index Scan using web_sales_pkey on web_sales  (cost=0.57..8.10 rows=1 width=24)
                                                                                                               Index Cond: ((ws_item_sk = web_returns.wr_item_sk) AND (ws_order_number = web_returns.wr_order_number))
                                                                                                               Filter: ((ws_net_profit > '1'::double precision) AND (ws_net_paid > '0'::double precision) AND (ws_quantity > 0))
                                                                                                   ->  Index Scan using date_dim_pkey on date_dim  (cost=0.29..6.46 rows=1 width=4)
                                                                                                         Index Cond: (d_date_sk = web_sales.ws_sold_date_sk)
                                                                                                         Filter: ((d_year = 2001) AND (d_moy = 12))
                                       ->  Subquery Scan on t25  (cost=853529.76..853529.81 rows=1 width=84)
                                             Filter: ((t25.return_rank <= 10) OR (t25.currency_rank <= 10))
                                             ->  WindowAgg  (cost=853529.76..853529.80 rows=1 width=84)
                                                   ->  Sort  (cost=853529.76..853529.76 rows=1 width=76)
                                                         Sort Key: (((t24."$f1")::numeric(15,4) / (t24."$f2")::numeric(15,4)))
                                                         ->  WindowAgg  (cost=853529.70..853529.75 rows=1 width=76)
                                                               ->  Sort  (cost=853529.70..853529.71 rows=1 width=68)
                                                                     Sort Key: (((t24."$f3")::numeric(15,4) / (t24."$f4")::numeric(15,4)))
                                                                     ->  Subquery Scan on t24  (cost=853529.62..853529.69 rows=1 width=68)
                                                                           ->  GroupAggregate  (cost=853529.62..853529.66 rows=1 width=60)
                                                                                 Group Key: catalog_sales.cs_item_sk
                                                                                 ->  Sort  (cost=853529.62..853529.63 rows=1 width=28)
                                                                                       Sort Key: catalog_sales.cs_item_sk
                                                                                       ->  Gather  (cost=1000.86..853529.61 rows=1 width=28)
                                                                                             Workers Planned: 2
                                                                                             ->  Nested Loop  (cost=0.86..852529.51 rows=1 width=28)
                                                                                                   ->  Nested Loop  (cost=0.57..852425.79 rows=14 width=32)
                                                                                                         ->  Parallel Seq Scan on catalog_returns  (cost=0.00..391250.23 rows=56034 width=20)
                                                                                                               Filter: (cr_return_amount > '10000'::double precision)
                                                                                                         ->  Index Scan using catalog_sales_pkey on catalog_sales  (cost=0.57..8.23 rows=1 width=24)
                                                                                                               Index Cond: ((cs_item_sk = catalog_returns.cr_item_sk) AND (cs_order_number = catalog_returns.cr_order_number))
                                                                                                               Filter: ((cs_net_profit > '1'::double precision) AND (cs_net_paid > '0'::double precision) AND (cs_quantity > 0))
                                                                                                   ->  Index Scan using date_dim_pkey on date_dim date_dim_1  (cost=0.29..7.38 rows=1 width=4)
                                                                                                         Index Cond: (d_date_sk = catalog_sales.cs_sold_date_sk)
                                                                                                         Filter: ((d_year = 2001) AND (d_moy = 12))
                     ->  Subquery Scan on t41  (cost=1312110.61..1312110.66 rows=1 width=84)
                           Filter: ((t41.return_rank <= 10) OR (t41.currency_rank <= 10))
                           ->  WindowAgg  (cost=1312110.61..1312110.65 rows=1 width=84)
                                 ->  Sort  (cost=1312110.61..1312110.61 rows=1 width=76)
                                       Sort Key: (((t40."$f1")::numeric(15,4) / (t40."$f2")::numeric(15,4)))
                                       ->  WindowAgg  (cost=1312110.55..1312110.60 rows=1 width=76)
                                             ->  Sort  (cost=1312110.55..1312110.56 rows=1 width=68)
                                                   Sort Key: (((t40."$f3")::numeric(15,4) / (t40."$f4")::numeric(15,4)))
                                                   ->  Subquery Scan on t40  (cost=1312110.47..1312110.54 rows=1 width=68)
                                                         ->  GroupAggregate  (cost=1312110.47..1312110.51 rows=1 width=60)
                                                               Group Key: store_sales.ss_item_sk
                                                               ->  Sort  (cost=1312110.47..1312110.48 rows=1 width=28)
                                                                     Sort Key: store_sales.ss_item_sk
                                                                     ->  Gather  (cost=1000.87..1312110.46 rows=1 width=28)
                                                                           Workers Planned: 2
                                                                           ->  Nested Loop  (cost=0.86..1311110.36 rows=1 width=28)
                                                                                 ->  Nested Loop  (cost=0.57..1310948.49 rows=21 width=32)
                                                                                       ->  Parallel Seq Scan on store_returns  (cost=0.00..690648.82 rows=74349 width=20)
                                                                                             Filter: (sr_return_amt > '10000'::double precision)
                                                                                       ->  Index Scan using store_sales_pkey on store_sales  (cost=0.57..8.34 rows=1 width=24)
                                                                                             Index Cond: ((ss_item_sk = store_returns.sr_item_sk) AND (ss_ticket_number = store_returns.sr_ticket_number))
                                                                                             Filter: ((ss_net_profit > '1'::double precision) AND (ss_net_paid > '0'::double precision) AND (ss_quantity > 0))
                                                                                 ->  Index Scan using date_dim_pkey on date_dim date_dim_2  (cost=0.29..7.69 rows=1 width=4)
                                                                                       Index Cond: (d_date_sk = store_sales.ss_sold_date_sk)
                                                                                       Filter: ((d_year = 2001) AND (d_moy = 12))
 JIT:
   Functions: 88
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(88 rows)

