                                                                                                                                                   QUERY PLAN                                                                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7713168.76..7713169.91 rows=461 width=31)
   Sort Key: (count(*)) DESC NULLS LAST, customer.c_last_name
   ->  Nested Loop  (cost=7708791.84..7713148.36 rows=461 width=31)
         ->  Finalize GroupAggregate  (cost=7708791.41..7709330.61 rows=461 width=16)
               Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk
               Filter: ((count(*) >= 1) AND (count(*) <= 5))
               ->  Gather Merge  (cost=7708791.41..7709225.13 rows=3458 width=16)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=7707791.39..7707825.97 rows=1729 width=16)
                           Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk
                           ->  Sort  (cost=7707791.39..7707795.71 rows=1729 width=8)
                                 Sort Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk
                                 ->  Hash Join  (cost=2724.20..7707698.40 rows=1729 width=8)
                                       Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                       ->  Hash Join  (cost=2701.00..7707654.66 rows=7749 width=12)
                                             Hash Cond: (store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk)
                                             ->  Parallel Hash Join  (cost=2428.34..7707093.69 rows=109768 width=16)
                                                   Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                   ->  Parallel Seq Scan on store_sales  (cost=0.00..7389799.50 rows=119942250 width=20)
                                                   ->  Parallel Hash  (cost=2427.82..2427.82 rows=41 width=4)
                                                         ->  Parallel Seq Scan on date_dim  (cost=0.00..2427.82 rows=41 width=4)
                                                               Filter: ((d_dom >= 1) AND (d_dom <= 2) AND ((d_year = 1999) OR (d_year = 2000) OR (d_year = 2001)))
                                             ->  Hash  (cost=266.00..266.00 rows=533 width=4)
                                                   ->  Seq Scan on household_demographics  (cost=0.00..266.00 rows=533 width=4)
                                                         Filter: (((hd_buy_potential)::text = ANY ('{>10000,Unknown}'::text[])) AND (hd_vehicle_count > 0) AND (CASE WHEN (hd_vehicle_count > 0) THEN (((hd_dep_count)::numeric * 1.000) / (hd_vehicle_count)::numeric) ELSE NULL::numeric END > '1'::numeric))
                                       ->  Hash  (cost=22.03..22.03 rows=94 width=4)
                                             ->  Seq Scan on store  (cost=0.00..22.03 rows=94 width=4)
                                                   Filter: ((s_county)::text = ANY ('{"Bronx County","Franklin Parish","Orange County","Williamson County"}'::text[]))
         ->  Index Scan using customer_pkey on customer  (cost=0.43..8.27 rows=1 width=23)
               Index Cond: (c_customer_sk = store_sales.ss_customer_sk)
 JIT:
   Functions: 42
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

