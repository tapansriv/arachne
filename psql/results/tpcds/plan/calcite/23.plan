                                                                                                                                QUERY PLAN                                                                                                                                 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=184204633.65..184204633.90 rows=100 width=21)
   ->  Sort  (cost=184204633.65..184205633.69 rows=400014 width=21)
         Sort Key: customer.c_last_name NULLS FIRST, customer.c_first_name NULLS FIRST, (sum(((catalog_sales.cs_quantity)::double precision * catalog_sales.cs_list_price))) NULLS FIRST
         ->  Append  (cost=93352467.64..184189345.41 rows=400014 width=21)
               ->  GroupAggregate  (cost=93352467.64..93405478.03 rows=200007 width=21)
                     Group Key: customer.c_last_name, customer.c_first_name
                     ->  Sort  (cost=93352467.64..93360969.36 rows=3400688 width=25)
                           Sort Key: customer.c_last_name, customer.c_first_name
                           ->  Merge Join  (cost=52532625.89..92820808.28 rows=3400688 width=25)
                                 Merge Cond: (catalog_sales.cs_bill_customer_sk = customer.c_customer_sk)
                                 ->  Merge Join  (cost=52528609.60..92898038.23 rows=3418568 width=20)
                                       Merge Cond: (catalog_sales.cs_bill_customer_sk = customer_1.c_customer_sk)
                                       ->  Sort  (cost=13895830.26..13897328.26 rows=599197 width=16)
                                             Sort Key: catalog_sales.cs_bill_customer_sk
                                             ->  Hash Join  (cost=13099609.22..13828088.31 rows=599197 width=16)
                                                   Hash Cond: (item.i_item_sk = catalog_sales.cs_item_sk)
                                                   ->  Finalize GroupAggregate  (cost=8113537.35..8811099.37 rows=1812735 width=40)
                                                         Group Key: ("substring"((item.i_item_desc)::text, 1, 30)), item.i_item_sk, date_dim_1.d_date
                                                         Filter: (count(*) > 4)
                                                         ->  Gather Merge  (cost=8113537.35..8693271.62 rows=4531836 width=48)
                                                               Workers Planned: 2
                                                               ->  Partial GroupAggregate  (cost=8112537.33..8169185.28 rows=2265918 width=48)
                                                                     Group Key: ("substring"((item.i_item_desc)::text, 1, 30)), item.i_item_sk, date_dim_1.d_date
                                                                     ->  Sort  (cost=8112537.33..8118202.12 rows=2265918 width=40)
                                                                           Sort Key: ("substring"((item.i_item_desc)::text, 1, 30)), item.i_item_sk, date_dim_1.d_date
                                                                           ->  Parallel Hash Join  (cost=14035.52..7749429.83 rows=2265918 width=40)
                                                                                 Hash Cond: (store_sales.ss_item_sk = item.i_item_sk)
                                                                                 ->  Parallel Hash Join  (cost=2331.03..7706996.38 rows=2265918 width=8)
                                                                                       Hash Cond: (store_sales.ss_sold_date_sk = date_dim_1.d_date_sk)
                                                                                       ->  Parallel Seq Scan on store_sales  (cost=0.00..7389799.50 rows=119942250 width=8)
                                                                                       ->  Parallel Hash  (cost=2320.40..2320.40 rows=850 width=8)
                                                                                             ->  Parallel Seq Scan on date_dim date_dim_1  (cost=0.00..2320.40 rows=850 width=8)
                                                                                                   Filter: ((d_year = 2000) OR (d_year = 2001) OR (d_year = 2002) OR (d_year = 2003))
                                                                                 ->  Parallel Hash  (cost=9230.00..9230.00 rows=85000 width=106)
                                                                                       ->  Parallel Seq Scan on item  (cost=0.00..9230.00 rows=85000 width=106)
                                                   ->  Hash  (cost=4985385.89..4985385.89 rows=54878 width=20)
                                                         ->  Gather  (cost=3105.75..4985385.89 rows=54878 width=20)
                                                               Workers Planned: 2
                                                               ->  Parallel Hash Join  (cost=2105.75..4978898.09 rows=22866 width=20)
                                                                     Hash Cond: (catalog_sales.cs_sold_date_sk = date_dim.d_date_sk)
                                                                     ->  Parallel Seq Scan on catalog_sales  (cost=0.00..4819292.97 rows=59996297 width=24)
                                                                     ->  Parallel Hash  (cost=2105.55..2105.55 rows=16 width=4)
                                                                           ->  Parallel Seq Scan on date_dim  (cost=0.00..2105.55 rows=16 width=4)
                                                                                 Filter: ((d_year = 2000) AND (d_moy = 2))
                                       ->  GroupAggregate  (cost=38632779.34..78956692.68 rows=666690 width=4)
                                             Group Key: customer_1.c_customer_sk
                                             Filter: (sum(((store_sales_1.ss_quantity)::double precision * store_sales_1.ss_sales_price)) > ('0.5'::double precision * max((max((sum(((store_sales_2.ss_quantity)::double precision * store_sales_2.ss_sales_price))))))))
                                             ->  Nested Loop  (cost=38632779.34..75493584.59 rows=274648562 width=24)
                                                   ->  Gather Merge  (cost=29957747.50..63385445.70 rows=274648562 width=16)
                                                         Workers Planned: 2
                                                         ->  Merge Join  (cost=29956747.47..31683186.90 rows=114436901 width=16)
                                                               Merge Cond: (store_sales_1.ss_customer_sk = customer_1.c_customer_sk)
                                                               ->  Sort  (cost=29634096.92..29933952.54 rows=119942250 width=16)
                                                                     Sort Key: store_sales_1.ss_customer_sk
                                                                     ->  Parallel Seq Scan on store_sales store_sales_1  (cost=0.00..7389799.50 rows=119942250 width=16)
                                                               ->  Sort  (cost=322593.34..327593.52 rows=2000071 width=4)
                                                                     Sort Key: customer_1.c_customer_sk
                                                                     ->  Seq Scan on customer customer_1  (cost=0.00..58578.71 rows=2000071 width=4)
                                                   ->  Materialize  (cost=8675031.84..8675031.86 rows=1 width=8)
                                                         ->  Aggregate  (cost=8675031.84..8675031.85 rows=1 width=8)
                                                               ->  Finalize GroupAggregate  (cost=8101289.27..8650030.95 rows=2000071 width=12)
                                                                     Group Key: customer_2.c_customer_sk
                                                                     ->  Gather Merge  (cost=8101289.27..8610029.53 rows=4000142 width=12)
                                                                           Workers Planned: 2
                                                                           ->  Partial GroupAggregate  (cost=8100289.24..8147313.87 rows=2000071 width=12)
                                                                                 Group Key: customer_2.c_customer_sk
                                                                                 ->  Sort  (cost=8100289.24..8105694.03 rows=2161913 width=16)
                                                                                       Sort Key: customer_2.c_customer_sk
                                                                                       ->  Parallel Hash Join  (cost=62915.69..7798915.09 rows=2161913 width=16)
                                                                                             Hash Cond: (store_sales_2.ss_customer_sk = customer_2.c_customer_sk)
                                                                                             ->  Parallel Hash Join  (cost=2331.03..7706996.38 rows=2265918 width=16)
                                                                                                   Hash Cond: (store_sales_2.ss_sold_date_sk = date_dim_2.d_date_sk)
                                                                                                   ->  Parallel Seq Scan on store_sales store_sales_2  (cost=0.00..7389799.50 rows=119942250 width=20)
                                                                                                   ->  Parallel Hash  (cost=2320.40..2320.40 rows=850 width=4)
                                                                                                         ->  Parallel Seq Scan on date_dim date_dim_2  (cost=0.00..2320.40 rows=850 width=4)
                                                                                                               Filter: ((d_year = 2000) OR (d_year = 2001) OR (d_year = 2002) OR (d_year = 2003))
                                                                                             ->  Parallel Hash  (cost=46911.63..46911.63 rows=833363 width=4)
                                                                                                   ->  Parallel Seq Scan on customer customer_2  (cost=0.00..46911.63 rows=833363 width=4)
                                 ->  Index Scan using customer_pkey on customer  (cost=0.43..90549.79 rows=2000071 width=17)
               ->  GroupAggregate  (cost=90744285.71..90777867.17 rows=200007 width=21)
                     Group Key: customer_3.c_last_name, customer_3.c_first_name
                     ->  Sort  (cost=90744285.71..90749549.27 rows=2105426 width=25)
                           Sort Key: customer_3.c_last_name, customer_3.c_first_name
                           ->  Merge Join  (cost=50067545.92..90422405.18 rows=2105426 width=25)
                                 Merge Cond: (web_sales.ws_bill_customer_sk = customer_4.c_customer_sk)
                                 ->  Sort  (cost=11434766.59..11435545.60 rows=311605 width=33)
                                       Sort Key: web_sales.ws_bill_customer_sk
                                       ->  Hash Join  (cost=10672207.96..11397811.13 rows=311605 width=33)
                                             Hash Cond: (item_1.i_item_sk = web_sales.ws_item_sk)
                                             ->  Finalize GroupAggregate  (cost=8113537.35..8811099.37 rows=1812735 width=40)
                                                   Group Key: ("substring"((item_1.i_item_desc)::text, 1, 30)), item_1.i_item_sk, date_dim_4.d_date
                                                   Filter: (count(*) > 4)
                                                   ->  Gather Merge  (cost=8113537.35..8693271.62 rows=4531836 width=48)
                                                         Workers Planned: 2
                                                         ->  Partial GroupAggregate  (cost=8112537.33..8169185.28 rows=2265918 width=48)
                                                               Group Key: ("substring"((item_1.i_item_desc)::text, 1, 30)), item_1.i_item_sk, date_dim_4.d_date
                                                               ->  Sort  (cost=8112537.33..8118202.12 rows=2265918 width=40)
                                                                     Sort Key: ("substring"((item_1.i_item_desc)::text, 1, 30)), item_1.i_item_sk, date_dim_4.d_date
                                                                     ->  Parallel Hash Join  (cost=14035.52..7749429.83 rows=2265918 width=40)
                                                                           Hash Cond: (store_sales_3.ss_item_sk = item_1.i_item_sk)
                                                                           ->  Parallel Hash Join  (cost=2331.03..7706996.38 rows=2265918 width=8)
                                                                                 Hash Cond: (store_sales_3.ss_sold_date_sk = date_dim_4.d_date_sk)
                                                                                 ->  Parallel Seq Scan on store_sales store_sales_3  (cost=0.00..7389799.50 rows=119942250 width=8)
                                                                                 ->  Parallel Hash  (cost=2320.40..2320.40 rows=850 width=8)
                                                                                       ->  Parallel Seq Scan on date_dim date_dim_4  (cost=0.00..2320.40 rows=850 width=8)
                                                                                             Filter: ((d_year = 2000) OR (d_year = 2001) OR (d_year = 2002) OR (d_year = 2003))
                                                                           ->  Parallel Hash  (cost=9230.00..9230.00 rows=85000 width=106)
                                                                                 ->  Parallel Seq Scan on item item_1  (cost=0.00..9230.00 rows=85000 width=106)
                                             ->  Hash  (cost=2558325.89..2558325.89 rows=27577 width=37)
                                                   ->  Gather  (cost=2499233.35..2558325.89 rows=27577 width=37)
                                                         Workers Planned: 2
                                                         ->  Parallel Hash Join  (cost=2498233.35..2554568.19 rows=11490 width=37)
                                                               Hash Cond: (customer_3.c_customer_sk = web_sales.ws_bill_customer_sk)
                                                               ->  Parallel Seq Scan on customer customer_3  (cost=0.00..46911.63 rows=833363 width=17)
                                                               ->  Parallel Hash  (cost=2498089.69..2498089.69 rows=11493 width=20)
                                                                     ->  Parallel Hash Join  (cost=2105.75..2498089.69 rows=11493 width=20)
                                                                           Hash Cond: (web_sales.ws_sold_date_sk = date_dim_3.d_date_sk)
                                                                           ->  Parallel Seq Scan on web_sales  (cost=0.00..2417251.13 rows=29991713 width=24)
                                                                           ->  Parallel Hash  (cost=2105.55..2105.55 rows=16 width=4)
                                                                                 ->  Parallel Seq Scan on date_dim date_dim_3  (cost=0.00..2105.55 rows=16 width=4)
                                                                                       Filter: ((d_year = 2000) AND (d_moy = 2))
                                 ->  GroupAggregate  (cost=38632779.34..78956692.68 rows=666690 width=4)
                                       Group Key: customer_4.c_customer_sk
                                       Filter: (sum(((store_sales_4.ss_quantity)::double precision * store_sales_4.ss_sales_price)) > ('0.5'::double precision * max((max((sum(((store_sales_5.ss_quantity)::double precision * store_sales_5.ss_sales_price))))))))
                                       ->  Nested Loop  (cost=38632779.34..75493584.59 rows=274648562 width=24)
                                             ->  Gather Merge  (cost=29957747.50..63385445.70 rows=274648562 width=16)
                                                   Workers Planned: 2
                                                   ->  Merge Join  (cost=29956747.47..31683186.90 rows=114436901 width=16)
                                                         Merge Cond: (store_sales_4.ss_customer_sk = customer_4.c_customer_sk)
                                                         ->  Sort  (cost=29634096.92..29933952.54 rows=119942250 width=16)
                                                               Sort Key: store_sales_4.ss_customer_sk
                                                               ->  Parallel Seq Scan on store_sales store_sales_4  (cost=0.00..7389799.50 rows=119942250 width=16)
                                                         ->  Sort  (cost=322593.34..327593.52 rows=2000071 width=4)
                                                               Sort Key: customer_4.c_customer_sk
                                                               ->  Seq Scan on customer customer_4  (cost=0.00..58578.71 rows=2000071 width=4)
                                             ->  Materialize  (cost=8675031.84..8675031.86 rows=1 width=8)
                                                   ->  Aggregate  (cost=8675031.84..8675031.85 rows=1 width=8)
                                                         ->  Finalize GroupAggregate  (cost=8101289.27..8650030.95 rows=2000071 width=12)
                                                               Group Key: customer_5.c_customer_sk
                                                               ->  Gather Merge  (cost=8101289.27..8610029.53 rows=4000142 width=12)
                                                                     Workers Planned: 2
                                                                     ->  Partial GroupAggregate  (cost=8100289.24..8147313.87 rows=2000071 width=12)
                                                                           Group Key: customer_5.c_customer_sk
                                                                           ->  Sort  (cost=8100289.24..8105694.03 rows=2161913 width=16)
                                                                                 Sort Key: customer_5.c_customer_sk
                                                                                 ->  Parallel Hash Join  (cost=62915.69..7798915.09 rows=2161913 width=16)
                                                                                       Hash Cond: (store_sales_5.ss_customer_sk = customer_5.c_customer_sk)
                                                                                       ->  Parallel Hash Join  (cost=2331.03..7706996.38 rows=2265918 width=16)
                                                                                             Hash Cond: (store_sales_5.ss_sold_date_sk = date_dim_5.d_date_sk)
                                                                                             ->  Parallel Seq Scan on store_sales store_sales_5  (cost=0.00..7389799.50 rows=119942250 width=20)
                                                                                             ->  Parallel Hash  (cost=2320.40..2320.40 rows=850 width=4)
                                                                                                   ->  Parallel Seq Scan on date_dim date_dim_5  (cost=0.00..2320.40 rows=850 width=4)
                                                                                                         Filter: ((d_year = 2000) OR (d_year = 2001) OR (d_year = 2002) OR (d_year = 2003))
                                                                                       ->  Parallel Hash  (cost=46911.63..46911.63 rows=833363 width=4)
                                                                                             ->  Parallel Seq Scan on customer customer_5  (cost=0.00..46911.63 rows=833363 width=4)
 JIT:
   Functions: 223
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(158 rows)

