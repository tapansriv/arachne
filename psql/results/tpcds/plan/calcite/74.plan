                                                                                                                                                                                                                      QUERY PLAN                                                                                                                                                                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=15519379.57..15521559.11 rows=100 width=30)
   ->  Nested Loop  (cost=15519379.57..339019951.32 rows=14842627 width=30)
         Join Filter: ((("*SELECT* 1".customer_id)::text = ("*SELECT* 1_3".customer_id)::text) AND ((CASE WHEN ("*SELECT* 1_2".year_total > '0'::double precision) THEN (("*SELECT* 1_3".year_total / "*SELECT* 1_2".year_total))::numeric(19,0) ELSE NULL::numeric END)::double precision > CASE WHEN ("*SELECT* 1".year_total > '0'::double precision) THEN ("*SELECT* 1_1".year_total / "*SELECT* 1".year_total) ELSE NULL::double precision END))
         ->  Nested Loop  (cost=15519379.57..24814246.95 rows=2259725 width=88)
               Join Filter: (("*SELECT* 1".customer_id)::text = ("*SELECT* 1_2".customer_id)::text)
               ->  Merge Join  (cost=15519379.57..15524562.71 rows=343946 width=63)
                     Merge Cond: (("*SELECT* 1".customer_id)::text = ("*SELECT* 1_1".customer_id)::text)
                     ->  Sort  (cost=7759277.40..7759289.37 rows=4789 width=25)
                           Sort Key: "*SELECT* 1".customer_id NULLS FIRST
                           ->  Merge Append  (cost=7756998.52..7758984.66 rows=4789 width=25)
                                 Sort Key: "*SELECT* 1".customer_id
                                 ->  Subquery Scan on "*SELECT* 1"  (cost=7756998.50..7758936.72 rows=4788 width=25)
                                       ->  Finalize GroupAggregate  (cost=7756998.50..7758888.84 rows=4788 width=74)
                                             Group Key: customer.c_customer_id, customer.c_first_name, customer.c_last_name, date_dim.d_year
                                             Filter: (sum(store_sales.ss_net_paid) > '0'::double precision)
                                             ->  Gather Merge  (cost=7756998.50..7758529.76 rows=11970 width=42)
                                                   Workers Planned: 2
                                                   ->  Partial GroupAggregate  (cost=7755998.47..7756148.10 rows=5985 width=42)
                                                         Group Key: customer.c_customer_id, customer.c_first_name, customer.c_last_name, date_dim.d_year
                                                         ->  Sort  (cost=7755998.47..7756013.44 rows=5985 width=42)
                                                               Sort Key: customer.c_customer_id, customer.c_first_name, customer.c_last_name
                                                               ->  Nested Loop  (cost=2213.43..7755623.00 rows=5985 width=42)
                                                                     ->  Parallel Hash Join  (cost=2213.00..7706878.35 rows=6272 width=16)
                                                                           Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                                           ->  Parallel Seq Scan on store_sales  (cost=0.00..7389799.50 rows=119942250 width=16)
                                                                           ->  Parallel Hash  (cost=2212.97..2212.97 rows=2 width=8)
                                                                                 ->  Parallel Seq Scan on date_dim  (cost=0.00..2212.97 rows=2 width=8)
                                                                                       Filter: ((d_year = 2001) AND ((d_year = 2001) OR (d_year = 2002)))
                                                                     ->  Index Scan using customer_pkey on customer  (cost=0.43..7.77 rows=1 width=34)
                                                                           Index Cond: (c_customer_sk = store_sales.ss_customer_sk)
                                 ->  Subquery Scan on "*SELECT* 2"  (cost=0.01..0.04 rows=1 width=25)
                                       ->  GroupAggregate  (cost=0.01..0.03 rows=1 width=74)
                                             Group Key: c_customer_id, c_first_name, c_last_name, d_year
                                             ->  Sort  (cost=0.01..0.02 rows=0 width=42)
                                                   Sort Key: c_customer_id, c_first_name, c_last_name, d_year
                                                   ->  Result  (cost=0.00..0.00 rows=0 width=42)
                                                         One-Time Filter: false
                     ->  Sort  (cost=7760102.17..7760138.08 rows=14364 width=38)
                           Sort Key: "*SELECT* 1_1".customer_id NULLS FIRST
                           ->  Merge Append  (cost=7756998.52..7759110.33 rows=14364 width=38)
                                 Sort Key: "*SELECT* 1_1".customer_id
                                 ->  Subquery Scan on "*SELECT* 1_1"  (cost=7756998.50..7758966.64 rows=14363 width=38)
                                       ->  Finalize GroupAggregate  (cost=7756998.50..7758823.01 rows=14363 width=74)
                                             Group Key: customer_1.c_customer_id, customer_1.c_first_name, customer_1.c_last_name, date_dim_1.d_year
                                             ->  Gather Merge  (cost=7756998.50..7758529.76 rows=11970 width=42)
                                                   Workers Planned: 2
                                                   ->  Partial GroupAggregate  (cost=7755998.47..7756148.10 rows=5985 width=42)
                                                         Group Key: customer_1.c_customer_id, customer_1.c_first_name, customer_1.c_last_name, date_dim_1.d_year
                                                         ->  Sort  (cost=7755998.47..7756013.44 rows=5985 width=42)
                                                               Sort Key: customer_1.c_customer_id, customer_1.c_first_name, customer_1.c_last_name
                                                               ->  Nested Loop  (cost=2213.43..7755623.00 rows=5985 width=42)
                                                                     ->  Parallel Hash Join  (cost=2213.00..7706878.35 rows=6272 width=16)
                                                                           Hash Cond: (store_sales_1.ss_sold_date_sk = date_dim_1.d_date_sk)
                                                                           ->  Parallel Seq Scan on store_sales store_sales_1  (cost=0.00..7389799.50 rows=119942250 width=16)
                                                                           ->  Parallel Hash  (cost=2212.97..2212.97 rows=2 width=8)
                                                                                 ->  Parallel Seq Scan on date_dim date_dim_1  (cost=0.00..2212.97 rows=2 width=8)
                                                                                       Filter: ((d_year = 2002) AND ((d_year = 2001) OR (d_year = 2002)))
                                                                     ->  Index Scan using customer_pkey on customer customer_1  (cost=0.43..7.77 rows=1 width=34)
                                                                           Index Cond: (c_customer_sk = store_sales_1.ss_customer_sk)
                                 ->  Subquery Scan on "*SELECT* 2_1"  (cost=0.01..0.04 rows=1 width=38)
                                       ->  GroupAggregate  (cost=0.01..0.03 rows=1 width=74)
                                             Group Key: c_customer_id, c_first_name, c_last_name, d_year
                                             ->  Sort  (cost=0.01..0.02 rows=0 width=42)
                                                   Sort Key: c_customer_id, c_first_name, c_last_name, d_year
                                                   ->  Result  (cost=0.00..0.00 rows=0 width=42)
                                                         One-Time Filter: false
               ->  Materialize  (cost=0.00..2510511.87 rows=1314 width=25)
                     ->  Append  (cost=0.00..2510505.30 rows=1314 width=25)
                           ->  Subquery Scan on "*SELECT* 1_2"  (cost=0.00..0.02 rows=1 width=25)
                                 ->  HashAggregate  (cost=0.00..0.01 rows=1 width=74)
                                       Group Key: c_customer_id, c_first_name, c_last_name, d_year
                                       ->  Result  (cost=0.00..0.00 rows=0 width=42)
                                             One-Time Filter: false
                           ->  Subquery Scan on "*SELECT* 2_2"  (cost=2509966.96..2510498.71 rows=1313 width=25)
                                 ->  Finalize GroupAggregate  (cost=2509966.96..2510485.58 rows=1313 width=74)
                                       Group Key: customer_2.c_customer_id, customer_2.c_first_name, customer_2.c_last_name, date_dim_2.d_year
                                       Filter: (sum(web_sales.ws_net_paid) > '0'::double precision)
                                       ->  Gather Merge  (cost=2509966.96..2510387.07 rows=3284 width=42)
                                             Workers Planned: 2
                                             ->  Partial GroupAggregate  (cost=2508966.94..2509007.99 rows=1642 width=42)
                                                   Group Key: customer_2.c_customer_id, customer_2.c_first_name, customer_2.c_last_name, date_dim_2.d_year
                                                   ->  Sort  (cost=2508966.94..2508971.04 rows=1642 width=42)
                                                         Sort Key: customer_2.c_customer_id, customer_2.c_first_name, customer_2.c_last_name
                                                         ->  Nested Loop  (cost=2213.43..2508879.25 rows=1642 width=42)
                                                               ->  Parallel Hash Join  (cost=2213.00..2498196.94 rows=1642 width=16)
                                                                     Hash Cond: (web_sales.ws_sold_date_sk = date_dim_2.d_date_sk)
                                                                     ->  Parallel Seq Scan on web_sales  (cost=0.00..2417251.13 rows=29991713 width=16)
                                                                     ->  Parallel Hash  (cost=2212.97..2212.97 rows=2 width=8)
                                                                           ->  Parallel Seq Scan on date_dim date_dim_2  (cost=0.00..2212.97 rows=2 width=8)
                                                                                 Filter: ((d_year = 2001) AND ((d_year = 2001) OR (d_year = 2002)))
                                                               ->  Index Scan using customer_pkey on customer customer_2  (cost=0.43..6.51 rows=1 width=34)
                                                                     Index Cond: (c_customer_sk = web_sales.ws_bill_customer_sk)
         ->  Materialize  (cost=0.00..2510546.35 rows=3941 width=25)
               ->  Append  (cost=0.00..2510526.64 rows=3941 width=25)
                     ->  Subquery Scan on "*SELECT* 1_3"  (cost=0.00..0.02 rows=1 width=25)
                           ->  HashAggregate  (cost=0.00..0.01 rows=1 width=74)
                                 Group Key: c_customer_id, c_first_name, c_last_name, d_year
                                 ->  Result  (cost=0.00..0.00 rows=0 width=42)
                                       One-Time Filter: false
                     ->  Subquery Scan on "*SELECT* 2_3"  (cost=2509966.96..2510506.92 rows=3940 width=25)
                           ->  Finalize GroupAggregate  (cost=2509966.96..2510467.52 rows=3940 width=74)
                                 Group Key: customer_3.c_customer_id, customer_3.c_first_name, customer_3.c_last_name, date_dim_3.d_year
                                 ->  Gather Merge  (cost=2509966.96..2510387.07 rows=3284 width=42)
                                       Workers Planned: 2
                                       ->  Partial GroupAggregate  (cost=2508966.94..2509007.99 rows=1642 width=42)
                                             Group Key: customer_3.c_customer_id, customer_3.c_first_name, customer_3.c_last_name, date_dim_3.d_year
                                             ->  Sort  (cost=2508966.94..2508971.04 rows=1642 width=42)
                                                   Sort Key: customer_3.c_customer_id, customer_3.c_first_name, customer_3.c_last_name
                                                   ->  Nested Loop  (cost=2213.43..2508879.25 rows=1642 width=42)
                                                         ->  Parallel Hash Join  (cost=2213.00..2498196.94 rows=1642 width=16)
                                                               Hash Cond: (web_sales_1.ws_sold_date_sk = date_dim_3.d_date_sk)
                                                               ->  Parallel Seq Scan on web_sales web_sales_1  (cost=0.00..2417251.13 rows=29991713 width=16)
                                                               ->  Parallel Hash  (cost=2212.97..2212.97 rows=2 width=8)
                                                                     ->  Parallel Seq Scan on date_dim date_dim_3  (cost=0.00..2212.97 rows=2 width=8)
                                                                           Filter: ((d_year = 2002) AND ((d_year = 2001) OR (d_year = 2002)))
                                                         ->  Index Scan using customer_pkey on customer customer_3  (cost=0.43..6.51 rows=1 width=34)
                                                               Index Cond: (c_customer_sk = web_sales_1.ws_bill_customer_sk)
 JIT:
   Functions: 147
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(120 rows)

