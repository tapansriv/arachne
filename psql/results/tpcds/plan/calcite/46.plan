                                                                                                  QUERY PLAN                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=7895059.15..7895059.40 rows=100 width=51)
   ->  Sort  (cost=7895059.15..7895148.01 rows=35543 width=51)
         Sort Key: customer.c_last_name NULLS FIRST, customer.c_first_name NULLS FIRST, customer_address.ca_city NULLS FIRST, customer_address_1.ca_city NULLS FIRST, store_sales.ss_ticket_number NULLS FIRST
         ->  Nested Loop  (cost=7735729.49..7893700.72 rows=35543 width=51)
               Join Filter: ((customer_address.ca_city)::text <> (customer_address_1.ca_city)::text)
               ->  Nested Loop  (cost=7735729.06..7875948.48 rows=35601 width=46)
                     ->  Finalize GroupAggregate  (cost=7735728.64..7740362.03 rows=35601 width=37)
                           Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk, store_sales.ss_addr_sk, customer_address_1.ca_city
                           ->  Gather Merge  (cost=7735728.64..7739561.00 rows=29668 width=37)
                                 Workers Planned: 2
                                 ->  Partial GroupAggregate  (cost=7734728.61..7735136.55 rows=14834 width=37)
                                       Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk, store_sales.ss_addr_sk, customer_address_1.ca_city
                                       ->  Sort  (cost=7734728.61..7734765.70 rows=14834 width=37)
                                             Sort Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk, store_sales.ss_addr_sk, customer_address_1.ca_city
                                             ->  Parallel Hash Join  (cost=7708831.89..7733700.87 rows=14834 width=37)
                                                   Hash Cond: (customer_address_1.ca_address_sk = store_sales.ss_addr_sk)
                                                   ->  Parallel Seq Scan on customer_address customer_address_1  (cost=0.00..23244.67 rows=416667 width=13)
                                                   ->  Parallel Hash  (cost=7708637.77..7708637.77 rows=15530 width=28)
                                                         ->  Hash Join  (cost=2524.90..7708637.77 rows=15530 width=28)
                                                               Hash Cond: (store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk)
                                                               ->  Hash Join  (cost=2344.40..7708286.17 rows=65142 width=32)
                                                                     Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                                                     ->  Parallel Hash Join  (cost=2322.66..7706988.01 rows=481410 width=36)
                                                                           Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                                           ->  Parallel Seq Scan on store_sales  (cost=0.00..7389799.50 rows=119942250 width=40)
                                                                           ->  Parallel Hash  (cost=2320.40..2320.40 rows=181 width=4)
                                                                                 ->  Parallel Seq Scan on date_dim  (cost=0.00..2320.40 rows=181 width=4)
                                                                                       Filter: ((d_dow = ANY ('{0,6}'::integer[])) AND ((d_year = 1999) OR (d_year = 2000) OR (d_year = 2001)))
                                                                     ->  Hash  (cost=21.02..21.02 rows=57 width=4)
                                                                           ->  Seq Scan on store  (cost=0.00..21.02 rows=57 width=4)
                                                                                 Filter: ((s_city)::text = ANY ('{Fairview,Midway}'::text[]))
                                                               ->  Hash  (cost=158.00..158.00 rows=1800 width=4)
                                                                     ->  Seq Scan on household_demographics  (cost=0.00..158.00 rows=1800 width=4)
                                                                           Filter: ((hd_dep_count = 4) OR (hd_vehicle_count = 3))
                     ->  Index Scan using customer_pkey on customer  (cost=0.43..3.80 rows=1 width=21)
                           Index Cond: (c_customer_sk = store_sales.ss_customer_sk)
               ->  Index Scan using customer_address_pkey on customer_address  (cost=0.42..0.49 rows=1 width=13)
                     Index Cond: (ca_address_sk = customer.c_current_addr_sk)
 JIT:
   Functions: 58
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(41 rows)

