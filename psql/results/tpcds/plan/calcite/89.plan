                                                                                                                                                                            QUERY PLAN                                                                                                                                                                             
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=7728870.36..7728870.61 rows=100 width=71)
   ->  Sort  (cost=7728870.36..7728894.18 rows=9527 width=71)
         Sort Key: ((t10.sum_sales - t10.avg_monthly_sales)), t10.s_store_name, t10.i_category, t10.i_class, t10.i_brand, t10.s_company_name, t10.d_moy, t10.sum_sales, t10.avg_monthly_sales
         ->  Subquery Scan on t10  (cost=7726767.51..7728506.24 rows=9527 width=71)
               Filter: (CASE WHEN (t10.avg_monthly_sales <> '0'::double precision) THEN ((abs((t10.sum_sales - t10.avg_monthly_sales)) / t10.avg_monthly_sales))::numeric(19,0) ELSE NULL::numeric END > 0.1)
               ->  WindowAgg  (cost=7726767.51..7727696.42 rows=28582 width=63)
                     ->  Sort  (cost=7726767.51..7726838.96 rows=28582 width=55)
                           Sort Key: t9.i_category, t9.i_brand, t9.s_store_name, t9.s_company_name
                           ->  Subquery Scan on t9  (cost=7720557.12..7724652.04 rows=28582 width=55)
                                 ->  Finalize GroupAggregate  (cost=7720557.12..7724366.22 rows=28582 width=55)
                                       Group Key: item.i_category, item.i_class, item.i_brand, store.s_store_name, store.s_company_name, date_dim.d_moy
                                       ->  Gather Merge  (cost=7720557.12..7723663.58 rows=23818 width=55)
                                             Workers Planned: 2
                                             ->  Partial GroupAggregate  (cost=7719557.10..7719914.37 rows=11909 width=55)
                                                   Group Key: item.i_category, item.i_class, item.i_brand, store.s_store_name, store.s_company_name, date_dim.d_moy
                                                   ->  Sort  (cost=7719557.10..7719586.87 rows=11909 width=55)
                                                         Sort Key: item.i_category, item.i_class, item.i_brand, store.s_store_name, store.s_company_name, date_dim.d_moy
                                                         ->  Hash Join  (cost=12554.07..7718750.87 rows=11909 width=55)
                                                               Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                                               ->  Parallel Hash Join  (cost=12529.02..7718692.74 rows=12479 width=47)
                                                                     Hash Cond: (store_sales.ss_item_sk = item.i_item_sk)
                                                                     ->  Parallel Hash Join  (cost=2000.80..7706666.15 rows=570792 width=20)
                                                                           Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                                           ->  Parallel Seq Scan on store_sales  (cost=0.00..7389799.50 rows=119942250 width=20)
                                                                           ->  Parallel Hash  (cost=1998.12..1998.12 rows=214 width=8)
                                                                                 ->  Parallel Seq Scan on date_dim  (cost=0.00..1998.12 rows=214 width=8)
                                                                                       Filter: (d_year = 1999)
                                                                     ->  Parallel Hash  (cost=10505.00..10505.00 rows=1858 width=35)
                                                                           ->  Parallel Seq Scan on item  (cost=0.00..10505.00 rows=1858 width=35)
                                                                                 Filter: ((((i_category)::text = ANY ('{Books,Electronics,Sports}'::text[])) AND ((i_class)::text = ANY ('{computers,football,stereo}'::text[]))) OR (((i_category)::text = ANY ('{Jewelry,Men,Women}'::text[])) AND ((i_class)::text = ANY ('{birdal,dresses,shirts}'::text[]))))
                                                               ->  Hash  (cost=20.02..20.02 rows=402 width=16)
                                                                     ->  Seq Scan on store  (cost=0.00..20.02 rows=402 width=16)
 JIT:
   Functions: 50
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(35 rows)

