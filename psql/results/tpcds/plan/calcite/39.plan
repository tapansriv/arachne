

 Sort  (cost=8632030.81..8632210.69 rows=71953 width=296)
   Sort Key: warehouse_1.w_warehouse_sk NULLS FIRST, item_1.i_item_sk NULLS FIRST, (avg(inventory.inv_quantity_on_hand)) NULLS FIRST, (CASE WHEN ((avg(inventory.inv_quantity_on_hand)) = '0'::numeric) THEN NULL::numeric ELSE (((stddev_samp(inventory.inv_quantity_on_hand)) * 1.000) / (avg(inventory.inv_quantity_on_hand))) END) NULLS FIRST, (avg(inventory0.inv_quantity_on_hand)) NULLS FIRST, (CASE WHEN ((avg(inventory0.inv_quantity_on_hand)) = '0'::numeric) THEN NULL::numeric ELSE (((stddev_samp(inventory0.inv_quantity_on_hand)) * 1.000) / (avg(inventory0.inv_quantity_on_hand))) END) NULLS FIRST
   ->  Merge Join  (cost=8559756.46..8616387.58 rows=71953 width=296)
         Merge Cond: ((warehouse.w_warehouse_sk = warehouse_1.w_warehouse_sk) AND (item.i_item_sk = item_1.i_item_sk))
         ->  Finalize GroupAggregate  (cost=4279411.07..4304033.94 rows=50986 width=134)
               Group Key: warehouse.w_warehouse_sk, item.i_item_sk, date_dim.d_moy
               Filter: (CASE WHEN (avg(inventory0.inv_quantity_on_hand) = '0'::numeric) THEN '0'::numeric ELSE ((stddev_samp(inventory0.inv_quantity_on_hand) * 1.000) / avg(inventory0.inv_quantity_on_hand)) END > '1'::numeric)
               ->  Gather Merge  (cost=4279411.07..4295876.21 rows=127464 width=134)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=4278411.04..4280163.67 rows=63732 width=134)
                           Group Key: warehouse.w_warehouse_sk, item.i_item_sk, date_dim.d_moy
                           ->  Sort  (cost=4278411.04..4278570.37 rows=63732 width=74)
                                 Sort Key: warehouse.w_warehouse_sk, item.i_item_sk
                                 ->  Hash Join  (cost=12410.73..4270490.32 rows=63732 width=74)
                                       Hash Cond: (inventory0.inv_warehouse_sk = warehouse.w_warehouse_sk)
                                       ->  Parallel Hash Join  (cost=12398.25..4270304.10 rows=63732 width=16)
                                             Hash Cond: (inventory0.inv_item_sk = item.i_item_sk)
                                             ->  Parallel Hash Join  (cost=2105.75..4259844.31 rows=63732 width=16)
                                                   Hash Cond: (inventory0.inv_date_sk = date_dim.d_date_sk)
                                                   ->  Parallel Seq Scan on inventory inventory0  (cost=0.00..3821251.68 rows=166271068 width=16)
                                                   ->  Parallel Hash  (cost=2105.55..2105.55 rows=16 width=8)
                                                         ->  Parallel Seq Scan on date_dim  (cost=0.00..2105.55 rows=16 width=8)
                                                               Filter: ((d_year = 2001) AND (d_moy = 2))
                                             ->  Parallel Hash  (cost=9230.00..9230.00 rows=85000 width=4)
                                                   ->  Parallel Seq Scan on item  (cost=0.00..9230.00 rows=85000 width=4)
                                       ->  Hash  (cost=11.10..11.10 rows=110 width=62)
                                             ->  Seq Scan on warehouse  (cost=0.00..11.10 rows=110 width=62)
         ->  Materialize  (cost=4280345.39..4308312.21 rows=56449 width=76)
               ->  Finalize GroupAggregate  (cost=4280345.39..4307606.59 rows=56449 width=134)
                     Group Key: warehouse_1.w_warehouse_sk, item_1.i_item_sk, date_dim_1.d_moy
                     Filter: (CASE WHEN (avg(inventory.inv_quantity_on_hand) = '0'::numeric) THEN '0'::numeric ELSE ((stddev_samp(inventory.inv_quantity_on_hand) * 1.000) / avg(inventory.inv_quantity_on_hand)) END > '1'::numeric)
                     ->  Gather Merge  (cost=4280345.39..4298574.80 rows=141122 width=134)
                           Workers Planned: 2
                           ->  Partial GroupAggregate  (cost=4279345.37..4281285.79 rows=70561 width=134)
                                 Group Key: warehouse_1.w_warehouse_sk, item_1.i_item_sk, date_dim_1.d_moy
                                 ->  Sort  (cost=4279345.37..4279521.77 rows=70561 width=74)
                                       Sort Key: warehouse_1.w_warehouse_sk, item_1.i_item_sk
                                       ->  Hash Join  (cost=12410.75..4270526.88 rows=70561 width=74)
                                             Hash Cond: (inventory.inv_warehouse_sk = warehouse_1.w_warehouse_sk)
                                             ->  Parallel Hash Join  (cost=12398.27..4270322.05 rows=70561 width=16)
                                                   Hash Cond: (inventory.inv_item_sk = item_1.i_item_sk)
                                                   ->  Parallel Hash Join  (cost=2105.78..4259844.33 rows=70561 width=16)
                                                         Hash Cond: (inventory.inv_date_sk = date_dim_1.d_date_sk)
                                                         ->  Parallel Seq Scan on inventory  (cost=0.00..3821251.68 rows=166271068 width=16)
                                                         ->  Parallel Hash  (cost=2105.55..2105.55 rows=18 width=8)
                                                               ->  Parallel Seq Scan on date_dim date_dim_1  (cost=0.00..2105.55 rows=18 width=8)
                                                                     Filter: ((d_year = 2001) AND (d_moy = 1))
                                                   ->  Parallel Hash  (cost=9230.00..9230.00 rows=85000 width=4)
                                                         ->  Parallel Seq Scan on item item_1  (cost=0.00..9230.00 rows=85000 width=4)
                                             ->  Hash  (cost=11.10..11.10 rows=110 width=62)
                                                   ->  Seq Scan on warehouse warehouse_1  (cost=0.00..11.10 rows=110 width=62)
 JIT:
   Functions: 84
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(54 rows)

