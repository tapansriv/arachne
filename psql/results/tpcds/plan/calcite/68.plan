                                                                                        QUERY PLAN                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=7790865.97..7790866.22 rows=100 width=59)
   ->  Sort  (cost=7790865.97..7790886.23 rows=8104 width=59)
         Sort Key: customer.c_last_name NULLS FIRST, store_sales.ss_ticket_number NULLS FIRST
         ->  Nested Loop  (cost=7733690.63..7790556.24 rows=8104 width=59)
               Join Filter: ((customer_address.ca_city)::text <> (customer_address_1.ca_city)::text)
               ->  Nested Loop  (cost=7733690.20..7786508.74 rows=8117 width=54)
                     ->  Finalize GroupAggregate  (cost=7733689.77..7734771.51 rows=8117 width=45)
                           Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk, store_sales.ss_addr_sk, customer_address_1.ca_city
                           ->  Gather Merge  (cost=7733689.77..7734571.97 rows=6764 width=45)
                                 Workers Planned: 2
                                 ->  Partial GroupAggregate  (cost=7732689.75..7732791.21 rows=3382 width=45)
                                       Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk, store_sales.ss_addr_sk, customer_address_1.ca_city
                                       ->  Sort  (cost=7732689.75..7732698.20 rows=3382 width=45)
                                             Sort Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk, store_sales.ss_addr_sk, customer_address_1.ca_city
                                             ->  Parallel Hash Join  (cost=7707670.24..7732491.50 rows=3382 width=45)
                                                   Hash Cond: (customer_address_1.ca_address_sk = store_sales.ss_addr_sk)
                                                   ->  Parallel Seq Scan on customer_address customer_address_1  (cost=0.00..23244.67 rows=416667 width=13)
                                                   ->  Parallel Hash  (cost=7707625.98..7707625.98 rows=3541 width=36)
                                                         ->  Hash Join  (cost=2630.57..7707625.98 rows=3541 width=36)
                                                               Hash Cond: (store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk)
                                                               ->  Hash Join  (cost=2450.07..7707406.47 rows=14853 width=40)
                                                                     Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                                                     ->  Parallel Hash Join  (cost=2428.34..7707093.69 rows=109768 width=44)
                                                                           Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                                           ->  Parallel Seq Scan on store_sales  (cost=0.00..7389799.50 rows=119942250 width=48)
                                                                           ->  Parallel Hash  (cost=2427.82..2427.82 rows=41 width=4)
                                                                                 ->  Parallel Seq Scan on date_dim  (cost=0.00..2427.82 rows=41 width=4)
                                                                                       Filter: ((d_dom >= 1) AND (d_dom <= 2) AND ((d_year = 1999) OR (d_year = 2000) OR (d_year = 2001)))
                                                                     ->  Hash  (cost=21.02..21.02 rows=57 width=4)
                                                                           ->  Seq Scan on store  (cost=0.00..21.02 rows=57 width=4)
                                                                                 Filter: ((s_city)::text = ANY ('{Fairview,Midway}'::text[]))
                                                               ->  Hash  (cost=158.00..158.00 rows=1800 width=4)
                                                                     ->  Seq Scan on household_demographics  (cost=0.00..158.00 rows=1800 width=4)
                                                                           Filter: ((hd_dep_count = 4) OR (hd_vehicle_count = 3))
                     ->  Index Scan using customer_pkey on customer  (cost=0.43..6.36 rows=1 width=21)
                           Index Cond: (c_customer_sk = store_sales.ss_customer_sk)
               ->  Index Scan using customer_address_pkey on customer_address  (cost=0.42..0.49 rows=1 width=13)
                     Index Cond: (ca_address_sk = customer.c_current_addr_sk)
 JIT:
   Functions: 58
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(41 rows)

