

 Limit  (cost=32432157.36..32432157.37 rows=1 width=56)
   ->  Sort  (cost=32432157.36..32432157.37 rows=1 width=56)
         Sort Key: (((sum(((store_sales.ss_quantity - CASE WHEN (store_returns.sr_return_quantity IS NOT NULL) THEN store_returns.sr_return_quantity ELSE 0 END)))) - (sum(((store_sales_1.ss_quantity - CASE WHEN (store_returns_1.sr_return_quantity IS NOT NULL) THEN store_returns_1.sr_return_quantity ELSE 0 END)))))), (((sum(((store_sales.ss_ext_sales_price - CASE WHEN (store_returns.sr_return_amt IS NOT NULL) THEN store_returns.sr_return_amt ELSE '0'::double precision END)))) - (sum(((store_sales_1.ss_ext_sales_price - CASE WHEN (store_returns_1.sr_return_amt IS NOT NULL) THEN store_returns_1.sr_return_amt ELSE '0'::double precision END))))))
         ->  Merge Join  (cost=32406011.73..32432157.35 rows=1 width=56)
               Merge Cond: ((item.i_brand_id = item_3.i_brand_id) AND (item.i_class_id = item_3.i_class_id) AND (item.i_category_id = item_3.i_category_id) AND (item.i_manufact_id = item_3.i_manufact_id))
               Join Filter: ((((sum(((store_sales.ss_quantity - CASE WHEN (store_returns.sr_return_quantity IS NOT NULL) THEN store_returns.sr_return_quantity ELSE 0 END))))::numeric(17,2)) / ((sum(((store_sales_1.ss_quantity - CASE WHEN (store_returns_1.sr_return_quantity IS NOT NULL) THEN store_returns_1.sr_return_quantity ELSE 0 END))))::numeric(17,2))) < 0.9)
               ->  GroupAggregate  (cost=16203005.86..16215560.63 rows=24378 width=54)
                     Group Key: date_dim.d_year, item.i_brand_id, item.i_class_id, item.i_category_id, item.i_manufact_id
                     ->  Unique  (cost=16203005.86..16207881.50 rows=243782 width=32)
                           ->  Sort  (cost=16203005.86..16203615.32 rows=243782 width=32)
                                 Sort Key: date_dim.d_year, item.i_brand_id, item.i_class_id, item.i_category_id, item.i_manufact_id, ((store_sales.ss_quantity - CASE WHEN (store_returns.sr_return_quantity IS NOT NULL) THEN store_returns.sr_return_quantity ELSE 0 END)), ((store_sales.ss_ext_sales_price - CASE WHEN (store_returns.sr_return_amt IS NOT NULL) THEN store_returns.sr_return_amt ELSE '0'::double precision END))
                                 ->  Append  (cost=13534635.04..16175358.69 rows=243782 width=32)
                                       ->  Unique  (cost=13534635.04..13538794.72 rows=207984 width=32)
                                             ->  Sort  (cost=13534635.04..13535155.00 rows=207984 width=32)
                                                   Sort Key: date_dim.d_year, item.i_brand_id, item.i_class_id, item.i_category_id, item.i_manufact_id, ((store_sales.ss_quantity - CASE WHEN (store_returns.sr_return_quantity IS NOT NULL) THEN store_returns.sr_return_quantity ELSE 0 END)), ((store_sales.ss_ext_sales_price - CASE WHEN (store_returns.sr_return_amt IS NOT NULL) THEN store_returns.sr_return_amt ELSE '0'::double precision END))
                                                   ->  Gather  (cost=5025300.70..13511286.70 rows=207984 width=32)
                                                         Workers Planned: 2
                                                         ->  Parallel Append  (cost=5024300.70..13489488.30 rows=207984 width=32)
                                                               ->  Nested Loop Left Join  (cost=7785336.83..8236187.23 rows=56984 width=32)
                                                                     ->  Merge Join  (cost=7785336.39..7788861.93 rows=56984 width=40)
                                                                           Merge Cond: (store_sales.ss_item_sk = item.i_item_sk)
                                                                           ->  Sort  (cost=7772948.80..7774375.78 rows=570792 width=24)
                                                                                 Sort Key: store_sales.ss_item_sk
                                                                                 ->  Parallel Hash Join  (cost=2000.80..7706666.15 rows=570792 width=24)
                                                                                       Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                                                       ->  Parallel Seq Scan on store_sales  (cost=0.00..7389799.50 rows=119942250 width=24)
                                                                                       ->  Parallel Hash  (cost=1998.12..1998.12 rows=214 width=8)
                                                                                             ->  Parallel Seq Scan on date_dim  (cost=0.00..1998.12 rows=214 width=8)
                                                                                                   Filter: (d_year = 2002)
                                                                           ->  Sort  (cost=12387.58..12438.50 rows=20366 width=20)
                                                                                 Sort Key: item.i_item_sk
                                                                                 ->  Seq Scan on item  (cost=0.00..10930.00 rows=20366 width=20)
                                                                                       Filter: ((i_category)::text = 'Books'::text)
                                                                     ->  Index Scan using store_returns_pkey on store_returns  (cost=0.44..7.85 rows=1 width=20)
                                                                           Index Cond: ((sr_item_sk = store_sales.ss_item_sk) AND (sr_ticket_number = store_sales.ss_ticket_number))
                                                               ->  Nested Loop Left Join  (cost=5024300.70..5250181.31 rows=29676 width=32)
                                                                     ->  Merge Join  (cost=5024300.27..5026185.05 rows=29676 width=40)
                                                                           Merge Cond: (catalog_sales.cs_item_sk = item_1.i_item_sk)
                                                                           ->  Sort  (cost=5011912.61..5012655.75 rows=297255 width=24)
                                                                                 Sort Key: catalog_sales.cs_item_sk
                                                                                 ->  Parallel Hash Join  (cost=2000.80..4978793.14 rows=297255 width=24)
                                                                                       Hash Cond: (catalog_sales.cs_sold_date_sk = date_dim_1.d_date_sk)
                                                                                       ->  Parallel Seq Scan on catalog_sales  (cost=0.00..4819292.97 rows=59996297 width=24)
                                                                                       ->  Parallel Hash  (cost=1998.12..1998.12 rows=214 width=8)
                                                                                             ->  Parallel Seq Scan on date_dim date_dim_1  (cost=0.00..1998.12 rows=214 width=8)
                                                                                                   Filter: (d_year = 2002)
                                                                           ->  Sort  (cost=12387.58..12438.50 rows=20366 width=20)
                                                                                 Sort Key: item_1.i_item_sk
                                                                                 ->  Seq Scan on item item_1  (cost=0.00..10930.00 rows=20366 width=20)
                                                                                       Filter: ((i_category)::text = 'Books'::text)
                                                                     ->  Index Scan using catalog_returns_pkey on catalog_returns  (cost=0.43..7.54 rows=1 width=20)
                                                                           Index Cond: ((cr_item_sk = catalog_sales.cs_item_sk) AND (cr_order_number = catalog_sales.cs_order_number))
                                       ->  Gather  (cost=2527279.59..2630827.39 rows=35798 width=32)
                                             Workers Planned: 2
                                             ->  Nested Loop Left Join  (cost=2526279.59..2626247.59 rows=14916 width=32)
                                                   ->  Merge Join  (cost=2526279.15..2527277.14 rows=14916 width=40)
                                                         Merge Cond: (web_sales.ws_item_sk = item_2.i_item_sk)
                                                         ->  Sort  (cost=2513891.53..2514265.05 rows=149408 width=24)
                                                               Sort Key: web_sales.ws_item_sk
                                                               ->  Parallel Hash Join  (cost=2000.80..2497984.74 rows=149408 width=24)
                                                                     Hash Cond: (web_sales.ws_sold_date_sk = date_dim_2.d_date_sk)
                                                                     ->  Parallel Seq Scan on web_sales  (cost=0.00..2417251.13 rows=29991713 width=24)
                                                                     ->  Parallel Hash  (cost=1998.12..1998.12 rows=214 width=8)
                                                                           ->  Parallel Seq Scan on date_dim date_dim_2  (cost=0.00..1998.12 rows=214 width=8)
                                                                                 Filter: (d_year = 2002)
                                                         ->  Sort  (cost=12387.58..12438.50 rows=20366 width=20)
                                                               Sort Key: item_2.i_item_sk
                                                               ->  Seq Scan on item item_2  (cost=0.00..10930.00 rows=20366 width=20)
                                                                     Filter: ((i_category)::text = 'Books'::text)
                                                   ->  Index Scan using web_returns_pkey on web_returns  (cost=0.43..6.63 rows=1 width=20)
                                                         Index Cond: ((wr_item_sk = web_sales.ws_item_sk) AND (wr_order_number = web_sales.ws_order_number))
               ->  Materialize  (cost=16203005.86..16215865.36 rows=24378 width=54)
                     ->  GroupAggregate  (cost=16203005.86..16215560.63 rows=24378 width=54)
                           Group Key: date_dim_3.d_year, item_3.i_brand_id, item_3.i_class_id, item_3.i_category_id, item_3.i_manufact_id
                           ->  Unique  (cost=16203005.86..16207881.50 rows=243782 width=32)
                                 ->  Sort  (cost=16203005.86..16203615.32 rows=243782 width=32)
                                       Sort Key: date_dim_3.d_year, item_3.i_brand_id, item_3.i_class_id, item_3.i_category_id, item_3.i_manufact_id, ((store_sales_1.ss_quantity - CASE WHEN (store_returns_1.sr_return_quantity IS NOT NULL) THEN store_returns_1.sr_return_quantity ELSE 0 END)), ((store_sales_1.ss_ext_sales_price - CASE WHEN (store_returns_1.sr_return_amt IS NOT NULL) THEN store_returns_1.sr_return_amt ELSE '0'::double precision END))
                                       ->  Append  (cost=13534635.04..16175358.69 rows=243782 width=32)
                                             ->  Unique  (cost=13534635.04..13538794.72 rows=207984 width=32)
                                                   ->  Sort  (cost=13534635.04..13535155.00 rows=207984 width=32)
                                                         Sort Key: date_dim_3.d_year, item_3.i_brand_id, item_3.i_class_id, item_3.i_category_id, item_3.i_manufact_id, ((store_sales_1.ss_quantity - CASE WHEN (store_returns_1.sr_return_quantity IS NOT NULL) THEN store_returns_1.sr_return_quantity ELSE 0 END)), ((store_sales_1.ss_ext_sales_price - CASE WHEN (store_returns_1.sr_return_amt IS NOT NULL) THEN store_returns_1.sr_return_amt ELSE '0'::double precision END))
                                                         ->  Gather  (cost=5025300.70..13511286.70 rows=207984 width=32)
                                                               Workers Planned: 2
                                                               ->  Parallel Append  (cost=5024300.70..13489488.30 rows=207984 width=32)
                                                                     ->  Nested Loop Left Join  (cost=7785336.83..8236187.23 rows=56984 width=32)
                                                                           ->  Merge Join  (cost=7785336.39..7788861.93 rows=56984 width=40)
                                                                                 Merge Cond: (store_sales_1.ss_item_sk = item_3.i_item_sk)
                                                                                 ->  Sort  (cost=7772948.80..7774375.78 rows=570792 width=24)
                                                                                       Sort Key: store_sales_1.ss_item_sk
                                                                                       ->  Parallel Hash Join  (cost=2000.80..7706666.15 rows=570792 width=24)
                                                                                             Hash Cond: (store_sales_1.ss_sold_date_sk = date_dim_3.d_date_sk)
                                                                                             ->  Parallel Seq Scan on store_sales store_sales_1  (cost=0.00..7389799.50 rows=119942250 width=24)
                                                                                             ->  Parallel Hash  (cost=1998.12..1998.12 rows=214 width=8)
                                                                                                   ->  Parallel Seq Scan on date_dim date_dim_3  (cost=0.00..1998.12 rows=214 width=8)
                                                                                                         Filter: (d_year = 2001)
                                                                                 ->  Sort  (cost=12387.58..12438.50 rows=20366 width=20)
                                                                                       Sort Key: item_3.i_item_sk
                                                                                       ->  Seq Scan on item item_3  (cost=0.00..10930.00 rows=20366 width=20)
                                                                                             Filter: ((i_category)::text = 'Books'::text)
                                                                           ->  Index Scan using store_returns_pkey on store_returns store_returns_1  (cost=0.44..7.85 rows=1 width=20)
                                                                                 Index Cond: ((sr_item_sk = store_sales_1.ss_item_sk) AND (sr_ticket_number = store_sales_1.ss_ticket_number))
                                                                     ->  Nested Loop Left Join  (cost=5024300.70..5250181.31 rows=29676 width=32)
                                                                           ->  Merge Join  (cost=5024300.27..5026185.05 rows=29676 width=40)
                                                                                 Merge Cond: (catalog_sales_1.cs_item_sk = item_4.i_item_sk)
                                                                                 ->  Sort  (cost=5011912.61..5012655.75 rows=297255 width=24)
                                                                                       Sort Key: catalog_sales_1.cs_item_sk
                                                                                       ->  Parallel Hash Join  (cost=2000.80..4978793.14 rows=297255 width=24)
                                                                                             Hash Cond: (catalog_sales_1.cs_sold_date_sk = date_dim_4.d_date_sk)
                                                                                             ->  Parallel Seq Scan on catalog_sales catalog_sales_1  (cost=0.00..4819292.97 rows=59996297 width=24)
                                                                                             ->  Parallel Hash  (cost=1998.12..1998.12 rows=214 width=8)
                                                                                                   ->  Parallel Seq Scan on date_dim date_dim_4  (cost=0.00..1998.12 rows=214 width=8)
                                                                                                         Filter: (d_year = 2001)
                                                                                 ->  Sort  (cost=12387.58..12438.50 rows=20366 width=20)
                                                                                       Sort Key: item_4.i_item_sk
                                                                                       ->  Seq Scan on item item_4  (cost=0.00..10930.00 rows=20366 width=20)
                                                                                             Filter: ((i_category)::text = 'Books'::text)
                                                                           ->  Index Scan using catalog_returns_pkey on catalog_returns catalog_returns_1  (cost=0.43..7.54 rows=1 width=20)
                                                                                 Index Cond: ((cr_item_sk = catalog_sales_1.cs_item_sk) AND (cr_order_number = catalog_sales_1.cs_order_number))
                                             ->  Gather  (cost=2527279.59..2630827.39 rows=35798 width=32)
                                                   Workers Planned: 2
                                                   ->  Nested Loop Left Join  (cost=2526279.59..2626247.59 rows=14916 width=32)
                                                         ->  Merge Join  (cost=2526279.15..2527277.14 rows=14916 width=40)
                                                               Merge Cond: (web_sales_1.ws_item_sk = item_5.i_item_sk)
                                                               ->  Sort  (cost=2513891.53..2514265.05 rows=149408 width=24)
                                                                     Sort Key: web_sales_1.ws_item_sk
                                                                     ->  Parallel Hash Join  (cost=2000.80..2497984.74 rows=149408 width=24)
                                                                           Hash Cond: (web_sales_1.ws_sold_date_sk = date_dim_5.d_date_sk)
                                                                           ->  Parallel Seq Scan on web_sales web_sales_1  (cost=0.00..2417251.13 rows=29991713 width=24)
                                                                           ->  Parallel Hash  (cost=1998.12..1998.12 rows=214 width=8)
                                                                                 ->  Parallel Seq Scan on date_dim date_dim_5  (cost=0.00..1998.12 rows=214 width=8)
                                                                                       Filter: (d_year = 2001)
                                                               ->  Sort  (cost=12387.58..12438.50 rows=20366 width=20)
                                                                     Sort Key: item_5.i_item_sk
                                                                     ->  Seq Scan on item item_5  (cost=0.00..10930.00 rows=20366 width=20)
                                                                           Filter: ((i_category)::text = 'Books'::text)
                                                         ->  Index Scan using web_returns_pkey on web_returns web_returns_1  (cost=0.43..6.63 rows=1 width=20)
                                                               Index Cond: ((wr_item_sk = web_sales_1.ws_item_sk) AND (wr_order_number = web_sales_1.ws_order_number))
 JIT:
   Functions: 199
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(140 rows)

