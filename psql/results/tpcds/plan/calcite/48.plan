                                                                                                                                                                                                                                                                                                                                                                                                                            QUERY PLAN                                                                                                                                                                                                                                                                                                                                                                                                                             

 Finalize Aggregate  (cost=11088204.75..11088204.76 rows=1 width=8)
   ->  Gather  (cost=11088204.54..11088204.75 rows=2 width=8)
         Workers Planned: 2
         ->  Partial Aggregate  (cost=11087204.54..11087204.55 rows=1 width=8)
               ->  Nested Loop  (cost=42400.02..11087204.00 rows=216 width=4)
                     ->  Hash Join  (cost=42399.59..11071682.52 rows=1985 width=16)
                           Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                           ->  Parallel Hash Join  (cost=42374.55..11071651.96 rows=2080 width=20)
                                 Hash Cond: (store_sales.ss_cdemo_sk = customer_demographics.cd_demo_sk)
                                 Join Filter: ((((customer_demographics.cd_marital_status)::text = 'M'::text) AND ((customer_demographics.cd_education_status)::text = '4 yr Degree'::text) AND (store_sales.ss_sales_price >= '100'::double precision) AND (store_sales.ss_sales_price <= '150'::double precision)) OR (((customer_demographics.cd_marital_status)::text = 'D'::text) AND ((customer_demographics.cd_education_status)::text = '2 yr Degree'::text) AND (store_sales.ss_sales_price >= '50'::double precision) AND (store_sales.ss_sales_price <= '100'::double precision)) OR (((customer_demographics.cd_marital_status)::text = 'S'::text) AND ((customer_demographics.cd_education_status)::text = 'College'::text) AND (store_sales.ss_sales_price >= '150'::double precision) AND (store_sales.ss_sales_price <= '200'::double precision)))
                                 ->  Parallel Hash Join  (cost=2000.80..11031083.04 rows=74353 width=32)
                                       Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                       ->  Parallel Seq Scan on store_sales  (cost=0.00..10988067.00 rows=15623989 width=36)
                                             Filter: ((((ss_sales_price >= '100'::double precision) AND (ss_sales_price <= '150'::double precision)) OR ((ss_sales_price >= '50'::double precision) AND (ss_sales_price <= '100'::double precision)) OR ((ss_sales_price >= '150'::double precision) AND (ss_sales_price <= '200'::double precision))) AND (((ss_net_profit >= '0'::double precision) AND (ss_net_profit <= '2000'::double precision)) OR ((ss_net_profit >= '150'::double precision) AND (ss_net_profit <= '3000'::double precision)) OR ((ss_net_profit >= '50'::double precision) AND (ss_net_profit <= '25000'::double precision))))
                                       ->  Parallel Hash  (cost=1998.12..1998.12 rows=214 width=4)
                                             ->  Parallel Seq Scan on date_dim  (cost=0.00..1998.12 rows=214 width=4)
                                                   Filter: (d_year = 2000)
                                 ->  Parallel Hash  (cost=39559.33..39559.33 rows=65153 width=16)
                                       ->  Parallel Seq Scan on customer_demographics  (cost=0.00..39559.33 rows=65153 width=16)
                                             Filter: ((((cd_marital_status)::text = 'M'::text) AND ((cd_education_status)::text = '4 yr Degree'::text)) OR (((cd_marital_status)::text = 'D'::text) AND ((cd_education_status)::text = '2 yr Degree'::text)) OR (((cd_marital_status)::text = 'S'::text) AND ((cd_education_status)::text = 'College'::text)))
                           ->  Hash  (cost=20.02..20.02 rows=402 width=4)
                                 ->  Seq Scan on store  (cost=0.00..20.02 rows=402 width=4)
                     ->  Index Scan using customer_address_pkey on customer_address  (cost=0.42..7.81 rows=1 width=7)
                           Index Cond: (ca_address_sk = store_sales.ss_addr_sk)
                           Filter: (((ca_country)::text = 'United States'::text) AND (((ca_state)::text = ANY ('{CO,OH,TX}'::text[])) OR ((ca_state)::text = ANY ('{KY,MN,OR}'::text[])) OR ((ca_state)::text = ANY ('{CA,MS,VA}'::text[]))) AND ((((ca_state)::text = ANY ('{CO,OH,TX}'::text[])) AND (store_sales.ss_net_profit >= '0'::double precision) AND (store_sales.ss_net_profit <= '2000'::double precision)) OR (((ca_state)::text = ANY ('{KY,MN,OR}'::text[])) AND (store_sales.ss_net_profit >= '150'::double precision) AND (store_sales.ss_net_profit <= '3000'::double precision)) OR (((ca_state)::text = ANY ('{CA,MS,VA}'::text[])) AND (store_sales.ss_net_profit >= '50'::double precision) AND (store_sales.ss_net_profit <= '25000'::double precision))))
 JIT:
   Functions: 41
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(28 rows)

