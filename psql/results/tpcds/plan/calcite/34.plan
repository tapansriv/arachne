                                                                                                                                              QUERY PLAN                                                                                                                                               
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7716819.50..7716821.37 rows=747 width=31)
   Sort Key: customer.c_last_name NULLS FIRST, customer.c_first_name NULLS FIRST, customer.c_salutation NULLS FIRST, customer.c_preferred_cust_flag DESC, store_sales.ss_ticket_number NULLS FIRST
   ->  Nested Loop  (cost=7709810.57..7716783.85 rows=747 width=31)
         ->  Finalize GroupAggregate  (cost=7709810.14..7710683.97 rows=747 width=16)
               Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk
               Filter: ((count(*) >= 15) AND (count(*) <= 20))
               ->  Gather Merge  (cost=7709810.14..7710513.03 rows=5604 width=16)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=7708810.12..7708866.16 rows=2802 width=16)
                           Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk
                           ->  Sort  (cost=7708810.12..7708817.13 rows=2802 width=8)
                                 Sort Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk
                                 ->  Hash Join  (cost=2938.66..7708649.67 rows=2802 width=8)
                                       Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                       ->  Hash Join  (cost=2917.08..7708558.53 rows=26235 width=12)
                                             Hash Cond: (store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk)
                                             ->  Parallel Hash Join  (cost=2644.41..7707309.76 rows=371642 width=16)
                                                   Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                   ->  Parallel Seq Scan on store_sales  (cost=0.00..7389799.50 rows=119942250 width=20)
                                                   ->  Parallel Hash  (cost=2642.68..2642.68 rows=139 width=4)
                                                         ->  Parallel Seq Scan on date_dim  (cost=0.00..2642.68 rows=139 width=4)
                                                               Filter: (((d_year = 1999) OR (d_year = 2000) OR (d_year = 2001)) AND (((d_dom >= 1) AND (d_dom <= 3)) OR ((d_dom >= 25) AND (d_dom <= 28))))
                                             ->  Hash  (cost=266.00..266.00 rows=533 width=4)
                                                   ->  Seq Scan on household_demographics  (cost=0.00..266.00 rows=533 width=4)
                                                         Filter: (((hd_buy_potential)::text = ANY ('{>10000,Unknown}'::text[])) AND (hd_vehicle_count > 0) AND (CASE WHEN (hd_vehicle_count > 0) THEN (((hd_dep_count)::numeric * 1.000) / (hd_vehicle_count)::numeric) ELSE NULL::numeric END > 1.2))
                                       ->  Hash  (cost=21.02..21.02 rows=45 width=4)
                                             ->  Seq Scan on store  (cost=0.00..21.02 rows=45 width=4)
                                                   Filter: ((s_county)::text = 'Williamson County'::text)
         ->  Index Scan using customer_pkey on customer  (cost=0.43..8.16 rows=1 width=23)
               Index Cond: (c_customer_sk = store_sales.ss_customer_sk)
 JIT:
   Functions: 42
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

