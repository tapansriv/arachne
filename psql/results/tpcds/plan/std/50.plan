                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=733731.84..733732.25 rows=1 width=107)
   ->  Finalize GroupAggregate  (cost=733731.84..733732.25 rows=1 width=107)
         Group Key: store.s_store_name, store.s_company_id, store.s_street_number, store.s_street_name, store.s_street_type, store.s_suite_number, store.s_city, store.s_county, store.s_state, store.s_zip
         ->  Gather Merge  (cost=733731.84..733732.17 rows=2 width=107)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=732731.82..732731.91 rows=1 width=107)
                     Group Key: store.s_store_name, store.s_company_id, store.s_street_number, store.s_street_name, store.s_street_type, store.s_suite_number, store.s_city, store.s_county, store.s_state, store.s_zip
                     ->  Sort  (cost=732731.82..732731.83 rows=1 width=75)
                           Sort Key: store.s_store_name, store.s_company_id, store.s_street_number, store.s_street_name, store.s_street_type, store.s_suite_number, store.s_city, store.s_county, store.s_state, store.s_zip
                           ->  Nested Loop  (cost=2106.79..732731.81 rows=1 width=75)
                                 ->  Nested Loop  (cost=2106.50..732724.13 rows=1 width=75)
                                       ->  Nested Loop  (cost=2106.35..732718.44 rows=1 width=12)
                                             ->  Parallel Hash Join  (cost=2105.78..694255.77 rows=4759 width=16)
                                                   Hash Cond: (store_returns.sr_returned_date_sk = d2.d_date_sk)
                                                   ->  Parallel Seq Scan on store_returns  (cost=0.00..660660.86 rows=11995186 width=16)
                                                   ->  Parallel Hash  (cost=2105.55..2105.55 rows=18 width=4)
                                                         ->  Parallel Seq Scan on date_dim d2  (cost=0.00..2105.55 rows=18 width=4)
                                                               Filter: ((d_year = 2001) AND (d_moy = 8))
                                             ->  Index Scan using store_sales_pkey on store_sales  (cost=0.57..8.07 rows=1 width=20)
                                                   Index Cond: ((ss_item_sk = store_returns.sr_item_sk) AND (ss_ticket_number = store_returns.sr_ticket_number))
                                                   Filter: (store_returns.sr_customer_sk = ss_customer_sk)
                                       ->  Index Scan using store_pkey on store  (cost=0.15..5.67 rows=1 width=71)
                                             Index Cond: (s_store_sk = store_sales.ss_store_sk)
                                 ->  Index Only Scan using date_dim_pkey on date_dim d1  (cost=0.29..7.68 rows=1 width=4)
                                       Index Cond: (d_date_sk = store_sales.ss_sold_date_sk)
 JIT:
   Functions: 33
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(28 rows)

