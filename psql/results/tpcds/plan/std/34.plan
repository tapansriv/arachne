                                                                                                                                                              QUERY PLAN                                                                                                                                                               
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7716155.73..7716157.46 rows=691 width=31)
   Sort Key: customer.c_last_name NULLS FIRST, customer.c_first_name NULLS FIRST, customer.c_salutation NULLS FIRST, customer.c_preferred_cust_flag DESC, store_sales.ss_ticket_number NULLS FIRST
   ->  Nested Loop  (cost=7709656.54..7716123.14 rows=691 width=31)
         ->  Finalize GroupAggregate  (cost=7709656.11..7710464.73 rows=691 width=16)
               Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk
               Filter: ((count(*) >= 15) AND (count(*) <= 20))
               ->  Gather Merge  (cost=7709656.11..7710306.56 rows=5186 width=16)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=7708656.09..7708707.95 rows=2593 width=16)
                           Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk
                           ->  Sort  (cost=7708656.09..7708662.57 rows=2593 width=8)
                                 Sort Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk
                                 ->  Hash Join  (cost=2795.00..7708509.06 rows=2593 width=8)
                                       Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                       ->  Hash Join  (cost=2773.41..7708423.11 rows=24272 width=12)
                                             Hash Cond: (store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk)
                                             ->  Parallel Hash Join  (cost=2483.30..7707148.65 rows=374778 width=16)
                                                   Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                   ->  Parallel Seq Scan on store_sales  (cost=0.00..7389799.50 rows=119942250 width=20)
                                                   ->  Parallel Hash  (cost=2481.54..2481.54 rows=141 width=4)
                                                         ->  Parallel Seq Scan on date_dim  (cost=0.00..2481.54 rows=141 width=4)
                                                               Filter: ((d_year = ANY ('{1999,2000,2001}'::integer[])) AND (((d_dom >= 1) AND (d_dom <= 3)) OR ((d_dom >= 25) AND (d_dom <= 28))))
                                             ->  Hash  (cost=284.00..284.00 rows=489 width=4)
                                                   ->  Seq Scan on household_demographics  (cost=0.00..284.00 rows=489 width=4)
                                                         Filter: ((hd_vehicle_count > 0) AND (((hd_buy_potential)::text = '>10000'::text) OR ((hd_buy_potential)::text = 'Unknown'::text)) AND (CASE WHEN (hd_vehicle_count > 0) THEN (((hd_dep_count)::numeric * 1.000) / (hd_vehicle_count)::numeric) ELSE NULL::numeric END > 1.2))
                                       ->  Hash  (cost=21.02..21.02 rows=45 width=4)
                                             ->  Seq Scan on store  (cost=0.00..21.02 rows=45 width=4)
                                                   Filter: ((s_county)::text = 'Williamson County'::text)
         ->  Index Scan using customer_pkey on customer  (cost=0.43..8.18 rows=1 width=23)
               Index Cond: (c_customer_sk = store_sales.ss_customer_sk)
 JIT:
   Functions: 42
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

