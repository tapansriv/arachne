                                                                     QUERY PLAN                                                                      
-----------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=7729680.35..7729680.60 rows=100 width=45)
   ->  Sort  (cost=7729680.35..7729684.84 rows=1793 width=45)
         Sort Key: (sum(store_sales.ss_ext_sales_price)) DESC, item.i_brand, item.i_brand_id, item.i_manufact_id, item.i_manufact
         ->  Finalize GroupAggregate  (cost=7729384.10..7729611.83 rows=1793 width=45)
               Group Key: item.i_brand, item.i_brand_id, item.i_manufact_id, item.i_manufact
               ->  Gather Merge  (cost=7729384.10..7729575.22 rows=1494 width=45)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=7728384.08..7728402.75 rows=747 width=45)
                           Group Key: item.i_brand, item.i_brand_id, item.i_manufact_id, item.i_manufact
                           ->  Sort  (cost=7728384.08..7728385.95 rows=747 width=45)
                                 Sort Key: item.i_brand, item.i_brand_id, item.i_manufact_id, item.i_manufact
                                 ->  Nested Loop  (cost=11593.42..7728348.43 rows=747 width=45)
                                       Join Filter: ("substring"((customer_address.ca_zip)::text, 1, 5) <> "substring"((store.s_zip)::text, 1, 5))
                                       ->  Nested Loop  (cost=11593.00..7722498.17 rows=751 width=55)
                                             ->  Hash Join  (cost=11592.57..7716379.48 rows=787 width=55)
                                                   Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                                   ->  Parallel Hash Join  (cost=11567.53..7716352.25 rows=825 width=53)
                                                         Hash Cond: (store_sales.ss_item_sk = item.i_item_sk)
                                                         ->  Parallel Hash Join  (cost=2105.76..7706771.11 rows=45475 width=20)
                                                               Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                               ->  Parallel Seq Scan on store_sales  (cost=0.00..7389799.50 rows=119942250 width=24)
                                                               ->  Parallel Hash  (cost=2105.55..2105.55 rows=17 width=4)
                                                                     ->  Parallel Seq Scan on date_dim  (cost=0.00..2105.55 rows=17 width=4)
                                                                           Filter: ((d_moy = 11) AND (d_year = 1998))
                                                         ->  Parallel Hash  (cost=9442.50..9442.50 rows=1541 width=41)
                                                               ->  Parallel Seq Scan on item  (cost=0.00..9442.50 rows=1541 width=41)
                                                                     Filter: (i_manager_id = 8)
                                                   ->  Hash  (cost=20.02..20.02 rows=402 width=10)
                                                         ->  Seq Scan on store  (cost=0.00..20.02 rows=402 width=10)
                                             ->  Index Scan using customer_pkey on customer  (cost=0.43..7.77 rows=1 width=8)
                                                   Index Cond: (c_customer_sk = store_sales.ss_customer_sk)
                                       ->  Index Scan using customer_address_pkey on customer_address  (cost=0.42..7.77 rows=1 width=10)
                                             Index Cond: (ca_address_sk = customer.c_current_addr_sk)
 JIT:
   Functions: 48
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(36 rows)

