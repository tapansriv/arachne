                                                                                                          QUERY PLAN                                                                                                          
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=4792531.75..4792532.44 rows=275 width=152)
   Sort Key: inv1.w_warehouse_sk NULLS FIRST, inv1.i_item_sk NULLS FIRST, inv1.mean NULLS FIRST, inv1.cov NULLS FIRST, inv2.mean NULLS FIRST, inv2.cov NULLS FIRST
   CTE inv
     ->  Subquery Scan on foo  (cost=4430555.39..4762253.83 rows=662817 width=166)
           ->  Finalize GroupAggregate  (cost=4430555.39..4752311.58 rows=662817 width=134)
                 Group Key: warehouse.w_warehouse_sk, item.i_item_sk, date_dim.d_moy
                 Filter: (CASE avg(inventory.inv_quantity_on_hand) WHEN '0'::numeric THEN '0'::numeric ELSE ((stddev_samp(inventory.inv_quantity_on_hand) * 1.000) / avg(inventory.inv_quantity_on_hand)) END > '1'::numeric)
                 ->  Gather Merge  (cost=4430555.39..4644603.74 rows=1657044 width=134)
                       Workers Planned: 2
                       ->  Partial GroupAggregate  (cost=4429555.37..4452339.73 rows=828522 width=134)
                             Group Key: warehouse.w_warehouse_sk, item.i_item_sk, date_dim.d_moy
                             ->  Sort  (cost=4429555.37..4431626.68 rows=828522 width=74)
                                   Sort Key: warehouse.w_warehouse_sk, item.i_item_sk, date_dim.d_moy
                                   ->  Hash Join  (cost=12305.77..4274477.91 rows=828522 width=74)
                                         Hash Cond: (inventory.inv_warehouse_sk = warehouse.w_warehouse_sk)
                                         ->  Parallel Hash Join  (cost=12293.30..4272206.77 rows=828522 width=16)
                                               Hash Cond: (inventory.inv_item_sk = item.i_item_sk)
                                               ->  Parallel Hash Join  (cost=2000.80..4259739.36 rows=828522 width=16)
                                                     Hash Cond: (inventory.inv_date_sk = date_dim.d_date_sk)
                                                     ->  Parallel Seq Scan on inventory  (cost=0.00..3821251.68 rows=166271068 width=16)
                                                     ->  Parallel Hash  (cost=1998.12..1998.12 rows=214 width=8)
                                                           ->  Parallel Seq Scan on date_dim  (cost=0.00..1998.12 rows=214 width=8)
                                                                 Filter: (d_year = 2001)
                                               ->  Parallel Hash  (cost=9230.00..9230.00 rows=85000 width=4)
                                                     ->  Parallel Seq Scan on item  (cost=0.00..9230.00 rows=85000 width=4)
                                         ->  Hash  (cost=11.10..11.10 rows=110 width=62)
                                               ->  Seq Scan on warehouse  (cost=0.00..11.10 rows=110 width=62)
   ->  Merge Join  (cost=30214.32..30266.78 rows=275 width=152)
         Merge Cond: ((inv1.i_item_sk = inv2.i_item_sk) AND (inv1.w_warehouse_sk = inv2.w_warehouse_sk))
         ->  Sort  (cost=15107.16..15115.44 rows=3314 width=76)
               Sort Key: inv1.i_item_sk, inv1.w_warehouse_sk
               ->  CTE Scan on inv inv1  (cost=0.00..14913.38 rows=3314 width=76)
                     Filter: (d_moy = 1)
         ->  Sort  (cost=15107.16..15115.44 rows=3314 width=76)
               Sort Key: inv2.i_item_sk, inv2.w_warehouse_sk
               ->  CTE Scan on inv inv2  (cost=0.00..14913.38 rows=3314 width=76)
                     Filter: (d_moy = 2)
 JIT:
   Functions: 58
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(40 rows)

