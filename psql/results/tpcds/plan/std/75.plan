                                                                                                                                                QUERY PLAN                                                                                                                                                 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=35555822.85..35555822.85 rows=1 width=56)
   CTE all_sales
     ->  GroupAggregate  (cost=32958716.73..35331490.81 rows=4892318 width=36)
           Group Key: date_dim.d_year, item.i_brand_id, item.i_class_id, item.i_category_id, item.i_manufact_id
           ->  Unique  (cost=32958716.73..33937180.27 rows=48923177 width=32)
                 ->  Sort  (cost=32958716.73..33081024.67 rows=48923177 width=32)
                       Sort Key: date_dim.d_year, item.i_brand_id, item.i_class_id, item.i_category_id, item.i_manufact_id, ((store_sales.ss_quantity - COALESCE(store_returns.sr_return_quantity, 0))), ((store_sales.ss_ext_sales_price - COALESCE(store_returns.sr_return_amt, '0'::double precision)))
                       ->  Gather  (cost=514349.87..23198666.95 rows=48923177 width=32)
                             Workers Planned: 2
                             ->  Parallel Append  (cost=513349.87..18305349.25 rows=48923177 width=32)
                                   ->  Parallel Hash Left Join  (cost=922850.05..9025126.49 rows=11435793 width=32)
                                         Hash Cond: ((store_sales.ss_ticket_number = store_returns.sr_ticket_number) AND (store_sales.ss_item_sk = store_returns.sr_item_sk))
                                         ->  Parallel Hash Join  (cost=11976.40..7748064.96 rows=11435793 width=40)
                                               Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                               ->  Parallel Hash Join  (cost=9548.58..7714203.02 rows=11974235 width=40)
                                                     Hash Cond: (store_sales.ss_item_sk = item.i_item_sk)
                                                     ->  Parallel Seq Scan on store_sales  (cost=0.00..7389799.50 rows=119942250 width=24)
                                                     ->  Parallel Hash  (cost=9442.50..9442.50 rows=8486 width=20)
                                                           ->  Parallel Seq Scan on item  (cost=0.00..9442.50 rows=8486 width=20)
                                                                 Filter: ((i_category)::text = 'Books'::text)
                                               ->  Parallel Hash  (cost=1890.70..1890.70 rows=42970 width=8)
                                                     ->  Parallel Seq Scan on date_dim  (cost=0.00..1890.70 rows=42970 width=8)
                                         ->  Parallel Hash  (cost=660660.86..660660.86 rows=11995186 width=20)
                                               ->  Parallel Seq Scan on store_returns  (cost=0.00..660660.86 rows=11995186 width=20)
                                   ->  Parallel Hash Left Join  (cost=513349.87..5695105.86 rows=5955490 width=32)
                                         Hash Cond: ((catalog_sales.cs_order_number = catalog_returns.cr_order_number) AND (catalog_sales.cs_item_sk = catalog_returns.cr_item_sk))
                                         ->  Parallel Hash Join  (cost=11976.40..5004486.61 rows=5955490 width=40)
                                               Hash Cond: (catalog_sales.cs_sold_date_sk = date_dim_1.d_date_sk)
                                               ->  Parallel Hash Join  (cost=9548.58..4986335.10 rows=5989630 width=40)
                                                     Hash Cond: (catalog_sales.cs_item_sk = item_1.i_item_sk)
                                                     ->  Parallel Seq Scan on catalog_sales  (cost=0.00..4819292.97 rows=59996297 width=24)
                                                     ->  Parallel Hash  (cost=9442.50..9442.50 rows=8486 width=20)
                                                           ->  Parallel Seq Scan on item item_1  (cost=0.00..9442.50 rows=8486 width=20)
                                                                 Filter: ((i_category)::text = 'Books'::text)
                                               ->  Parallel Hash  (cost=1890.70..1890.70 rows=42970 width=8)
                                                     ->  Parallel Seq Scan on date_dim date_dim_1  (cost=0.00..1890.70 rows=42970 width=8)
                                         ->  Parallel Hash  (cost=376254.79..376254.79 rows=5998179 width=20)
                                               ->  Parallel Seq Scan on catalog_returns  (cost=0.00..376254.79 rows=5998179 width=20)
                                   ->  Parallel Hash Left Join  (cost=252401.00..2851269.25 rows=2993374 width=32)
                                         Hash Cond: ((web_sales.ws_order_number = web_returns.wr_order_number) AND (web_sales.ws_item_sk = web_returns.wr_item_sk))
                                         ->  Parallel Hash Join  (cost=11976.40..2515817.57 rows=2993374 width=40)
                                               Hash Cond: (web_sales.ws_sold_date_sk = date_dim_2.d_date_sk)
                                               ->  Parallel Hash Join  (cost=9548.58..2505529.59 rows=2994172 width=40)
                                                     Hash Cond: (web_sales.ws_item_sk = item_2.i_item_sk)
                                                     ->  Parallel Seq Scan on web_sales  (cost=0.00..2417251.13 rows=29991713 width=24)
                                                     ->  Parallel Hash  (cost=9442.50..9442.50 rows=8486 width=20)
                                                           ->  Parallel Seq Scan on item item_2  (cost=0.00..9442.50 rows=8486 width=20)
                                                                 Filter: ((i_category)::text = 'Books'::text)
                                               ->  Parallel Hash  (cost=1890.70..1890.70 rows=42970 width=8)
                                                     ->  Parallel Seq Scan on date_dim date_dim_2  (cost=0.00..1890.70 rows=42970 width=8)
                                         ->  Parallel Hash  (cost=177866.24..177866.24 rows=2999024 width=20)
                                               ->  Parallel Seq Scan on web_returns  (cost=0.00..177866.24 rows=2999024 width=20)
   ->  Sort  (cost=224332.03..224332.04 rows=1 width=56)
         Sort Key: ((curr_yr.sales_cnt - prev_yr.sales_cnt)), ((curr_yr.sales_amt - prev_yr.sales_amt))
         ->  Merge Join  (cost=223720.44..224332.02 rows=1 width=56)
               Merge Cond: ((curr_yr.i_brand_id = prev_yr.i_brand_id) AND (curr_yr.i_class_id = prev_yr.i_class_id) AND (curr_yr.i_category_id = prev_yr.i_category_id) AND (curr_yr.i_manufact_id = prev_yr.i_manufact_id))
               Join Filter: (((curr_yr.sales_cnt)::numeric(17,2) / (prev_yr.sales_cnt)::numeric(17,2)) < 0.9)
               ->  Sort  (cost=111860.22..111921.38 rows=24462 width=36)
                     Sort Key: curr_yr.i_brand_id, curr_yr.i_class_id, curr_yr.i_category_id, curr_yr.i_manufact_id
                     ->  CTE Scan on all_sales curr_yr  (cost=0.00..110077.15 rows=24462 width=36)
                           Filter: (d_year = 2002)
               ->  Sort  (cost=111860.22..111921.38 rows=24462 width=36)
                     Sort Key: prev_yr.i_brand_id, prev_yr.i_class_id, prev_yr.i_category_id, prev_yr.i_manufact_id
                     ->  CTE Scan on all_sales prev_yr  (cost=0.00..110077.15 rows=24462 width=36)
                           Filter: (d_year = 2001)
 JIT:
   Functions: 128
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(68 rows)

