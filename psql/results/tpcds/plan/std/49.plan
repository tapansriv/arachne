                                                                                                  QUERY PLAN                                                                                                   
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2576347.97..2576347.97 rows=3 width=84)
   ->  Sort  (cost=2576347.97..2576347.97 rows=3 width=84)
         Sort Key: ('web'::text) NULLS FIRST, web.return_rank NULLS FIRST, web.currency_rank NULLS FIRST, web.item NULLS FIRST
         ->  HashAggregate  (cost=2576347.88..2576347.91 rows=3 width=84)
               Group Key: ('web'::text), web.item, web.return_ratio, web.return_rank, web.currency_rank
               ->  Append  (cost=410707.40..2576347.84 rows=3 width=84)
                     ->  Subquery Scan on web  (cost=410707.40..410707.43 rows=1 width=84)
                           Filter: ((web.return_rank <= 10) OR (web.currency_rank <= 10))
                           ->  WindowAgg  (cost=410707.40..410707.42 rows=1 width=84)
                                 ->  Sort  (cost=410707.40..410707.40 rows=1 width=76)
                                       Sort Key: in_web.return_ratio
                                       ->  WindowAgg  (cost=410707.37..410707.39 rows=1 width=76)
                                             ->  Sort  (cost=410707.37..410707.37 rows=1 width=68)
                                                   Sort Key: in_web.currency_ratio
                                                   ->  Subquery Scan on in_web  (cost=410707.29..410707.36 rows=1 width=68)
                                                         ->  GroupAggregate  (cost=410707.29..410707.35 rows=1 width=68)
                                                               Group Key: ws.ws_item_sk
                                                               ->  Sort  (cost=410707.29..410707.30 rows=1 width=28)
                                                                     Sort Key: ws.ws_item_sk
                                                                     ->  Gather  (cost=1000.86..410707.28 rows=1 width=28)
                                                                           Workers Planned: 2
                                                                           ->  Nested Loop  (cost=0.86..409707.18 rows=1 width=28)
                                                                                 ->  Nested Loop  (cost=0.57..409680.96 rows=4 width=32)
                                                                                       ->  Parallel Seq Scan on web_returns wr  (cost=0.00..185363.80 rows=27678 width=20)
                                                                                             Filter: (wr_return_amt > '10000'::double precision)
                                                                                       ->  Index Scan using web_sales_pkey on web_sales ws  (cost=0.57..8.10 rows=1 width=24)
                                                                                             Index Cond: ((ws_item_sk = wr.wr_item_sk) AND (ws_order_number = wr.wr_order_number))
                                                                                             Filter: ((ws_net_profit > '1'::double precision) AND (ws_net_paid > '0'::double precision) AND (ws_quantity > 0))
                                                                                 ->  Index Scan using date_dim_pkey on date_dim  (cost=0.29..6.46 rows=1 width=4)
                                                                                       Index Cond: (d_date_sk = ws.ws_sold_date_sk)
                                                                                       Filter: ((d_year = 2001) AND (d_moy = 12))
                     ->  Subquery Scan on catalog  (cost=853529.72..853529.76 rows=1 width=84)
                           Filter: ((catalog.return_rank <= 10) OR (catalog.currency_rank <= 10))
                           ->  WindowAgg  (cost=853529.72..853529.74 rows=1 width=84)
                                 ->  Sort  (cost=853529.72..853529.73 rows=1 width=76)
                                       Sort Key: in_cat.return_ratio
                                       ->  WindowAgg  (cost=853529.69..853529.71 rows=1 width=76)
                                             ->  Sort  (cost=853529.69..853529.70 rows=1 width=68)
                                                   Sort Key: in_cat.currency_ratio
                                                   ->  Subquery Scan on in_cat  (cost=853529.62..853529.68 rows=1 width=68)
                                                         ->  GroupAggregate  (cost=853529.62..853529.67 rows=1 width=68)
                                                               Group Key: cs.cs_item_sk
                                                               ->  Sort  (cost=853529.62..853529.63 rows=1 width=28)
                                                                     Sort Key: cs.cs_item_sk
                                                                     ->  Gather  (cost=1000.86..853529.61 rows=1 width=28)
                                                                           Workers Planned: 2
                                                                           ->  Nested Loop  (cost=0.86..852529.51 rows=1 width=28)
                                                                                 ->  Nested Loop  (cost=0.57..852425.79 rows=14 width=32)
                                                                                       ->  Parallel Seq Scan on catalog_returns cr  (cost=0.00..391250.23 rows=56034 width=20)
                                                                                             Filter: (cr_return_amount > '10000'::double precision)
                                                                                       ->  Index Scan using catalog_sales_pkey on catalog_sales cs  (cost=0.57..8.23 rows=1 width=24)
                                                                                             Index Cond: ((cs_item_sk = cr.cr_item_sk) AND (cs_order_number = cr.cr_order_number))
                                                                                             Filter: ((cs_net_profit > '1'::double precision) AND (cs_net_paid > '0'::double precision) AND (cs_quantity > 0))
                                                                                 ->  Index Scan using date_dim_pkey on date_dim date_dim_1  (cost=0.29..7.38 rows=1 width=4)
                                                                                       Index Cond: (d_date_sk = cs.cs_sold_date_sk)
                                                                                       Filter: ((d_year = 2001) AND (d_moy = 12))
                     ->  Subquery Scan on store  (cost=1312110.57..1312110.61 rows=1 width=84)
                           Filter: ((store.return_rank <= 10) OR (store.currency_rank <= 10))
                           ->  WindowAgg  (cost=1312110.57..1312110.59 rows=1 width=84)
                                 ->  Sort  (cost=1312110.57..1312110.58 rows=1 width=76)
                                       Sort Key: in_store.return_ratio
                                       ->  WindowAgg  (cost=1312110.54..1312110.56 rows=1 width=76)
                                             ->  Sort  (cost=1312110.54..1312110.55 rows=1 width=68)
                                                   Sort Key: in_store.currency_ratio
                                                   ->  Subquery Scan on in_store  (cost=1312110.47..1312110.53 rows=1 width=68)
                                                         ->  GroupAggregate  (cost=1312110.47..1312110.52 rows=1 width=68)
                                                               Group Key: sts.ss_item_sk
                                                               ->  Sort  (cost=1312110.47..1312110.48 rows=1 width=28)
                                                                     Sort Key: sts.ss_item_sk
                                                                     ->  Gather  (cost=1000.87..1312110.46 rows=1 width=28)
                                                                           Workers Planned: 2
                                                                           ->  Nested Loop  (cost=0.86..1311110.36 rows=1 width=28)
                                                                                 ->  Nested Loop  (cost=0.57..1310948.49 rows=21 width=32)
                                                                                       ->  Parallel Seq Scan on store_returns sr  (cost=0.00..690648.82 rows=74349 width=20)
                                                                                             Filter: (sr_return_amt > '10000'::double precision)
                                                                                       ->  Index Scan using store_sales_pkey on store_sales sts  (cost=0.57..8.34 rows=1 width=24)
                                                                                             Index Cond: ((ss_item_sk = sr.sr_item_sk) AND (ss_ticket_number = sr.sr_ticket_number))
                                                                                             Filter: ((ss_net_profit > '1'::double precision) AND (ss_net_paid > '0'::double precision) AND (ss_quantity > 0))
                                                                                 ->  Index Scan using date_dim_pkey on date_dim date_dim_2  (cost=0.29..7.69 rows=1 width=4)
                                                                                       Index Cond: (d_date_sk = sts.ss_sold_date_sk)
                                                                                       Filter: ((d_year = 2001) AND (d_moy = 12))
 JIT:
   Functions: 87
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(84 rows)

