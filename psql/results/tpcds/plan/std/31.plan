                                                                                                                                                                                       QUERY PLAN                                                                                                                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=43071739.76..43219428.36 rows=1 width=114)
   Join Filter: (((ss1.ca_county)::text = (ws3.ca_county)::text) AND (CASE WHEN (ws2.web_sales > '0'::double precision) THEN ((ws3.web_sales * '1'::double precision) / ws2.web_sales) ELSE NULL::double precision END > CASE WHEN (ss2.store_sales > '0'::double precision) THEN ((ss3.store_sales * '1'::double precision) / ss2.store_sales) ELSE NULL::double precision END))
   CTE ss
     ->  Finalize GroupAggregate  (cost=31676395.80..33444052.03 rows=1476800 width=30)
           Group Key: customer_address.ca_county, date_dim.d_qoy, date_dim.d_year
           ->  Gather Merge  (cost=31676395.80..33399748.03 rows=2953600 width=30)
                 Workers Planned: 2
                 ->  Partial GroupAggregate  (cost=31675395.78..33057829.28 rows=1476800 width=30)
                       Group Key: customer_address.ca_county, date_dim.d_qoy, date_dim.d_year
                       ->  Sort  (cost=31675395.78..31948928.88 rows=109413240 width=30)
                             Sort Key: customer_address.ca_county, date_dim.d_qoy, date_dim.d_year
                             ->  Parallel Hash Join  (cost=33322.83..9212475.38 rows=109413240 width=30)
                                   Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                   ->  Parallel Hash Join  (cost=30895.00..8909298.19 rows=114564839 width=26)
                                         Hash Cond: (store_sales.ss_addr_sk = customer_address.ca_address_sk)
                                         ->  Parallel Seq Scan on store_sales  (cost=0.00..7389799.50 rows=119942250 width=16)
                                         ->  Parallel Hash  (cost=23244.67..23244.67 rows=416667 width=18)
                                               ->  Parallel Seq Scan on customer_address  (cost=0.00..23244.67 rows=416667 width=18)
                                   ->  Parallel Hash  (cost=1890.70..1890.70 rows=42970 width=12)
                                         ->  Parallel Seq Scan on date_dim  (cost=0.00..1890.70 rows=42970 width=12)
   CTE ws
     ->  Finalize GroupAggregate  (cost=8779121.10..9553845.80 rows=1476800 width=30)
           Group Key: customer_address_1.ca_county, date_dim_1.d_qoy, date_dim_1.d_year
           ->  Gather Merge  (cost=8779121.10..9509541.80 rows=2953600 width=30)
                 Workers Planned: 2
                 ->  Partial GroupAggregate  (cost=8778121.08..9167623.05 rows=1476800 width=30)
                       Group Key: customer_address_1.ca_county, date_dim_1.d_qoy, date_dim_1.d_year
                       ->  Sort  (cost=8778121.08..8853067.87 rows=29978718 width=30)
                             Sort Key: customer_address_1.ca_county, date_dim_1.d_qoy, date_dim_1.d_year
                             ->  Parallel Hash Join  (cost=33322.83..2903352.22 rows=29978718 width=30)
                                   Hash Cond: (web_sales.ws_sold_date_sk = date_dim_1.d_date_sk)
                                   ->  Parallel Hash Join  (cost=30895.00..2822204.71 rows=29986714 width=26)
                                         Hash Cond: (web_sales.ws_bill_addr_sk = customer_address_1.ca_address_sk)
                                         ->  Parallel Seq Scan on web_sales  (cost=0.00..2417251.13 rows=29991713 width=16)
                                         ->  Parallel Hash  (cost=23244.67..23244.67 rows=416667 width=18)
                                               ->  Parallel Seq Scan on customer_address customer_address_1  (cost=0.00..23244.67 rows=416667 width=18)
                                   ->  Parallel Hash  (cost=1890.70..1890.70 rows=42970 width=12)
                                         ->  Parallel Seq Scan on date_dim date_dim_1  (cost=0.00..1890.70 rows=42970 width=12)
   ->  Nested Loop  (cost=73841.93..184609.40 rows=1 width=434)
         Join Filter: (((ss1.ca_county)::text = (ws2.ca_county)::text) AND (CASE WHEN (ws1.web_sales > '0'::double precision) THEN ((ws2.web_sales * '1'::double precision) / ws1.web_sales) ELSE NULL::double precision END > CASE WHEN (ss1.store_sales > '0'::double precision) THEN ((ss2.store_sales * '1'::double precision) / ss1.store_sales) ELSE NULL::double precision END))
         ->  Nested Loop  (cost=73841.93..147688.29 rows=1 width=348)
               Join Filter: ((ss1.ca_county)::text = (ws1.ca_county)::text)
               ->  Nested Loop  (cost=73841.93..110767.82 rows=1 width=262)
                     Join Filter: ((ss1.ca_county)::text = (ss3.ca_county)::text)
                     ->  Merge Join  (cost=73841.93..73842.37 rows=7 width=176)
                           Merge Cond: ((ss1.ca_county)::text = (ss2.ca_county)::text)
                           ->  Sort  (cost=36920.96..36921.06 rows=37 width=90)
                                 Sort Key: ss1.ca_county
                                 ->  CTE Scan on ss ss1  (cost=0.00..36920.00 rows=37 width=90)
                                       Filter: ((d_qoy = 1) AND (d_year = 2000))
                           ->  Sort  (cost=36920.96..36921.06 rows=37 width=86)
                                 Sort Key: ss2.ca_county
                                 ->  CTE Scan on ss ss2  (cost=0.00..36920.00 rows=37 width=86)
                                       Filter: ((d_year = 2000) AND (d_qoy = 2))
                     ->  CTE Scan on ss ss3  (cost=0.00..36920.00 rows=37 width=86)
                           Filter: ((d_year = 2000) AND (d_qoy = 3))
               ->  CTE Scan on ws ws1  (cost=0.00..36920.00 rows=37 width=86)
                     Filter: ((d_qoy = 1) AND (d_year = 2000))
         ->  CTE Scan on ws ws2  (cost=0.00..36920.00 rows=37 width=86)
               Filter: ((d_year = 2000) AND (d_qoy = 2))
   ->  CTE Scan on ws ws3  (cost=0.00..36920.00 rows=37 width=86)
         Filter: ((d_year = 2000) AND (d_qoy = 3))
 JIT:
   Functions: 91
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(65 rows)

