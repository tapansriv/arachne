                                                                                                                          QUERY PLAN                                                                                                                          
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=396550.78..396550.79 rows=5 width=286)
   Sort Key: (sum(catalog_returns.cr_net_loss)) DESC
   ->  Finalize GroupAggregate  (cost=396550.09..396550.72 rows=5 width=286)
         Group Key: call_center.cc_call_center_id, call_center.cc_name, call_center.cc_manager, customer_demographics.cd_marital_status, customer_demographics.cd_education_status
         ->  Gather Merge  (cost=396550.09..396550.61 rows=4 width=286)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=395550.07..395550.12 rows=2 width=286)
                     Group Key: call_center.cc_call_center_id, call_center.cc_name, call_center.cc_manager, customer_demographics.cd_marital_status, customer_demographics.cd_education_status
                     ->  Sort  (cost=395550.07..395550.07 rows=2 width=286)
                           Sort Key: call_center.cc_call_center_id, call_center.cc_name, call_center.cc_manager, customer_demographics.cd_marital_status, customer_demographics.cd_education_status
                           ->  Nested Loop  (cost=2272.94..395550.06 rows=2 width=286)
                                 ->  Nested Loop  (cost=2272.52..395540.29 rows=20 width=290)
                                       ->  Hash Join  (cost=2272.09..395354.08 rows=369 width=282)
                                             Hash Cond: (customer.c_current_hdemo_sk = household_demographics.hd_demo_sk)
                                             ->  Nested Loop  (cost=2117.09..395193.06 rows=2293 width=286)
                                                   ->  Hash Join  (cost=2116.66..394124.48 rows=2337 width=278)
                                                         Hash Cond: (catalog_returns.cr_call_center_sk = call_center.cc_call_center_sk)
                                                         ->  Parallel Hash Join  (cost=2105.76..394106.68 rows=2381 width=16)
                                                               Hash Cond: (catalog_returns.cr_returned_date_sk = date_dim.d_date_sk)
                                                               ->  Parallel Seq Scan on catalog_returns  (cost=0.00..376254.79 rows=5998179 width=20)
                                                               ->  Parallel Hash  (cost=2105.55..2105.55 rows=17 width=4)
                                                                     ->  Parallel Seq Scan on date_dim  (cost=0.00..2105.55 rows=17 width=4)
                                                                           Filter: ((d_year = 1998) AND (d_moy = 11))
                                                         ->  Hash  (cost=10.40..10.40 rows=40 width=270)
                                                               ->  Seq Scan on call_center  (cost=0.00..10.40 rows=40 width=270)
                                                   ->  Index Scan using customer_pkey on customer  (cost=0.43..0.46 rows=1 width=16)
                                                         Index Cond: (c_customer_sk = catalog_returns.cr_returning_customer_sk)
                                             ->  Hash  (cost=140.00..140.00 rows=1200 width=4)
                                                   ->  Seq Scan on household_demographics  (cost=0.00..140.00 rows=1200 width=4)
                                                         Filter: ((hd_buy_potential)::text ~~ 'Unknown%'::text)
                                       ->  Index Scan using customer_demographics_pkey on customer_demographics  (cost=0.43..0.50 rows=1 width=16)
                                             Index Cond: (cd_demo_sk = customer.c_current_cdemo_sk)
                                             Filter: ((((cd_marital_status)::text = 'M'::text) AND ((cd_education_status)::text = 'Unknown'::text)) OR (((cd_marital_status)::text = 'W'::text) AND ((cd_education_status)::text = 'Advanced Degree'::text)))
                                 ->  Index Scan using customer_address_pkey on customer_address  (cost=0.42..0.49 rows=1 width=4)
                                       Index Cond: (ca_address_sk = customer.c_current_addr_sk)
                                       Filter: (ca_gmt_offset = '-7'::double precision)
 JIT:
   Functions: 52
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(39 rows)

