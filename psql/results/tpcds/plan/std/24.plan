                                                                                                      QUERY PLAN                                                                                                       
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=8090356.63..8090356.66 rows=1 width=262)
   Group Key: ssales.c_last_name, ssales.c_first_name, ssales.s_store_name
   Filter: (sum(ssales.netpaid) > $5)
   CTE ssales
     ->  GroupAggregate  (cost=8090356.52..8090356.56 rows=1 width=59)
           Group Key: customer.c_last_name, customer.c_first_name, store.s_store_name, customer_address.ca_state, store.s_state, item.i_color, item.i_current_price, item.i_manager_id, item.i_units, item.i_size
           ->  Sort  (cost=8090356.52..8090356.52 rows=1 width=59)
                 Sort Key: customer.c_last_name, customer.c_first_name, store.s_store_name, customer_address.ca_state, store.s_state, item.i_color, item.i_current_price, item.i_manager_id, item.i_units, item.i_size
                 ->  Nested Loop  (cost=113780.81..8090356.51 rows=1 width=59)
                       ->  Gather  (cost=113780.39..8090348.69 rows=1 width=39)
                             Workers Planned: 2
                             ->  Nested Loop  (cost=112780.39..8089348.59 rows=1 width=39)
                                   ->  Parallel Hash Join  (cost=112779.95..8063325.79 rows=3315 width=39)
                                         Hash Cond: ((store_sales.ss_customer_sk = customer.c_customer_sk) AND ((store.s_zip)::text = (customer_address.ca_zip)::text))
                                         ->  Hash Join  (cost=21.47..7707837.10 rows=10250587 width=33)
                                               Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                               ->  Parallel Seq Scan on store_sales  (cost=0.00..7389799.50 rows=119942250 width=24)
                                               ->  Hash  (cost=21.02..21.02 rows=36 width=17)
                                                     ->  Seq Scan on store  (cost=0.00..21.02 rows=36 width=17)
                                                           Filter: (s_market_id = 8)
                                         ->  Parallel Hash  (cost=94644.23..94644.23 rows=829550 width=26)
                                               ->  Parallel Hash Join  (cost=31302.00..94644.23 rows=829550 width=26)
                                                     Hash Cond: (customer.c_current_addr_sk = customer_address.ca_address_sk)
                                                     Join Filter: ((customer.c_birth_country)::text <> upper((customer_address.ca_country)::text))
                                                     ->  Parallel Seq Scan on customer  (cost=0.00..46911.63 rows=833363 width=30)
                                                     ->  Parallel Hash  (cost=23244.67..23244.67 rows=416667 width=27)
                                                           ->  Parallel Seq Scan on customer_address  (cost=0.00..23244.67 rows=416667 width=27)
                                   ->  Index Only Scan using store_returns_pkey on store_returns  (cost=0.44..7.85 rows=1 width=8)
                                         Index Cond: ((sr_item_sk = store_sales.ss_item_sk) AND (sr_ticket_number = store_sales.ss_ticket_number))
                       ->  Index Scan using item_pkey on item  (cost=0.42..7.82 rows=1 width=32)
                             Index Cond: (i_item_sk = store_sales.ss_item_sk)
   InitPlan 2 (returns $5)
     ->  Aggregate  (cost=0.02..0.04 rows=1 width=8)
           ->  CTE Scan on ssales ssales_1  (cost=0.00..0.02 rows=1 width=8)
   ->  Sort  (cost=0.03..0.04 rows=1 width=262)
         Sort Key: ssales.c_last_name, ssales.c_first_name, ssales.s_store_name
         ->  CTE Scan on ssales  (cost=0.00..0.02 rows=1 width=262)
               Filter: ((i_color)::text = 'peach'::text)
 JIT:
   Functions: 57
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(41 rows)

