                                                                                                                                                                   QUERY PLAN                                                                                                                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=2394078.90..2394079.15 rows=100 width=12)
   ->  Sort  (cost=2394078.90..2394080.53 rows=650 width=12)
         Sort Key: (sum(CASE WHEN (store_returns.sr_return_quantity IS NOT NULL) THEN (((store_sales.ss_quantity - store_returns.sr_return_quantity))::double precision * store_sales.ss_sales_price) ELSE ((store_sales.ss_quantity)::double precision * store_sales.ss_sales_price) END)) NULLS FIRST, store_sales.ss_customer_sk NULLS FIRST
         ->  Finalize GroupAggregate  (cost=2393974.16..2394054.06 rows=650 width=12)
               Group Key: store_sales.ss_customer_sk
               ->  Gather Merge  (cost=2393974.16..2394044.85 rows=542 width=12)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=2392974.13..2392982.26 rows=271 width=12)
                           Group Key: store_sales.ss_customer_sk
                           ->  Sort  (cost=2392974.13..2392974.81 rows=271 width=20)
                                 Sort Key: store_sales.ss_customer_sk NULLS FIRST
                                 ->  Nested Loop  (cost=2.27..2392963.18 rows=271 width=20)
                                       ->  Hash Join  (cost=1.70..694491.54 rows=210483 width=12)
                                             Hash Cond: (store_returns.sr_reason_sk = reason.r_reason_sk)
                                             ->  Parallel Seq Scan on store_returns  (cost=0.00..660660.86 rows=11995186 width=16)
                                             ->  Hash  (cost=1.69..1.69 rows=1 width=4)
                                                   ->  Seq Scan on reason  (cost=0.00..1.69 rows=1 width=4)
                                                         Filter: ((r_reason_desc)::text = 'reason 28'::text)
                                       ->  Index Scan using store_sales_pkey on store_sales  (cost=0.57..8.07 rows=1 width=24)
                                             Index Cond: ((ss_item_sk = store_returns.sr_item_sk) AND (ss_ticket_number = store_returns.sr_ticket_number))
 JIT:
   Functions: 25
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(23 rows)

