                                                                                                                                                                                          QUERY PLAN                                                                                                                                                                                          
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=156960507.10..156960507.35 rows=100 width=194)
   CTE year_total
     ->  Append  (cost=53914378.33..118797062.82 rows=334245055 width=157)
           ->  Finalize GroupAggregate  (cost=53914378.33..90783674.74 rows=262298531 width=157)
                 Group Key: customer.c_customer_id, customer.c_first_name, customer.c_last_name, customer.c_preferred_cust_flag, customer.c_birth_country, customer.c_login, customer.c_email_address, date_dim.d_year
                 ->  Gather Merge  (cost=53914378.33..83242591.96 rows=218582110 width=125)
                       Workers Planned: 2
                       ->  Partial GroupAggregate  (cost=53913378.31..58011792.87 rows=109291055 width=125)
                             Group Key: customer.c_customer_id, customer.c_first_name, customer.c_last_name, customer.c_preferred_cust_flag, customer.c_birth_country, customer.c_login, customer.c_email_address, date_dim.d_year
                             ->  Sort  (cost=53913378.31..54186605.94 rows=109291055 width=133)
                                   Sort Key: customer.c_customer_id, customer.c_first_name, customer.c_last_name, customer.c_preferred_cust_flag, customer.c_birth_country, customer.c_login, customer.c_email_address, date_dim.d_year
                                   ->  Parallel Hash Join  (cost=74405.49..9436781.18 rows=109291055 width=133)
                                         Hash Cond: (store_sales.ss_customer_sk = customer.c_customer_sk)
                                         ->  Parallel Hash Join  (cost=2427.82..7707093.18 rows=114548847 width=24)
                                               Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                               ->  Parallel Seq Scan on store_sales  (cost=0.00..7389799.50 rows=119942250 width=24)
                                               ->  Parallel Hash  (cost=1890.70..1890.70 rows=42970 width=8)
                                                     ->  Parallel Seq Scan on date_dim  (cost=0.00..1890.70 rows=42970 width=8)
                                         ->  Parallel Hash  (cost=46911.63..46911.63 rows=833363 width=117)
                                               ->  Parallel Seq Scan on customer  (cost=0.00..46911.63 rows=833363 width=117)
           ->  Finalize GroupAggregate  (cost=12886740.32..22999712.26 rows=71946524 width=157)
                 Group Key: customer_1.c_customer_id, customer_1.c_first_name, customer_1.c_last_name, customer_1.c_preferred_cust_flag, customer_1.c_birth_country, customer_1.c_login, customer_1.c_email_address, date_dim_1.d_year
                 ->  Gather Merge  (cost=12886740.32..20931249.71 rows=59955436 width=125)
                       Workers Planned: 2
                       ->  Partial GroupAggregate  (cost=12885740.30..14009904.72 rows=29977718 width=125)
                             Group Key: customer_1.c_customer_id, customer_1.c_first_name, customer_1.c_last_name, customer_1.c_preferred_cust_flag, customer_1.c_birth_country, customer_1.c_login, customer_1.c_email_address, date_dim_1.d_year
                             ->  Sort  (cost=12885740.30..12960684.59 rows=29977718 width=133)
                                   Sort Key: customer_1.c_customer_id, customer_1.c_first_name, customer_1.c_last_name, customer_1.c_preferred_cust_flag, customer_1.c_birth_country, customer_1.c_login, customer_1.c_email_address, date_dim_1.d_year
                                   ->  Parallel Hash Join  (cost=74405.49..3015117.85 rows=29977718 width=133)
                                         Hash Cond: (web_sales.ws_bill_customer_sk = customer_1.c_customer_sk)
                                         ->  Parallel Hash Join  (cost=2427.82..2498411.76 rows=29983715 width=24)
                                               Hash Cond: (web_sales.ws_sold_date_sk = date_dim_1.d_date_sk)
                                               ->  Parallel Seq Scan on web_sales  (cost=0.00..2417251.13 rows=29991713 width=24)
                                               ->  Parallel Hash  (cost=1890.70..1890.70 rows=42970 width=8)
                                                     ->  Parallel Seq Scan on date_dim date_dim_1  (cost=0.00..1890.70 rows=42970 width=8)
                                         ->  Parallel Hash  (cost=46911.63..46911.63 rows=833363 width=117)
                                               ->  Parallel Seq Scan on customer customer_1  (cost=0.00..46911.63 rows=833363 width=117)
   ->  Sort  (cost=38163444.28..38219856.72 rows=22564974 width=194)
         Sort Key: t_s_secyear.customer_id NULLS FIRST, t_s_secyear.customer_first_name NULLS FIRST, t_s_secyear.customer_last_name NULLS FIRST, t_s_secyear.customer_preferred_cust_flag NULLS FIRST
         ->  Merge Join  (cost=35097138.14..37301027.20 rows=22564974 width=194)
               Merge Cond: ((t_s_secyear.customer_id)::text = (t_w_secyear.customer_id)::text)
               Join Filter: (CASE WHEN (t_w_firstyear.year_total > '0'::double precision) THEN ((t_w_secyear.year_total * '1'::double precision) / t_w_firstyear.year_total) ELSE '0'::double precision END > CASE WHEN (t_s_firstyear.year_total > '0'::double precision) THEN ((t_s_secyear.year_total * '1'::double precision) / t_s_firstyear.year_total) ELSE '0'::double precision END)
               ->  Merge Join  (cost=17548569.07..17550328.35 rows=116357 width=260)
                     Merge Cond: ((t_s_firstyear.customer_id)::text = (t_s_secyear.customer_id)::text)
                     ->  Sort  (cost=9191898.36..9191905.33 rows=2785 width=58)
                           Sort Key: t_s_firstyear.customer_id
                           ->  CTE Scan on year_total t_s_firstyear  (cost=0.00..9191739.01 rows=2785 width=58)
                                 Filter: ((year_total > '0'::double precision) AND (sale_type = 's'::text) AND (dyear = 2001))
                     ->  Sort  (cost=8356670.71..8356691.60 rows=8356 width=202)
                           Sort Key: t_s_secyear.customer_id
                           ->  CTE Scan on year_total t_s_secyear  (cost=0.00..8356126.38 rows=8356 width=202)
                                 Filter: ((sale_type = 's'::text) AND (dyear = 2002))
               ->  Materialize  (cost=17548569.07..17550619.24 rows=116357 width=116)
                     ->  Merge Join  (cost=17548569.07..17550328.35 rows=116357 width=116)
                           Merge Cond: ((t_w_firstyear.customer_id)::text = (t_w_secyear.customer_id)::text)
                           ->  Sort  (cost=9191898.36..9191905.33 rows=2785 width=58)
                                 Sort Key: t_w_firstyear.customer_id
                                 ->  CTE Scan on year_total t_w_firstyear  (cost=0.00..9191739.01 rows=2785 width=58)
                                       Filter: ((year_total > '0'::double precision) AND (sale_type = 'w'::text) AND (dyear = 2001))
                           ->  Sort  (cost=8356670.71..8356691.60 rows=8356 width=58)
                                 Sort Key: t_w_secyear.customer_id
                                 ->  CTE Scan on year_total t_w_secyear  (cost=0.00..8356126.38 rows=8356 width=58)
                                       Filter: ((sale_type = 'w'::text) AND (dyear = 2002))
 JIT:
   Functions: 91
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(66 rows)

