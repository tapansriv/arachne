                                                                                                                                                                   QUERY PLAN                                                                                                                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=7712718.87..7712719.94 rows=429 width=31)
   Sort Key: (count(*)) DESC, customer.c_last_name
   ->  Nested Loop  (cost=7708643.57..7712700.11 rows=429 width=31)
         ->  Finalize GroupAggregate  (cost=7708643.14..7709144.91 rows=429 width=16)
               Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk
               Filter: ((count(*) >= 1) AND (count(*) <= 5))
               ->  Gather Merge  (cost=7708643.14..7709046.76 rows=3218 width=16)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=7707643.12..7707675.30 rows=1609 width=16)
                           Group Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk
                           ->  Sort  (cost=7707643.12..7707647.14 rows=1609 width=8)
                                 Sort Key: store_sales.ss_ticket_number, store_sales.ss_customer_sk
                                 ->  Hash Join  (cost=2580.53..7707557.42 rows=1609 width=8)
                                       Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                       ->  Hash Join  (cost=2557.33..7707515.10 rows=7211 width=12)
                                             Hash Cond: (store_sales.ss_hdemo_sk = household_demographics.hd_demo_sk)
                                             ->  Parallel Hash Join  (cost=2267.21..7706932.56 rows=111336 width=16)
                                                   Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                   ->  Parallel Seq Scan on store_sales  (cost=0.00..7389799.50 rows=119942250 width=20)
                                                   ->  Parallel Hash  (cost=2266.69..2266.69 rows=42 width=4)
                                                         ->  Parallel Seq Scan on date_dim  (cost=0.00..2266.69 rows=42 width=4)
                                                               Filter: ((d_dom >= 1) AND (d_dom <= 2) AND (d_year = ANY ('{1999,2000,2001}'::integer[])))
                                             ->  Hash  (cost=284.00..284.00 rows=489 width=4)
                                                   ->  Seq Scan on household_demographics  (cost=0.00..284.00 rows=489 width=4)
                                                         Filter: ((hd_vehicle_count > 0) AND (((hd_buy_potential)::text = 'Unknown'::text) OR ((hd_buy_potential)::text = '>10000'::text)) AND (CASE WHEN (hd_vehicle_count > 0) THEN (((hd_dep_count)::numeric * 1.000) / (hd_vehicle_count)::numeric) ELSE NULL::numeric END > '1'::numeric))
                                       ->  Hash  (cost=22.03..22.03 rows=94 width=4)
                                             ->  Seq Scan on store  (cost=0.00..22.03 rows=94 width=4)
                                                   Filter: ((s_county)::text = ANY ('{"Orange County","Bronx County","Franklin Parish","Williamson County"}'::text[]))
         ->  Index Scan using customer_pkey on customer  (cost=0.43..8.28 rows=1 width=23)
               Index Cond: (c_customer_sk = store_sales.ss_customer_sk)
 JIT:
   Functions: 42
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

