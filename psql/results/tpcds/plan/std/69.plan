                                                                                                                 QUERY PLAN                                                                                                                  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=15295665.29..15295688.84 rows=100 width=49)
   ->  Finalize GroupAggregate  (cost=15295665.29..15296984.20 rows=5600 width=49)
         Group Key: customer_demographics.cd_gender, customer_demographics.cd_marital_status, customer_demographics.cd_education_status, customer_demographics.cd_purchase_estimate, customer_demographics.cd_credit_rating
         ->  Gather Merge  (cost=15295665.29..15296758.88 rows=8466 width=33)
               Workers Planned: 2
               ->  Partial GroupAggregate  (cost=15294665.27..15294781.67 rows=4233 width=33)
                     Group Key: customer_demographics.cd_gender, customer_demographics.cd_marital_status, customer_demographics.cd_education_status, customer_demographics.cd_purchase_estimate, customer_demographics.cd_credit_rating
                     ->  Sort  (cost=15294665.27..15294675.85 rows=4233 width=25)
                           Sort Key: customer_demographics.cd_gender, customer_demographics.cd_marital_status, customer_demographics.cd_education_status, customer_demographics.cd_purchase_estimate, customer_demographics.cd_credit_rating
                           ->  Parallel Hash Anti Join  (cost=15263781.55..15294410.28 rows=4233 width=25)
                                 Hash Cond: (c.c_customer_sk = catalog_sales.cs_ship_customer_sk)
                                 ->  Parallel Hash Join  (cost=10283846.63..10314420.95 rows=4494 width=29)
                                       Hash Cond: (customer_demographics.cd_demo_sk = c.c_current_cdemo_sk)
                                       ->  Parallel Seq Scan on customer_demographics  (cost=0.00..27554.33 rows=800333 width=29)
                                       ->  Parallel Hash  (cost=10283788.51..10283788.51 rows=4650 width=8)
                                             ->  Parallel Hash Anti Join  (cost=10233187.87..10283788.51 rows=4650 width=8)
                                                   Hash Cond: (c.c_customer_sk = web_sales.ws_bill_customer_sk)
                                                   ->  Parallel Hash Semi Join  (cost=7734523.38..7785062.86 rows=4868 width=8)
                                                         Hash Cond: (c.c_customer_sk = store_sales.ss_customer_sk)
                                                         ->  Parallel Hash Join  (cost=25302.65..74401.87 rows=79280 width=8)
                                                               Hash Cond: (c.c_current_addr_sk = ca.ca_address_sk)
                                                               ->  Parallel Seq Scan on customer c  (cost=0.00..46911.63 rows=833363 width=12)
                                                               ->  Parallel Hash  (cost=24807.17..24807.17 rows=39639 width=4)
                                                                     ->  Parallel Seq Scan on customer_address ca  (cost=0.00..24807.17 rows=39639 width=4)
                                                                           Filter: ((ca_state)::text = ANY ('{KY,GA,NM}'::text[]))
                                                         ->  Parallel Hash  (cost=7706879.00..7706879.00 rows=142698 width=4)
                                                               ->  Parallel Hash Join  (cost=2213.65..7706879.00 rows=142698 width=4)
                                                                     Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                                     ->  Parallel Seq Scan on store_sales  (cost=0.00..7389799.50 rows=119942250 width=8)
                                                                     ->  Parallel Hash  (cost=2212.97..2212.97 rows=54 width=4)
                                                                           ->  Parallel Seq Scan on date_dim  (cost=0.00..2212.97 rows=54 width=4)
                                                                                 Filter: ((d_moy >= 4) AND (d_moy <= 6) AND (d_year = 2001))
                                                   ->  Parallel Hash  (cost=2498197.59..2498197.59 rows=37352 width=4)
                                                         ->  Parallel Hash Join  (cost=2213.65..2498197.59 rows=37352 width=4)
                                                               Hash Cond: (web_sales.ws_sold_date_sk = date_dim_1.d_date_sk)
                                                               ->  Parallel Seq Scan on web_sales  (cost=0.00..2417251.13 rows=29991713 width=8)
                                                               ->  Parallel Hash  (cost=2212.97..2212.97 rows=54 width=4)
                                                                     ->  Parallel Seq Scan on date_dim date_dim_1  (cost=0.00..2212.97 rows=54 width=4)
                                                                           Filter: ((d_moy >= 4) AND (d_moy <= 6) AND (d_year = 2001))
                                 ->  Parallel Hash  (cost=4979005.99..4979005.99 rows=74314 width=4)
                                       ->  Parallel Hash Join  (cost=2213.65..4979005.99 rows=74314 width=4)
                                             Hash Cond: (catalog_sales.cs_sold_date_sk = date_dim_2.d_date_sk)
                                             ->  Parallel Seq Scan on catalog_sales  (cost=0.00..4819292.97 rows=59996297 width=8)
                                             ->  Parallel Hash  (cost=2212.97..2212.97 rows=54 width=4)
                                                   ->  Parallel Seq Scan on date_dim date_dim_2  (cost=0.00..2212.97 rows=54 width=4)
                                                         Filter: ((d_moy >= 4) AND (d_moy <= 6) AND (d_year = 2001))
 JIT:
   Functions: 80
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(49 rows)

