                                                                                                                                                                                                              QUERY PLAN                                                                                                                                                                                                              
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=6286484.02..6286484.03 rows=1 width=1050)
   Sort Key: cs1.product_name, cs1.store_name, cs2.cnt, cs1.s1, cs2.s1
   CTE cross_sales
     ->  GroupAggregate  (cost=6286483.89..6286483.95 rows=1 width=135)
           Group Key: item.i_item_sk, store.s_store_name, store.s_zip, ad1.ca_street_number, ad1.ca_street_name, ad1.ca_city, ad1.ca_zip, ad2.ca_street_number, ad2.ca_street_name, ad2.ca_city, ad2.ca_zip, d1.d_year, d2.d_year, d3.d_year
           ->  Sort  (cost=6286483.89..6286483.89 rows=1 width=127)
                 Sort Key: item.i_item_sk, store.s_store_name, store.s_zip, ad1.ca_street_number, ad1.ca_street_name, ad1.ca_city, ad1.ca_zip, ad2.ca_street_number, ad2.ca_street_name, ad2.ca_city, ad2.ca_zip, d1.d_year, d2.d_year, d3.d_year
                 ->  Nested Loop  (cost=6286231.36..6286483.88 rows=1 width=127)
                       ->  Nested Loop  (cost=6286231.21..6286478.19 rows=1 width=121)
                             Join Filter: ((cd1.cd_marital_status)::text <> (cd2.cd_marital_status)::text)
                             ->  Nested Loop  (cost=6286230.79..6286470.34 rows=1 width=127)
                                   ->  Nested Loop  (cost=6286230.63..6286464.56 rows=1 width=131)
                                         ->  Nested Loop  (cost=6286230.21..6286456.73 rows=1 width=108)
                                               ->  Nested Loop  (cost=6286229.78..6286448.90 rows=1 width=110)
                                                     ->  Nested Loop  (cost=6286229.49..6286441.21 rows=1 width=110)
                                                           ->  Nested Loop  (cost=6286229.21..6286433.59 rows=1 width=110)
                                                                 ->  Nested Loop  (cost=6286228.91..6286425.91 rows=1 width=110)
                                                                       ->  Nested Loop  (cost=6286228.49..6286418.07 rows=1 width=94)
                                                                             ->  Nested Loop  (cost=6286228.19..6286410.39 rows=1 width=94)
                                                                                   ->  Nested Loop  (cost=6286227.92..6286403.28 rows=1 width=98)
                                                                                         ->  Hash Join  (cost=6286227.49..6286395.45 rows=1 width=75)
                                                                                               Hash Cond: (hd1.hd_demo_sk = store_sales.ss_hdemo_sk)
                                                                                               ->  Hash Join  (cost=51.62..192.57 rows=7200 width=4)
                                                                                                     Hash Cond: (hd1.hd_income_band_sk = ib1.ib_income_band_sk)
                                                                                                     ->  Seq Scan on household_demographics hd1  (cost=0.00..122.00 rows=7200 width=8)
                                                                                                     ->  Hash  (cost=28.50..28.50 rows=1850 width=4)
                                                                                                           ->  Seq Scan on income_band ib1  (cost=0.00..28.50 rows=1850 width=4)
                                                                                               ->  Hash  (cost=6286175.86..6286175.86 rows=1 width=79)
                                                                                                     ->  Nested Loop  (cost=6281378.51..6286175.86 rows=1 width=79)
                                                                                                           Join Filter: (item.i_item_sk = store_sales.ss_item_sk)
                                                                                                           ->  Nested Loop  (cost=6281377.94..6283894.43 rows=282 width=39)
                                                                                                                 Join Filter: (item.i_item_sk = store_returns.sr_item_sk)
                                                                                                                 ->  Merge Join  (cost=6281377.50..6282598.77 rows=2 width=31)
                                                                                                                       Merge Cond: (item.i_item_sk = catalog_sales.cs_item_sk)
                                                                                                                       ->  Sort  (cost=11737.06..11737.42 rows=144 width=27)
                                                                                                                             Sort Key: item.i_item_sk
                                                                                                                             ->  Gather  (cost=1000.00..11731.90 rows=144 width=27)
                                                                                                                                   Workers Planned: 2
                                                                                                                                   ->  Parallel Seq Scan on item  (cost=0.00..10717.50 rows=60 width=27)
                                                                                                                                         Filter: ((i_current_price >= '64'::double precision) AND (i_current_price <= '74'::double precision) AND (i_current_price >= '65'::double precision) AND (i_current_price <= '79'::double precision) AND ((i_color)::text = ANY ('{purple,burlywood,indian,spring,floral,medium}'::text[])))
                                                                                                                       ->  Finalize GroupAggregate  (cost=6269640.44..6270822.44 rows=3082 width=20)
                                                                                                                             Group Key: catalog_sales.cs_item_sk
                                                                                                                             Filter: (sum(catalog_sales.cs_ext_list_price) > ('2'::double precision * sum(((catalog_returns.cr_refunded_cash + catalog_returns.cr_reversed_charge) + catalog_returns.cr_store_credit))))
                                                                                                                             ->  Gather Merge  (cost=6269640.44..6270625.97 rows=7704 width=20)
                                                                                                                                   Workers Planned: 2
                                                                                                                                   ->  Partial GroupAggregate  (cost=6268640.42..6268736.72 rows=3852 width=20)
                                                                                                                                         Group Key: catalog_sales.cs_item_sk
                                                                                                                                         ->  Sort  (cost=6268640.42..6268650.05 rows=3852 width=36)
                                                                                                                                               Sort Key: catalog_sales.cs_item_sk
                                                                                                                                               ->  Parallel Hash Join  (cost=507231.47..6268411.00 rows=3852 width=36)
                                                                                                                                                     Hash Cond: ((catalog_sales.cs_item_sk = catalog_returns.cr_item_sk) AND (catalog_sales.cs_order_number = catalog_returns.cr_order_number))
                                                                                                                                                     ->  Parallel Seq Scan on catalog_sales  (cost=0.00..4819292.97 rows=59996297 width=16)
                                                                                                                                                     ->  Parallel Hash  (cost=376254.79..376254.79 rows=5998179 width=32)
                                                                                                                                                           ->  Parallel Seq Scan on catalog_returns  (cost=0.00..376254.79 rows=5998179 width=32)
                                                                                                                 ->  Index Only Scan using store_returns_pkey on store_returns  (cost=0.44..645.68 rows=172 width=8)
                                                                                                                       Index Cond: (sr_item_sk = catalog_sales.cs_item_sk)
                                                                                                           ->  Index Scan using store_sales_pkey on store_sales  (cost=0.57..8.08 rows=1 width=60)
                                                                                                                 Index Cond: ((ss_item_sk = store_returns.sr_item_sk) AND (ss_ticket_number = store_returns.sr_ticket_number))
                                                                                         ->  Index Scan using customer_address_pkey on customer_address ad1  (cost=0.42..7.83 rows=1 width=31)
                                                                                               Index Cond: (ca_address_sk = store_sales.ss_addr_sk)
                                                                                   ->  Index Only Scan using promotion_pkey on promotion  (cost=0.28..7.09 rows=1 width=4)
                                                                                         Index Cond: (p_promo_sk = store_sales.ss_promo_sk)
                                                                             ->  Index Scan using date_dim_pkey on date_dim d1  (cost=0.29..7.69 rows=1 width=8)
                                                                                   Index Cond: (d_date_sk = store_sales.ss_sold_date_sk)
                                                                       ->  Index Scan using customer_pkey on customer  (cost=0.43..7.83 rows=1 width=24)
                                                                             Index Cond: (c_customer_sk = store_sales.ss_customer_sk)
                                                                 ->  Index Scan using date_dim_pkey on date_dim d2  (cost=0.29..7.69 rows=1 width=8)
                                                                       Index Cond: (d_date_sk = customer.c_first_sales_date_sk)
                                                           ->  Index Scan using household_demographics_pkey on household_demographics hd2  (cost=0.28..7.62 rows=1 width=8)
                                                                 Index Cond: (hd_demo_sk = customer.c_current_hdemo_sk)
                                                     ->  Index Scan using date_dim_pkey on date_dim d3  (cost=0.29..7.69 rows=1 width=8)
                                                           Index Cond: (d_date_sk = customer.c_first_shipto_date_sk)
                                               ->  Index Scan using customer_demographics_pkey on customer_demographics cd2  (cost=0.43..7.83 rows=1 width=6)
                                                     Index Cond: (cd_demo_sk = customer.c_current_cdemo_sk)
                                         ->  Index Scan using customer_address_pkey on customer_address ad2  (cost=0.42..7.83 rows=1 width=31)
                                               Index Cond: (ca_address_sk = customer.c_current_addr_sk)
                                   ->  Index Only Scan using income_band_pkey on income_band ib2  (cost=0.15..5.77 rows=1 width=4)
                                         Index Cond: (ib_income_band_sk = hd2.hd_income_band_sk)
                             ->  Index Scan using customer_demographics_pkey on customer_demographics cd1  (cost=0.43..7.83 rows=1 width=6)
                                   Index Cond: (cd_demo_sk = store_sales.ss_cdemo_sk)
                       ->  Index Scan using store_pkey on store  (cost=0.15..5.67 rows=1 width=14)
                             Index Cond: (s_store_sk = store_sales.ss_store_sk)
   ->  Nested Loop  (cost=0.00..0.07 rows=1 width=1050)
         Join Filter: ((cs2.cnt <= cs1.cnt) AND (cs1.item_sk = cs2.item_sk) AND ((cs1.store_name)::text = (cs2.store_name)::text) AND ((cs1.store_zip)::text = (cs2.store_zip)::text))
         ->  CTE Scan on cross_sales cs1  (cost=0.00..0.02 rows=1 width=1018)
               Filter: (syear = 1999)
         ->  CTE Scan on cross_sales cs2  (cost=0.00..0.02 rows=1 width=196)
               Filter: (syear = 2000)
 JIT:
   Functions: 115
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(91 rows)

