

 Limit  (cost=315670.29..315670.29 rows=1 width=94)
   ->  Sort  (cost=315670.29..315670.29 rows=1 width=94)
         Sort Key: ("substring"((reason.r_reason_desc)::text, 1, 20)), (avg(web_sales.ws_quantity)), (avg(web_returns.wr_refunded_cash)), (avg(web_returns.wr_fee))
         ->  Finalize GroupAggregate  (cost=315669.98..315670.28 rows=1 width=94)
               Group Key: reason.r_reason_desc
               ->  Gather Merge  (cost=315669.98..315670.24 rows=2 width=110)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=314669.96..314669.98 rows=1 width=110)
                           Group Key: reason.r_reason_desc
                           ->  Sort  (cost=314669.96..314669.96 rows=1 width=34)
                                 Sort Key: reason.r_reason_desc
                                 ->  Nested Loop  (cost=115767.23..314669.95 rows=1 width=34)
                                       ->  Nested Loop  (cost=115766.94..314663.42 rows=1 width=38)
                                             ->  Nested Loop  (cost=115766.66..314657.02 rows=1 width=42)
                                                   Join Filter: (((((customer_address.ca_state)::text = ANY ('{IN,OH,NJ}'::text[])) AND (web_sales.ws_net_profit >= '100'::double precision) AND (web_sales.ws_net_profit <= '200'::double precision)) OR (((customer_address.ca_state)::text = ANY ('{WI,CT,KY}'::text[])) AND (web_sales.ws_net_profit >= '150'::double precision) AND (web_sales.ws_net_profit <= '300'::double precision)) OR (((customer_address.ca_state)::text = ANY ('{LA,IA,AR}'::text[])) AND (web_sales.ws_net_profit >= '50'::double precision) AND (web_sales.ws_net_profit <= '250'::double precision))) AND ((((cd1.cd_marital_status)::text = 'M'::text) AND ((cd1.cd_education_status)::text = 'Advanced Degree'::text) AND (web_sales.ws_sales_price >= '100'::double precision) AND (web_sales.ws_sales_price <= '150'::double precision)) OR (((cd1.cd_marital_status)::text = 'S'::text) AND ((cd1.cd_education_status)::text = 'College'::text) AND (web_sales.ws_sales_price >= '50'::double precision) AND (web_sales.ws_sales_price <= '100'::double precision)) OR (((cd1.cd_marital_status)::text = 'W'::text) AND ((cd1.cd_education_status)::text = '2 yr Degree'::text) AND (web_sales.ws_sales_price >= '150'::double precision) AND (web_sales.ws_sales_price <= '200'::double precision))))
                                                   ->  Hash Join  (cost=115766.09..307086.25 rows=1066 width=53)
                                                         Hash Cond: (web_returns.wr_reason_sk = reason.r_reason_sk)
                                                         ->  Parallel Hash Join  (cost=115763.85..307080.87 rows=1116 width=43)
                                                               Hash Cond: ((web_returns.wr_returning_cdemo_sk = cd2.cd_demo_sk) AND ((cd1.cd_marital_status)::text = (cd2.cd_marital_status)::text) AND ((cd1.cd_education_status)::text = (cd2.cd_education_status)::text))
                                                               ->  Parallel Hash Join  (cost=70295.69..256665.66 rows=40768 width=47)
                                                                     Hash Cond: (web_returns.wr_refunded_addr_sk = customer_address.ca_address_sk)
                                                                     ->  Parallel Hash Join  (cost=40397.67..226136.36 rows=240490 width=48)
                                                                           Hash Cond: (web_returns.wr_refunded_cdemo_sk = cd1.cd_demo_sk)
                                                                           ->  Parallel Seq Scan on web_returns  (cost=0.00..177866.24 rows=2999024 width=40)
                                                                           ->  Parallel Hash  (cost=39559.33..39559.33 rows=67067 width=16)
                                                                                 ->  Parallel Seq Scan on customer_demographics cd1  (cost=0.00..39559.33 rows=67067 width=16)
                                                                                       Filter: ((((cd_marital_status)::text = 'M'::text) AND ((cd_education_status)::text = 'Advanced Degree'::text)) OR (((cd_marital_status)::text = 'S'::text) AND ((cd_education_status)::text = 'College'::text)) OR (((cd_marital_status)::text = 'W'::text) AND ((cd_education_status)::text = '2 yr Degree'::text)))
                                                                     ->  Parallel Hash  (cost=28973.83..28973.83 rows=73935 width=7)
                                                                           ->  Parallel Seq Scan on customer_address  (cost=0.00..28973.83 rows=73935 width=7)
                                                                                 Filter: (((ca_country)::text = 'United States'::text) AND (((ca_state)::text = ANY ('{IN,OH,NJ}'::text[])) OR ((ca_state)::text = ANY ('{WI,CT,KY}'::text[])) OR ((ca_state)::text = ANY ('{LA,IA,AR}'::text[]))))
                                                               ->  Parallel Hash  (cost=27554.33..27554.33 rows=800333 width=16)
                                                                     ->  Parallel Seq Scan on customer_demographics cd2  (cost=0.00..27554.33 rows=800333 width=16)
                                                         ->  Hash  (cost=1.55..1.55 rows=55 width=18)
                                                               ->  Seq Scan on reason  (cost=0.00..1.55 rows=55 width=18)
                                                   ->  Index Scan using web_sales_pkey on web_sales  (cost=0.57..7.04 rows=1 width=36)
                                                         Index Cond: ((ws_item_sk = web_returns.wr_item_sk) AND (ws_order_number = web_returns.wr_order_number))
                                                         Filter: ((((ws_sales_price >= '100'::double precision) AND (ws_sales_price <= '150'::double precision)) OR ((ws_sales_price >= '50'::double precision) AND (ws_sales_price <= '100'::double precision)) OR ((ws_sales_price >= '150'::double precision) AND (ws_sales_price <= '200'::double precision))) AND (((ws_net_profit >= '100'::double precision) AND (ws_net_profit <= '200'::double precision)) OR ((ws_net_profit >= '150'::double precision) AND (ws_net_profit <= '300'::double precision)) OR ((ws_net_profit >= '50'::double precision) AND (ws_net_profit <= '250'::double precision))))
                                             ->  Index Only Scan using web_page_pkey on web_page  (cost=0.28..6.39 rows=1 width=4)
                                                   Index Cond: (wp_web_page_sk = web_sales.ws_web_page_sk)
                                       ->  Index Scan using date_dim_pkey on date_dim  (cost=0.29..6.50 rows=1 width=4)
                                             Index Cond: (d_date_sk = web_sales.ws_sold_date_sk)
                                             Filter: (d_year = 2000)
 JIT:
   Functions: 66
   Options: Inlining false, Optimization false, Expressions true, Deforming true
(45 rows)

