

 Limit  (cost=899731.28..899731.53 rows=100 width=20)
   ->  Sort  (cost=899731.28..899732.18 rows=360 width=20)
         Sort Key: tmp1.avg_quarterly_sales, tmp1.sum_sales, tmp1.i_manufact_id
         ->  Subquery Scan on tmp1  (cost=899426.69..899717.52 rows=360 width=20)
               Filter: (CASE WHEN (tmp1.avg_quarterly_sales > '0'::double precision) THEN (abs((tmp1.sum_sales - tmp1.avg_quarterly_sales)) / tmp1.avg_quarterly_sales) ELSE NULL::double precision END > '0.1'::double precision)
               ->  WindowAgg  (cost=899426.69..899693.22 rows=1080 width=24)
                     ->  Finalize GroupAggregate  (cost=899426.69..899677.02 rows=1080 width=16)
                           Group Key: item.i_manufact_id, date_dim.d_qoy
                           ->  Gather Merge  (cost=899426.69..899652.71 rows=1802 width=16)
                                 Workers Planned: 2
                                 ->  Partial GroupAggregate  (cost=898426.67..898444.69 rows=901 width=16)
                                       Group Key: item.i_manufact_id, date_dim.d_qoy
                                       ->  Sort  (cost=898426.67..898428.92 rows=901 width=16)
                                             Sort Key: item.i_manufact_id, date_dim.d_qoy
                                             ->  Hash Join  (cost=2609.34..898382.45 rows=901 width=16)
                                                   Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                                   ->  Parallel Hash Join  (cost=2584.29..898354.91 rows=944 width=20)
                                                         Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                         ->  Nested Loop  (cost=46.18..895330.61 rows=185205 width=20)
                                                               ->  Parallel Seq Scan on item  (cost=0.00..11567.50 rows=131 width=8)
                                                                     Filter: ((((i_category)::text = ANY ('{Books,Children,Electronics}'::text[])) AND ((i_class)::text = ANY ('{personal,portable,reference,self-help}'::text[])) AND ((i_brand)::text = ANY ('{"scholaramalgamalg #14","scholaramalgamalg #7","exportiunivamalg #9","scholaramalgamalg #9"}'::text[]))) OR (((i_category)::text = ANY ('{Women,Music,Men}'::text[])) AND ((i_class)::text = ANY ('{accessories,classical,fragrances,pants}'::text[])) AND ((i_brand)::text = ANY ('{"amalgimporto #1","edu packscholar #1","exportiimporto #1","importoamalg #1"}'::text[]))))
                                                               ->  Bitmap Heap Scan on store_sales  (cost=46.18..6728.69 rows=1759 width=20)
                                                                     Recheck Cond: (ss_item_sk = item.i_item_sk)
                                                                     ->  Bitmap Index Scan on store_sales_pkey  (cost=0.00..45.74 rows=1759 width=0)
                                                                           Index Cond: (ss_item_sk = item.i_item_sk)
                                                         ->  Parallel Hash  (cost=2535.25..2535.25 rows=229 width=8)
                                                               ->  Parallel Seq Scan on date_dim  (cost=0.00..2535.25 rows=229 width=8)
                                                                     Filter: (d_month_seq = ANY ('{1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211}'::integer[]))
                                                   ->  Hash  (cost=20.02..20.02 rows=402 width=4)
                                                         ->  Seq Scan on store  (cost=0.00..20.02 rows=402 width=4)
 JIT:
   Functions: 40
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(33 rows)

