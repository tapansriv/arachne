                                                                                                                                             QUERY PLAN                                                                                                                                              
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=9105338.52..9105338.53 rows=1 width=520)
   CTE v1
     ->  WindowAgg  (cost=7813953.75..8097519.48 rows=1526429 width=67)
           ->  WindowAgg  (cost=7813953.75..8059358.75 rows=1526429 width=59)
                 ->  Finalize GroupAggregate  (cost=7813953.75..8017381.96 rows=1526429 width=51)
                       Group Key: item.i_category, item.i_brand, store.s_store_name, store.s_company_name, date_dim.d_year, date_dim.d_moy
                       ->  Gather Merge  (cost=7813953.75..7979857.25 rows=1272024 width=51)
                             Workers Planned: 2
                             ->  Partial GroupAggregate  (cost=7812953.73..7832034.09 rows=636012 width=51)
                                   Group Key: item.i_category, item.i_brand, store.s_store_name, store.s_company_name, date_dim.d_year, date_dim.d_moy
                                   ->  Sort  (cost=7812953.73..7814543.76 rows=636012 width=51)
                                         Sort Key: item.i_category, item.i_brand, store.s_store_name, store.s_company_name, date_dim.d_year, date_dim.d_moy
                                         ->  Hash Join  (cost=13330.50..7729904.33 rows=636012 width=51)
                                               Hash Cond: (store_sales.ss_store_sk = store.s_store_sk)
                                               ->  Parallel Hash Join  (cost=13305.45..7728112.26 rows=666447 width=43)
                                                     Hash Cond: (store_sales.ss_item_sk = item.i_item_sk)
                                                     ->  Parallel Hash Join  (cost=2430.95..7707096.30 rows=666447 width=24)
                                                           Hash Cond: (store_sales.ss_sold_date_sk = date_dim.d_date_sk)
                                                           ->  Parallel Seq Scan on store_sales  (cost=0.00..7389799.50 rows=119942250 width=20)
                                                           ->  Parallel Hash  (cost=2427.82..2427.82 rows=250 width=12)
                                                                 ->  Parallel Seq Scan on date_dim  (cost=0.00..2427.82 rows=250 width=12)
                                                                       Filter: ((d_year = 1999) OR ((d_year = 1998) AND (d_moy = 12)) OR ((d_year = 2000) AND (d_moy = 1)))
                                                     ->  Parallel Hash  (cost=9230.00..9230.00 rows=85000 width=27)
                                                           ->  Parallel Seq Scan on item  (cost=0.00..9230.00 rows=85000 width=27)
                                               ->  Hash  (cost=20.02..20.02 rows=402 width=16)
                                                     ->  Seq Scan on store  (cost=0.00..20.02 rows=402 width=16)
   ->  Sort  (cost=1007819.04..1007819.05 rows=1 width=520)
         Sort Key: ((v1.sum_sales - v1.avg_monthly_sales)), v1.i_category, v1.i_brand, v1.s_store_name, v1.s_company_name, v1.d_moy, v1.avg_monthly_sales, v1.sum_sales, v1_lag.sum_sales, v1_lead.sum_sales
         ->  Nested Loop  (cost=912402.37..1007819.03 rows=1 width=520)
               Join Filter: (((v1.i_category)::text = (v1_lead.i_category)::text) AND ((v1.i_brand)::text = (v1_lead.i_brand)::text) AND ((v1.s_store_name)::text = (v1_lead.s_store_name)::text) AND ((v1.s_company_name)::text = (v1_lead.s_company_name)::text) AND (v1.rn = (v1_lead.rn - 1)))
               ->  Merge Join  (cost=912402.37..939129.73 rows=1 width=992)
                     Merge Cond: (((v1_lag.i_category)::text = (v1.i_category)::text) AND ((v1_lag.i_brand)::text = (v1.i_brand)::text) AND ((v1_lag.s_store_name)::text = (v1.s_store_name)::text) AND ((v1_lag.s_company_name)::text = (v1.s_company_name)::text) AND (((v1_lag.rn + 1)) = v1.rn))
                     ->  Sort  (cost=855120.03..858936.11 rows=1526429 width=488)
                           Sort Key: v1_lag.i_category, v1_lag.i_brand, v1_lag.s_store_name, v1_lag.s_company_name, ((v1_lag.rn + 1))
                           ->  CTE Scan on v1 v1_lag  (cost=0.00..30528.58 rows=1526429 width=488)
                     ->  Sort  (cost=57282.33..57284.45 rows=848 width=504)
                           Sort Key: v1.i_category, v1.i_brand, v1.s_store_name, v1.s_company_name, v1.rn
                           ->  CTE Scan on v1  (cost=0.00..57241.09 rows=848 width=504)
                                 Filter: ((avg_monthly_sales > '0'::double precision) AND (d_year = 1999) AND (CASE WHEN (avg_monthly_sales > '0'::double precision) THEN (abs((sum_sales - avg_monthly_sales)) / avg_monthly_sales) ELSE NULL::double precision END > '0.1'::double precision))
               ->  CTE Scan on v1 v1_lead  (cost=0.00..30528.58 rows=1526429 width=488)
 JIT:
   Functions: 80
   Options: Inlining true, Optimization true, Expressions true, Deforming true
(43 rows)

