XN CTE Scan on friend_shortest  (cost=67155764927622.24..67155764929325.17 rows=681171 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..67155764927622.24 rows=681171 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..25000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=52407800385.00..67155764902622.23 rows=681170 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=52407800385.00..67155764895810.53 rows=681170 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=52407800385.00..52412812070.41 rows=419278241 width=8)
                            ->  XN Hash Join DS_BCAST_INNER  (cost=19926844802.45..45698110347.76 rows=419278241 width=8)
                                  Hash Cond: ("outer".cs_bill_customer_sk = "inner".c_customer_sk)
                                  ->  XN Nested Loop DS_BCAST_INNER  (cost=19926819387.36..25704333180.62 rows=5209515360 width=8)
                                        Join Filter: (("outer".cs_sales_price < ("inner".cs_sales_price + 5::double precision)) OR ("outer".cs_sales_price > ("inner".cs_sales_price - 5::double precision)))
                                        ->  XN Seq Scan on catalog_sales  (cost=0.00..1799963.40 rows=341334 width=12)
                                              Filter: (cs_item_sk < 500)
                                        ->  XN Materialize  (cost=19926819387.36..19926819662.08 rows=27472 width=12)
                                              ->  XN Hash Join DS_BCAST_INNER  (cost=25415.09..19926269919.89 rows=27472 width=12)
                                                    Hash Cond: ("outer".cs_bill_customer_sk = "inner".c_customer_sk)
                                                    ->  XN Seq Scan on catalog_sales  (cost=0.00..1799963.40 rows=341334 width=12)
                                                          Filter: (cs_item_sk < 500)
                                                    ->  XN Hash  (cost=25000.00..25000.00 rows=166037 width=4)
                                                          ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=166037 width=4)
                                                                Filter: ((c_last_name)::text ~~ 'M%'::text)
                                  ->  XN Hash  (cost=25000.00..25000.00 rows=166037 width=4)
                                        ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=166037 width=4)
                                              Filter: ((c_last_name)::text ~~ 'M%'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----