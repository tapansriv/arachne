XN CTE Scan on friend_shortest  (cost=165092834675.80..165092834677.16 rows=543 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..165092834675.80 rows=543 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..25000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=111754760365.37..165092809675.79 rows=542 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=111754760365.37..165092809670.37 rows=542 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=111754760365.37..111754763698.13 rows=333276 width=8)
                            ->  XN Hash Join DS_BCAST_INNER  (cost=56744039283.33..111749427616.09 rows=333276 width=8)
                                  Hash Cond: ("outer".c_customer_sk = "inner".cs_bill_customer_sk)
                                  ->  XN Seq Scan on customer  (cost=0.00..20000.00 rows=2000000 width=4)
                                  ->  XN Hash  (cost=56744038423.90..56744038423.90 rows=343772 width=8)
                                        ->  XN Hash Join DS_BCAST_INNER  (cost=6269986.18..56744038423.90 rows=343772 width=8)
                                              Hash Cond: ("outer".c_customer_sk = "inner".cs_bill_customer_sk)
                                              ->  XN Seq Scan on customer  (cost=0.00..20000.00 rows=2000000 width=4)
                                              ->  XN Hash  (cost=6269099.69..6269099.69 rows=354599 width=8)
                                                    ->  XN Hash Join DS_DIST_NONE  (cost=2160612.95..6269099.69 rows=354599 width=8)
                                                          Hash Cond: ("outer".cs_item_sk = "inner".cs_item_sk)
                                                          ->  XN Seq Scan on catalog_sales  (cost=0.00..2159956.08 rows=262747 width=8)
                                                                Filter: ((cs_item_sk < 6000) AND (cs_sales_price < 250::double precision))
                                                          ->  XN Hash  (cost=2159956.08..2159956.08 rows=262747 width=8)
                                                                ->  XN Seq Scan on catalog_sales  (cost=0.00..2159956.08 rows=262747 width=8)
                                                                      Filter: ((cs_item_sk < 6000) AND (cs_sales_price < 250::double precision))
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----