XN CTE Scan on friend_shortest  (cost=1514296770763025.75..1514296770801444.75 rows=15367605 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..1514296770763025.75 rows=15367605 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..25000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=404155835358.17..1514296770738025.75 rows=15367604 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=404155835358.17..1514296770584349.75 rows=15367604 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=404155835358.17..404268902030.54 rows=9459172537 width=8)
                            ->  XN Hash Join DS_BCAST_INNER  (cost=33654405540.07..252781140646.63 rows=9459172537 width=8)
                                  Hash Cond: ("outer".cs_bill_customer_sk = "inner".c_customer_sk)
                                  ->  XN Nested Loop DS_BCAST_INNER  (cost=33654376540.07..60411981101.09 rows=12196381436 width=8)
                                        Join Filter: (("outer".cs_sales_price < ("inner".cs_sales_price + 5::double precision)) OR ("outer".cs_sales_price > ("inner".cs_sales_price - 5::double precision)))
                                        ->  XN Seq Scan on catalog_sales  (cost=0.00..1799963.40 rows=168244 width=12)
                                              Filter: (cs_item_sk < 250)
                                        ->  XN Materialize  (cost=33654376540.07..33654377844.93 rows=130486 width=12)
                                              ->  XN Hash Join DS_BCAST_INNER  (cost=1800384.01..33651766689.58 rows=130486 width=12)
                                                    Hash Cond: ("outer".c_customer_sk = "inner".cs_bill_customer_sk)
                                                    ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=1600001 width=4)
                                                          Filter: ((c_first_name)::text ~~ '%ro%'::text)
                                                    ->  XN Hash  (cost=1799963.40..1799963.40 rows=168244 width=12)
                                                          ->  XN Seq Scan on catalog_sales  (cost=0.00..1799963.40 rows=168244 width=12)
                                                                Filter: (cs_item_sk < 250)
                                  ->  XN Hash  (cost=25000.00..25000.00 rows=1600001 width=4)
                                        ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=1600001 width=4)
                                              Filter: ((c_first_name)::text ~~ '%ro%'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----