XN Aggregate  (cost=216778120.48..216778120.48 rows=1 width=16)
  ->  XN Subquery Scan x  (cost=74861803.91..216778120.47 rows=3 width=16)
        ->  XN Append  (cost=74861803.91..216778120.44 rows=3 width=12)
              ->  XN Subquery Scan "*SELECT* 1"  (cost=74861803.91..74861803.93 rows=1 width=12)
                    ->  XN Aggregate  (cost=74861803.91..74861803.92 rows=1 width=12)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=1097.16..74851592.15 rows=2042352 width=12)
                                Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                ->  XN Seq Scan on store_sales  (cost=0.00..2879970.24 rows=274408098 width=16)
                                      Filter: (ss_sold_date_sk IS NOT NULL)
                                ->  XN Hash  (cost=1095.73..1095.73 rows=571 width=4)
                                      ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=571 width=4)
                                            Filter: ((d_year >= 1999) AND (d_year <= 2001))
              ->  XN Subquery Scan "*SELECT* 2"  (cost=71766756.42..71766756.44 rows=1 width=12)
                    ->  XN Aggregate  (cost=71766756.42..71766756.43 rows=1 width=12)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=1097.16..71761200.55 rows=1111174 width=12)
                                Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                                ->  XN Seq Scan on catalog_sales  (cost=0.00..1439970.72 rows=143121674 width=16)
                                      Filter: (cs_sold_date_sk IS NOT NULL)
                                ->  XN Hash  (cost=1095.73..1095.73 rows=571 width=4)
                                      ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=571 width=4)
                                            Filter: ((d_year >= 1999) AND (d_year <= 2001))
              ->  XN Subquery Scan "*SELECT* 3"  (cost=70149560.05..70149560.07 rows=1 width=12)
                    ->  XN Aggregate  (cost=70149560.05..70149560.06 rows=1 width=12)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=1097.16..70146748.38 rows=562332 width=12)
                                Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                                ->  XN Seq Scan on web_sales  (cost=0.00..720012.40 rows=72001240 width=16)
                                ->  XN Hash  (cost=1095.73..1095.73 rows=571 width=4)
                                      ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=571 width=4)
                                            Filter: ((d_year >= 1999) AND (d_year <= 2001))

XN Hash Join DS_BCAST_INNER  (cost=3557.55..48632073903.84 rows=14939723 width=4)
  Hash Cond: (("outer".brand_id = "inner".i_brand_id) AND ("outer".category_id = "inner".i_category_id) AND ("outer".class_id = "inner".i_class_id))
  ->  XN Subquery Scan x  (cost=0.00..5892.29 rows=589229 width=12)
        ->  XN Hash Intersect Distinct DS_DIST_NONE  (cost=0.00..0.00 rows=589229 width=12)
              Hash Cond: (("outer".brand_id = "inner".brand_id) AND ("outer".class_id = "inner".class_id) AND ("outer".category_id = "inner".category_id))
              Join Filter: ((("outer".brand_id = "inner".brand_id) OR (("inner".brand_id IS NULL) AND ("outer".brand_id IS NULL))) AND (("outer".class_id = "inner".class_id) OR (("inner".class_id IS NULL) AND ("outer".class_id IS NULL))) AND (("outer".category_id = "inner".category_id) OR (("inner".category_id IS NULL) AND ("outer".category_id IS NULL))))
              ->  XN Network  (cost=0.00..0.00 rows=1164322 width=12)
                    Distribute
                    ->  XN Hash Intersect Distinct DS_DIST_NONE  (cost=0.00..0.00 rows=1164322 width=12)
                          Hash Cond: (("outer".brand_id = "inner".brand_id) AND ("outer".class_id = "inner".class_id) AND ("outer".category_id = "inner".category_id))
                          Join Filter: ((("outer".brand_id = "inner".brand_id) OR (("inner".brand_id IS NULL) AND ("outer".brand_id IS NULL))) AND (("outer".class_id = "inner".class_id) OR (("inner".class_id IS NULL) AND ("outer".class_id IS NULL))) AND (("outer".category_id = "inner".category_id) OR (("inner".category_id IS NULL) AND ("outer".category_id IS NULL))))
                          ->  XN Network  (cost=3647.16..74942895.85 rows=2140039 width=12)
                                Distribute
                                ->  XN Subquery Scan "*SELECT* 1"  (cost=3647.16..74942895.85 rows=2140039 width=12)
                                      ->  XN Hash Join DS_DIST_NONE  (cost=3647.16..74921495.46 rows=2140039 width=12)
                                            Hash Cond: ("outer".ss_item_sk = "inner".i_item_sk)
                                            ->  XN Hash Join DS_BCAST_INNER  (cost=1097.16..74851592.15 rows=2042352 width=4)
                                                  Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                  ->  XN Seq Scan on store_sales  (cost=0.00..2879970.24 rows=274408098 width=8)
                                                        Filter: (ss_sold_date_sk IS NOT NULL)
                                                  ->  XN Hash  (cost=1095.73..1095.73 rows=571 width=4)
                                                        ->  XN Seq Scan on date_dim d1  (cost=0.00..1095.73 rows=571 width=4)
                                                              Filter: ((d_year >= 1999) AND (d_year <= 2001))
                                            ->  XN Hash  (cost=2040.00..2040.00 rows=204000 width=16)
                                                  ->  XN Seq Scan on item iss  (cost=0.00..2040.00 rows=204000 width=16)
                          ->  XN Hash  (cost=71812038.40..71812038.40 rows=1164322 width=12)
                                ->  XN Network  (cost=3647.16..71812038.40 rows=1164322 width=12)
                                      Distribute
                                      ->  XN Subquery Scan "*SELECT* 2"  (cost=3647.16..71812038.40 rows=1164322 width=12)
                                            ->  XN Hash Join DS_DIST_NONE  (cost=3647.16..71800395.18 rows=1164322 width=12)
                                                  Hash Cond: ("outer".cs_item_sk = "inner".i_item_sk)
                                                  ->  XN Hash Join DS_BCAST_INNER  (cost=1097.16..71761200.55 rows=1111174 width=4)
                                                        Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                                                        ->  XN Seq Scan on catalog_sales  (cost=0.00..1439970.72 rows=143121674 width=8)
                                                              Filter: (cs_sold_date_sk IS NOT NULL)
                                                        ->  XN Hash  (cost=1095.73..1095.73 rows=571 width=4)
                                                              ->  XN Seq Scan on date_dim d2  (cost=0.00..1095.73 rows=571 width=4)
                                                                    Filter: ((d_year >= 1999) AND (d_year <= 2001))
                                                  ->  XN Hash  (cost=2040.00..2040.00 rows=204000 width=16)
                                                        ->  XN Seq Scan on item ics  (cost=0.00..2040.00 rows=204000 width=16)
              ->  XN Hash  (cost=49030173735.43..49030173735.43 rows=589229 width=12)
                    ->  XN Network  (cost=3647.16..49030173735.43 rows=589229 width=12)
                          Distribute
                          ->  XN Subquery Scan "*SELECT* 3"  (cost=3647.16..49030173735.43 rows=589229 width=12)
                                ->  XN Hash Join DS_BCAST_INNER  (cost=3647.16..49030167843.14 rows=589229 width=12)
                                      Hash Cond: ("outer".ws_item_sk = "inner".i_item_sk)
                                      ->  XN Hash Join DS_BCAST_INNER  (cost=1097.16..70146748.38 rows=562332 width=4)
                                            Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                                            ->  XN Seq Scan on web_sales  (cost=0.00..720012.40 rows=72001240 width=8)
                                            ->  XN Hash  (cost=1095.73..1095.73 rows=571 width=4)
                                                  ->  XN Seq Scan on date_dim d3  (cost=0.00..1095.73 rows=571 width=4)
                                                        Filter: ((d_year >= 1999) AND (d_year <= 2001))
                                      ->  XN Hash  (cost=2040.00..2040.00 rows=204000 width=16)
                                            ->  XN Seq Scan on item iws  (cost=0.00..2040.00 rows=204000 width=16)
  ->  XN Hash  (cost=2040.00..2040.00 rows=202340 width=16)
        ->  XN Seq Scan on item  (cost=0.00..2040.00 rows=202340 width=16)
              Filter: ((i_category_id IS NOT NULL) AND (i_class_id IS NOT NULL) AND (i_brand_id IS NOT NULL))

XN HashAggregate  (cost=22452240824.58..22452241232.58 rows=1000 width=24)
  Filter: ($0 < sum(((cs_quantity)::double precision * cs_list_price)))
  InitPlan
    ->  XN Seq Scan on volt_tt_61999454787d4  (cost=0.00..0.01 rows=1 width=8)
  ->  XN Hash IN Join DS_BCAST_INNER  (cost=6593106.65..22452240034.17 rows=52693 width=24)
        Hash Cond: ("outer".cs_item_sk = "inner".ss_item_sk)
        ->  XN Hash Join DS_DIST_NONE  (cost=6590768.56..6595929.52 rows=57096 width=32)
              Hash Cond: ("outer".i_item_sk = "inner".cs_item_sk)
              ->  XN Seq Scan on item  (cost=0.00..2040.00 rows=204000 width=16)
              ->  XN Hash  (cost=6590632.34..6590632.34 rows=54489 width=16)
                    ->  XN Hash Join DS_BCAST_INNER  (cost=1095.80..6590632.34 rows=54489 width=16)
                          Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                          ->  XN Seq Scan on catalog_sales  (cost=0.00..1439970.72 rows=143121674 width=20)
                                Filter: (cs_sold_date_sk IS NOT NULL)
                          ->  XN Hash  (cost=1095.73..1095.73 rows=28 width=4)
                                ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=28 width=4)
                                      Filter: ((2001 = d_year) AND (11 = d_moy))
        ->  XN Hash  (cost=1870.47..1870.47 rows=187047 width=4)
              ->  XN Seq Scan on volt_tt_6199945480587  (cost=0.00..1870.47 rows=187047 width=4)

XN HashAggregate  (cost=22455324847.89..22455325255.89 rows=1000 width=24)
  Filter: ($0 < sum(((ss_quantity)::double precision * ss_list_price)))
  InitPlan
    ->  XN Seq Scan on volt_tt_61999454787d4  (cost=0.00..0.01 rows=1 width=8)
  ->  XN Hash Join DS_DIST_NONE  (cost=22455317836.66..22455323395.15 rows=96849 width=24)
        Hash Cond: ("outer".i_item_sk = "inner".ss_item_sk)
        ->  XN Seq Scan on item  (cost=0.00..2040.00 rows=204000 width=16)
        ->  XN Hash  (cost=22455317605.59..22455317605.59 rows=92428 width=20)
              ->  XN Hash IN Join DS_BCAST_INNER  (cost=3433.89..22455317605.59 rows=92428 width=20)
                    Hash Cond: ("outer".ss_item_sk = "inner".ss_item_sk)
                    ->  XN Hash Join DS_BCAST_INNER  (cost=1095.80..9672168.78 rows=100151 width=16)
                          Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                          ->  XN Seq Scan on store_sales  (cost=0.00..2879970.24 rows=274408098 width=20)
                                Filter: (ss_sold_date_sk IS NOT NULL)
                          ->  XN Hash  (cost=1095.73..1095.73 rows=28 width=4)
                                ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=28 width=4)
                                      Filter: ((2001 = d_year) AND (11 = d_moy))
                    ->  XN Hash  (cost=1870.47..1870.47 rows=187047 width=4)
                          ->  XN Seq Scan on volt_tt_6199945480587  (cost=0.00..1870.47 rows=187047 width=4)

XN HashAggregate  (cost=20935671627.20..20935672035.20 rows=1000 width=24)
  Filter: ($0 < sum(((ws_quantity)::double precision * ws_list_price)))
  InitPlan
    ->  XN Seq Scan on volt_tt_61999454787d4  (cost=0.00..0.01 rows=1 width=8)
  ->  XN Hash Join DS_BCAST_INNER  (cost=13809946370.52..20935671227.19 rows=26667 width=24)
        Hash Cond: ("outer".i_item_sk = "inner".ws_item_sk)
        ->  XN Seq Scan on item  (cost=0.00..2040.00 rows=204000 width=16)
        ->  XN Hash  (cost=13809946306.90..13809946306.90 rows=25449 width=20)
              ->  XN Hash Join DS_BCAST_INNER  (cost=4983806.48..13809946306.90 rows=25449 width=20)
                    Hash Cond: ("outer".ss_item_sk = "inner".ws_item_sk)
                    ->  XN HashAggregate  (cost=2338.09..2338.09 rows=179674 width=4)
                          ->  XN Seq Scan on volt_tt_6199945480587  (cost=0.00..1870.47 rows=187047 width=4)
                    ->  XN Hash  (cost=4981399.46..4981399.46 rows=27575 width=16)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=1095.80..4981399.46 rows=27575 width=16)
                                Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                                ->  XN Seq Scan on web_sales  (cost=0.00..720012.40 rows=72001240 width=20)
                                ->  XN Hash  (cost=1095.73..1095.73 rows=28 width=4)
                                      ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=28 width=4)
                                            Filter: ((2001 = d_year) AND (11 = d_moy))

XN Subquery Scan z  (cost=5000000005757.48..5000000005758.73 rows=100 width=60)
  ->  XN Limit  (cost=5000000005757.48..5000000005757.73 rows=100 width=60)
        ->  XN Merge  (cost=5000000005757.48..5000000005758.24 rows=304 width=60)
              Merge Key: channel, i_brand_id, i_class_id, i_category_id
              ->  XN Network  (cost=5000000005757.48..5000000005758.24 rows=304 width=60)
                    Send to leader
                    ->  XN Sort  (cost=5000000005757.48..5000000005758.24 rows=304 width=60)
                          Sort Key: channel, i_brand_id, i_class_id, i_category_id
                          ->  XN Unique  (cost=1000000001528.95..4000000005744.94 rows=304 width=60)
                                ->  XN Append  (cost=1000000001528.95..4000000005740.38 rows=304 width=60)
                                      ->  XN Subquery Scan "*SELECT* 1"  (cost=1000000001528.95..1000000001530.20 rows=100 width=60)
                                            ->  XN Limit  (cost=1000000001528.95..1000000001529.20 rows=100 width=60)
                                                  ->  XN Sort  (cost=1000000001528.95..1000000001530.24 rows=516 width=60)
                                                        Sort Key: derived_col1, derived_col2, derived_col3, derived_col4
                                                        ->  XN Unique  (cost=1495.38..1505.70 rows=516 width=60)
                                                              ->  XN HashAggregate  (cost=1495.38..1497.96 rows=516 width=60)
                                                                    ->  XN Subquery Scan y  (cost=429.70..1418.02 rows=5157 width=60)
                                                                          ->  XN Append  (cost=429.70..1366.45 rows=5157 width=39)
                                                                                ->  XN Subquery Scan "*SELECT* 1"  (cost=429.70..455.49 rows=1719 width=37)
                                                                                      ->  XN HashAggregate  (cost=429.70..438.30 rows=1719 width=37)
                                                                                            ->  XN Seq Scan on volt_tt_6199945491d15  (cost=0.00..171.88 rows=17188 width=37)
                                                                                ->  XN Subquery Scan "*SELECT* 2"  (cost=429.70..455.49 rows=1719 width=39)
                                                                                      ->  XN HashAggregate  (cost=429.70..438.30 rows=1719 width=39)
                                                                                            ->  XN Seq Scan on volt_tt_619994548d78c  (cost=0.00..171.88 rows=17188 width=39)
                                                                                ->  XN Subquery Scan "*SELECT* 3"  (cost=429.70..455.49 rows=1719 width=35)
                                                                                      ->  XN HashAggregate  (cost=429.70..438.30 rows=1719 width=35)
                                                                                            ->  XN Seq Scan on volt_tt_619994549655f  (cost=0.00..171.88 rows=17188 width=35)
                                      ->  XN Subquery Scan "*SELECT* 2"  (cost=1000000001387.15..1000000001388.40 rows=100 width=56)
                                            ->  XN Limit  (cost=1000000001387.15..1000000001387.40 rows=100 width=56)
                                                  ->  XN Sort  (cost=1000000001387.15..1000000001388.44 rows=516 width=56)
                                                        Sort Key: derived_col1, derived_col2, derived_col3, NULL::integer
                                                        ->  XN Unique  (cost=1353.58..1363.90 rows=516 width=56)
                                                              ->  XN HashAggregate  (cost=1353.58..1356.16 rows=516 width=56)
                                                                    ->  XN Subquery Scan y  (cost=386.73..1289.12 rows=5157 width=56)
                                                                          ->  XN Append  (cost=386.73..1237.55 rows=5157 width=35)
                                                                                ->  XN Subquery Scan "*SELECT* 1"  (cost=386.73..412.51 rows=1719 width=33)
                                                                                      ->  XN HashAggregate  (cost=386.73..395.32 rows=1719 width=33)
                                                                                            ->  XN Seq Scan on volt_tt_6199945491d15  (cost=0.00..171.88 rows=17188 width=33)
                                                                                ->  XN Subquery Scan "*SELECT* 2"  (cost=386.73..412.51 rows=1719 width=35)
                                                                                      ->  XN HashAggregate  (cost=386.73..395.32 rows=1719 width=35)
                                                                                            ->  XN Seq Scan on volt_tt_619994548d78c  (cost=0.00..171.88 rows=17188 width=35)
                                                                                ->  XN Subquery Scan "*SELECT* 3"  (cost=386.73..412.51 rows=1719 width=31)
                                                                                      ->  XN HashAggregate  (cost=386.73..395.32 rows=1719 width=31)
                                                                                            ->  XN Seq Scan on volt_tt_619994549655f  (cost=0.00..171.88 rows=17188 width=31)
                                      ->  XN Subquery Scan "*SELECT* 3"  (cost=1000000001144.38..1000000001145.63 rows=100 width=52)
                                            ->  XN Limit  (cost=1000000001144.38..1000000001144.63 rows=100 width=52)
                                                  ->  XN Sort  (cost=1000000001144.38..1000000001145.07 rows=276 width=52)
                                                        Sort Key: derived_col1, derived_col2, NULL::integer, NULL::integer
                                                        ->  XN Unique  (cost=1127.67..1133.19 rows=276 width=52)
                                                              ->  XN HashAggregate  (cost=1127.67..1129.05 rows=276 width=52)
                                                                    ->  XN Subquery Scan y  (cost=343.76..1100.13 rows=2754 width=52)
                                                                          ->  XN Append  (cost=343.76..1072.59 rows=2754 width=31)
                                                                                ->  XN Subquery Scan "*SELECT* 1"  (cost=343.76..357.53 rows=918 width=29)
                                                                                      ->  XN HashAggregate  (cost=343.76..348.35 rows=918 width=29)
                                                                                            ->  XN Seq Scan on volt_tt_6199945491d15  (cost=0.00..171.88 rows=17188 width=29)
                                                                                ->  XN Subquery Scan "*SELECT* 2"  (cost=343.76..357.53 rows=918 width=31)
                                                                                      ->  XN HashAggregate  (cost=343.76..348.35 rows=918 width=31)
                                                                                            ->  XN Seq Scan on volt_tt_619994548d78c  (cost=0.00..171.88 rows=17188 width=31)
                                                                                ->  XN Subquery Scan "*SELECT* 3"  (cost=343.76..357.53 rows=918 width=27)
                                                                                      ->  XN HashAggregate  (cost=343.76..348.35 rows=918 width=27)
                                                                                            ->  XN Seq Scan on volt_tt_619994549655f  (cost=0.00..171.88 rows=17188 width=27)
                                      ->  XN Subquery Scan "*SELECT* 4"  (cost=1000000000902.55..1000000000902.59 rows=3 width=48)
                                            ->  XN Limit  (cost=1000000000902.55..1000000000902.56 rows=3 width=48)
                                                  ->  XN Sort  (cost=1000000000902.55..1000000000902.56 rows=3 width=48)
                                                        Sort Key: derived_col1, NULL::integer, NULL::integer, NULL::integer
                                                        ->  XN Unique  (cost=902.47..902.53 rows=3 width=48)
                                                              ->  XN HashAggregate  (cost=902.47..902.48 rows=3 width=48)
                                                                    ->  XN Subquery Scan y  (cost=300.79..902.44 rows=3 width=48)
                                                                          ->  XN Append  (cost=300.79..902.41 rows=3 width=27)
                                                                                ->  XN Subquery Scan "*SELECT* 1"  (cost=300.79..300.80 rows=1 width=25)
                                                                                      ->  XN HashAggregate  (cost=300.79..300.79 rows=1 width=25)
                                                                                            ->  XN Seq Scan on volt_tt_6199945491d15  (cost=0.00..171.88 rows=17188 width=25)
                                                                                ->  XN Subquery Scan "*SELECT* 2"  (cost=300.79..300.80 rows=1 width=27)
                                                                                      ->  XN HashAggregate  (cost=300.79..300.79 rows=1 width=27)
                                                                                            ->  XN Seq Scan on volt_tt_619994548d78c  (cost=0.00..171.88 rows=17188 width=27)
                                                                                ->  XN Subquery Scan "*SELECT* 3"  (cost=300.79..300.80 rows=1 width=23)
                                                                                      ->  XN HashAggregate  (cost=300.79..300.79 rows=1 width=23)
                                                                                            ->  XN Seq Scan on volt_tt_619994549655f  (cost=0.00..171.88 rows=17188 width=23)
                                      ->  XN Network  (cost=773.55..773.56 rows=1 width=16)
                                            Distribute Round Robin
                                            ->  XN Subquery Scan "*SELECT* 5"  (cost=773.55..773.56 rows=1 width=16)
                                                  ->  XN Aggregate  (cost=773.55..773.55 rows=1 width=16)
                                                        ->  XN Subquery Scan y  (cost=257.82..773.53 rows=3 width=16)
                                                              ->  XN Append  (cost=257.82..773.50 rows=3 width=16)
                                                                    ->  XN Subquery Scan "*SELECT* 1"  (cost=257.82..257.83 rows=1 width=16)
                                                                          ->  XN Aggregate  (cost=257.82..257.82 rows=1 width=16)
                                                                                ->  XN Seq Scan on volt_tt_6199945491d15  (cost=0.00..171.88 rows=17188 width=16)
                                                                    ->  XN Subquery Scan "*SELECT* 2"  (cost=257.82..257.83 rows=1 width=16)
                                                                          ->  XN Aggregate  (cost=257.82..257.82 rows=1 width=16)
                                                                                ->  XN Seq Scan on volt_tt_619994548d78c  (cost=0.00..171.88 rows=17188 width=16)
                                                                    ->  XN Subquery Scan "*SELECT* 3"  (cost=257.82..257.83 rows=1 width=16)
                                                                          ->  XN Aggregate  (cost=257.82..257.82 rows=1 width=16)
                                                                                ->  XN Seq Scan on volt_tt_619994549655f  (cost=0.00..171.88 rows=17188 width=16)