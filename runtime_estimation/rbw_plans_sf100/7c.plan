XN CTE Scan on friend_shortest  (cost=434128838355531.19..434128838366546.38 rows=4406082 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..434128838355531.19 rows=4406082 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..25000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=77254721493.66..434128838330531.19 rows=4406081 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=77254721493.66..434128838286470.38 rows=4406081 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=77254721493.66..77287139095.68 rows=2712060802 width=8)
                            ->  XN Hash Join DS_BCAST_INNER  (cost=6145641670.57..33853739606.86 rows=2712060802 width=8)
                                  Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                  ->  XN Nested Loop DS_BCAST_INNER  (cost=6145616542.57..26260890789.01 rows=113726622667 width=8)
                                        Join Filter: (("outer".ss_sales_price < ("inner".ss_sales_price + 25::double precision)) OR ("outer".ss_sales_price > ("inner".ss_sales_price - 25::double precision)))
                                        ->  XN Seq Scan on store_sales  (cost=0.00..36623.00 rows=2929840 width=12)
                                              Filter: (ss_item_sk < 2000)
                                        ->  XN Materialize  (cost=6145616542.57..6145617241.27 rows=69870 width=12)
                                              ->  XN Hash Join DS_BCAST_INNER  (cost=25128.00..6144219072.70 rows=69870 width=12)
                                                    Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                                    ->  XN Seq Scan on store_sales  (cost=0.00..36623.00 rows=2929840 width=12)
                                                          Filter: (ss_item_sk < 2000)
                                                    ->  XN Hash  (cost=25000.00..25000.00 rows=51201 width=4)
                                                          ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=51201 width=4)
                                                                Filter: ((c_birth_country)::text ~~ '%STAN'::text)
                                  ->  XN Hash  (cost=25000.00..25000.00 rows=51201 width=4)
                                        ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=51201 width=4)
                                              Filter: ((c_birth_country)::text ~~ '%STAN'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----