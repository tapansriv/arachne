XN CTE Scan on friend_shortest  (cost=4565076925878035.00..4565076925993871.00 rows=46334588 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..4565076925878035.00 rows=46334588 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..25000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=566385994772.66..4565076925853035.00 rows=46334587 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=566385994772.66..4565076925389689.00 rows=46334587 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=566385994772.66..566726900072.59 rows=28520181893 width=8)
                            ->  XN Hash Join DS_BCAST_INNER  (cost=19929098088.52..109978860821.76 rows=28520181893 width=8)
                                  Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                  ->  XN Nested Loop DS_BCAST_INNER  (cost=19929072673.43..85159252126.71 rows=368795237689 width=8)
                                        Join Filter: (("outer".ss_sales_price < ("inner".ss_sales_price + 5::double precision)) OR ("outer".ss_sales_price > ("inner".ss_sales_price - 5::double precision)))
                                        ->  XN Seq Scan on store_sales  (cost=0.00..36623.00 rows=2929840 width=12)
                                              Filter: (ss_item_sk < 2000)
                                        ->  XN Materialize  (cost=19929072673.43..19929074939.19 rows=226576 width=12)
                                              ->  XN Hash Join DS_BCAST_INNER  (cost=25415.09..19924540926.85 rows=226576 width=12)
                                                    Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                                    ->  XN Seq Scan on store_sales  (cost=0.00..36623.00 rows=2929840 width=12)
                                                          Filter: (ss_item_sk < 2000)
                                                    ->  XN Hash  (cost=25000.00..25000.00 rows=166037 width=4)
                                                          ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=166037 width=4)
                                                                Filter: ((c_last_name)::text ~~ 'M%'::text)
                                  ->  XN Hash  (cost=25000.00..25000.00 rows=166037 width=4)
                                        ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=166037 width=4)
                                              Filter: ((c_last_name)::text ~~ 'M%'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----