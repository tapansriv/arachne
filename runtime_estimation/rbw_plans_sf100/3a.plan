XN CTE Scan on friend_shortest  (cost=1970881104548.20..1970881104586.03 rows=15134 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..1970881104548.20 rows=15134 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..25000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=480171297091.98..1970881079548.19 rows=15133 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=480171297091.98..1970881079396.86 rows=15133 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=480171297091.98..480171390237.08 rows=9314510 width=8)
                            ->  XN Hash Join DS_BCAST_INNER  (cost=71684.38..480022255617.47 rows=9314510 width=8)
                                  Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                  ->  XN Hash Join DS_BCAST_INNER  (cost=46684.38..240021912489.79 rows=9999226 width=8)
                                        Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                        ->  XN Hash Join DS_DIST_NONE  (cost=21684.38..21545976.32 rows=10734276 width=8)
                                              Hash Cond: ("outer".ss_item_sk = "inner".ss_item_sk)
                                              ->  XN Seq Scan on store_sales  (cost=0.00..18070.31 rows=1445626 width=8)
                                                    Filter: (ss_item_sk < 1000)
                                              ->  XN Hash  (cost=18070.31..18070.31 rows=1445626 width=8)
                                                    ->  XN Seq Scan on store_sales  (cost=0.00..18070.31 rows=1445626 width=8)
                                                          Filter: (ss_item_sk < 1000)
                                        ->  XN Hash  (cost=20000.00..20000.00 rows=2000000 width=4)
                                              ->  XN Seq Scan on customer  (cost=0.00..20000.00 rows=2000000 width=4)
                                  ->  XN Hash  (cost=20000.00..20000.00 rows=2000000 width=4)
                                        ->  XN Seq Scan on customer  (cost=0.00..20000.00 rows=2000000 width=4)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----