XN HashAggregate  (cost=222264458.48..222302349.52 rows=1000 width=112)
  Filter: (count(*) > 4)
  ->  XN Hash Join DS_DIST_NONE  (cost=4014.35..222213937.09 rows=5052139 width=112)
        Hash Cond: ("outer".ss_item_sk = "inner".i_item_sk)
        ->  XN Hash Join DS_BCAST_INNER  (cost=1464.35..222039751.06 rows=4821524 width=8)
              Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
              ->  XN Seq Scan on store_sales  (cost=0.00..2879970.24 rows=274408098 width=8)
                    Filter: (ss_sold_date_sk IS NOT NULL)
              ->  XN Hash  (cost=1460.98..1460.98 rows=1348 width=8)
                    ->  XN Seq Scan on date_dim  (cost=0.00..1460.98 rows=1348 width=8)
                          Filter: ((2000 = d_year) OR (2001 = d_year) OR (2002 = d_year) OR (2003 = d_year))
        ->  XN Hash  (cost=2040.00..2040.00 rows=204000 width=108)
              ->  XN Seq Scan on item  (cost=0.00..2040.00 rows=204000 width=108)

XN HashAggregate  (cost=480187076183.17..480187106183.17 rows=1000 width=24)
  Filter: (("max"(tpcds_cmax) * 0.5::double precision) < sum(((ss_quantity)::double precision * ss_sales_price)))
  ->  XN Nested Loop DS_BCAST_INNER  (cost=240168224180.43..480185153007.39 rows=256423437 width=24)
        ->  XN Hash Join DS_BCAST_INNER  (cost=25000.00..240011662854.08 rows=256423437 width=16)
              Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
              ->  XN Seq Scan on store_sales  (cost=0.00..2879970.24 rows=275273310 width=16)
                    Filter: (ss_customer_sk IS NOT NULL)
              ->  XN Hash  (cost=20000.00..20000.00 rows=2000000 width=4)
                    ->  XN Seq Scan on customer  (cost=0.00..20000.00 rows=2000000 width=4)
        ->  XN Materialize  (cost=240168199180.43..240168199180.44 rows=1 width=8)
              ->  XN Subquery Scan max_store_sales  (cost=240168199164.42..240168199164.43 rows=1 width=8)
                    ->  XN Aggregate  (cost=240168199164.42..240168199164.42 rows=1 width=8)
                          ->  XN Subquery Scan sq2  (cost=240168159164.41..240168194164.41 rows=2000000 width=8)
                                ->  XN HashAggregate  (cost=240168159164.41..240168174164.41 rows=2000000 width=16)
                                      ->  XN Hash Join DS_BCAST_INNER  (cost=26464.35..240168137699.75 rows=4292933 width=16)
                                            Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                            ->  XN Hash Join DS_BCAST_INNER  (cost=1464.35..167966078.97 rows=4608509 width=16)
                                                  Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                  ->  XN Seq Scan on store_sales  (cost=0.00..2879970.24 rows=262284743 width=20)
                                                        Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_customer_sk IS NOT NULL))
                                                  ->  XN Hash  (cost=1460.98..1460.98 rows=1348 width=4)
                                                        ->  XN Seq Scan on date_dim  (cost=0.00..1460.98 rows=1348 width=4)
                                                              Filter: ((2000 = d_year) OR (2001 = d_year) OR (2002 = d_year) OR (2003 = d_year))
                                            ->  XN Hash  (cost=20000.00..20000.00 rows=2000000 width=4)
                                                  ->  XN Seq Scan on customer  (cost=0.00..20000.00 rows=2000000 width=4)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----

XN Subquery Scan sq3  (cost=3024174046470.04..3024174046471.29 rows=100 width=72)
  ->  XN Limit  (cost=3024174046470.04..3024174046470.29 rows=100 width=31)
        ->  XN Merge  (cost=3024174046470.04..3024174046470.54 rows=200 width=31)
              Merge Key: c_last_name, c_first_name, sales
              ->  XN Network  (cost=3024174046470.04..3024174046470.54 rows=200 width=31)
                    Send to leader
                    ->  XN Sort  (cost=3024174046470.04..3024174046470.54 rows=200 width=31)
                          Sort Key: c_last_name, c_first_name, sales
                          ->  XN Append  (cost=1015743264808.35..2024174046462.40 rows=200 width=31)
                                ->  XN Subquery Scan "*SELECT* 1"  (cost=1015743264808.35..1015743264809.60 rows=100 width=31)
                                      ->  XN Limit  (cost=1015743264808.35..1015743264808.60 rows=100 width=31)
                                            ->  XN Sort  (cost=1015743264808.35..1015743265308.35 rows=200000 width=31)
                                                  Sort Key: customer.c_last_name, customer.c_first_name, sum((catalog_sales.cs_list_price * (catalog_sales.cs_quantity)::double precision))
                                                  ->  XN HashAggregate  (cost=15743245698.70..15743247198.70 rows=200000 width=31)
                                                        ->  XN Hash Join DS_BCAST_INNER  (cost=8842171110.58..15743242803.07 rows=386084 width=31)
                                                              Hash Cond: ("outer".i_item_sk = "inner".cs_item_sk)
                                                              ->  XN Seq Scan on volt_tt_618e62a9cceb6  (cost=0.00..47925.18 rows=4792518 width=4)
                                                              ->  XN Hash  (cost=8842171071.37..8842171071.37 rows=15684 width=35)
                                                                    ->  XN Hash Join DS_BCAST_INNER  (cost=3665165914.52..8842171071.37 rows=15684 width=35)
                                                                          Hash Cond: ("outer".c_customer_sk = "inner".cs_bill_customer_sk)
                                                                          ->  XN Seq Scan on customer  (cost=0.00..20000.00 rows=2000000 width=23)
                                                                          ->  XN Hash  (cost=3665165874.07..3665165874.07 rows=16178 width=24)
                                                                                ->  XN Hash Join DS_DIST_INNER  (cost=6461354.69..3665165874.07 rows=16178 width=24)
                                                                                      Inner Dist Key: catalog_sales.cs_bill_customer_sk
                                                                                      Hash Cond: ("outer".c_customer_sk = "inner".cs_bill_customer_sk)
                                                                                      ->  XN Seq Scan on volt_tt_618e62a9cec22  (cost=0.00..6381.16 rows=638116 width=4)
                                                                                      ->  XN Hash  (cost=6461224.02..6461224.02 rows=52267 width=20)
                                                                                            ->  XN Hash Join DS_BCAST_INNER  (cost=1095.80..6461224.02 rows=52267 width=20)
                                                                                                  Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                                                                                                  ->  XN Seq Scan on catalog_sales  (cost=0.00..1439970.72 rows=142370786 width=24)
                                                                                                        Filter: ((cs_sold_date_sk IS NOT NULL) AND (cs_bill_customer_sk IS NOT NULL))
                                                                                                  ->  XN Hash  (cost=1095.73..1095.73 rows=27 width=4)
                                                                                                        ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=27 width=4)
                                                                                                              Filter: ((d_year = 2000) AND (d_moy = 2))
                                ->  XN Subquery Scan "*SELECT* 2"  (cost=1008430781651.55..1008430781652.80 rows=100 width=31)
                                      ->  XN Limit  (cost=1008430781651.55..1008430781651.80 rows=100 width=31)
                                            ->  XN Sort  (cost=1008430781651.55..1008430782151.55 rows=200000 width=31)
                                                  Sort Key: customer.c_last_name, customer.c_first_name, sum((web_sales.ws_list_price * (web_sales.ws_quantity)::double precision))
                                                  ->  XN HashAggregate  (cost=8430762541.91..8430764041.91 rows=200000 width=31)
                                                        ->  XN Hash Join DS_BCAST_INNER  (cost=4671731030.09..8430760964.72 rows=210292 width=31)
                                                              Hash Cond: ("outer".i_item_sk = "inner".ws_item_sk)
                                                              ->  XN Seq Scan on volt_tt_618e62a9cceb6  (cost=0.00..47925.18 rows=4792518 width=4)
                                                              ->  XN Hash  (cost=4671731008.73..4671731008.73 rows=8543 width=35)
                                                                    ->  XN Hash Join DS_BCAST_INNER  (cost=1866245923.30..4671731008.73 rows=8543 width=35)
                                                                          Hash Cond: ("outer".c_customer_sk = "inner".ws_bill_customer_sk)
                                                                          ->  XN Seq Scan on customer  (cost=0.00..20000.00 rows=2000000 width=23)
                                                                          ->  XN Hash  (cost=1866245901.38..1866245901.38 rows=8767 width=24)
                                                                                ->  XN Hash Join DS_DIST_INNER  (cost=4861456.09..1866245901.38 rows=8767 width=24)
                                                                                      Inner Dist Key: web_sales.ws_bill_customer_sk
                                                                                      Hash Cond: ("outer".c_customer_sk = "inner".ws_bill_customer_sk)
                                                                                      ->  XN Seq Scan on volt_tt_618e62a9cec22  (cost=0.00..6381.16 rows=638116 width=4)
                                                                                      ->  XN Hash  (cost=4861389.61..4861389.61 rows=26591 width=20)
                                                                                            ->  XN Hash Join DS_BCAST_INNER  (cost=1095.80..4861389.61 rows=26591 width=20)
                                                                                                  Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                                                                                                  ->  XN Seq Scan on web_sales  (cost=0.00..720012.40 rows=72001240 width=24)
                                                                                                  ->  XN Hash  (cost=1095.73..1095.73 rows=27 width=4)
                                                                                                        ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=27 width=4)
                                                                                                              Filter: ((d_year = 2000) AND (d_moy = 2))