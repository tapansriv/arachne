XN Limit  (cost=1000641374621.96..1000641374622.21 rows=100 width=39)
  ->  XN Merge  (cost=1000641374621.96..1000641374637.65 rows=6275 width=39)
        Merge Key: customer.c_customer_id
        ->  XN Network  (cost=1000641374621.96..1000641374637.65 rows=6275 width=39)
              Send to leader
              ->  XN Sort  (cost=1000641374621.96..1000641374637.65 rows=6275 width=39)
                    Sort Key: customer.c_customer_id
                    ->  XN Hash Join DS_BCAST_INNER  (cost=371379191.88..641374226.15 rows=6275 width=39)
                          Hash Cond: ("outer".sr_cdemo_sk = "inner".c_current_cdemo_sk)
                          ->  XN Seq Scan on store_returns  (cost=0.00..287950.80 rows=27759148 width=4)
                                Filter: (sr_cdemo_sk IS NOT NULL)
                          ->  XN Hash  (cost=371379190.67..371379190.67 rows=481 width=47)
                                ->  XN Hash Join DS_DIST_INNER  (cost=304515967.85..371379190.67 rows=481 width=47)
                                      Inner Dist Key: customer.c_current_cdemo_sk
                                      Hash Cond: ("outer".cd_demo_sk = "inner".c_current_cdemo_sk)
                                      ->  XN Seq Scan on customer_demographics  (cost=0.00..19208.00 rows=1920800 width=4)
                                      ->  XN Hash  (cost=304515966.57..304515966.57 rows=514 width=43)
                                            ->  XN Hash Join DS_BCAST_INNER  (cost=96895766.40..304515966.57 rows=514 width=43)
                                                  Hash Cond: ("outer".hd_income_band_sk = "inner".ib_income_band_sk)
                                                  ->  XN Hash Join DS_DIST_INNER  (cost=96895766.08..303675942.76 rows=1468 width=47)
                                                        Inner Dist Key: customer.c_current_hdemo_sk
                                                        Hash Cond: ("outer".hd_demo_sk = "inner".c_current_hdemo_sk)
                                                        ->  XN Seq Scan on household_demographics  (cost=0.00..72.00 rows=7200 width=8)
                                                        ->  XN Hash  (cost=96895762.39..96895762.39 rows=1477 width=47)
                                                              ->  XN Hash Join DS_BCAST_INNER  (cost=12502.02..96895762.39 rows=1477 width=47)
                                                                    Hash Cond: ("outer".c_current_addr_sk = "inner".ca_address_sk)
                                                                    ->  XN Seq Scan on customer  (cost=0.00..20000.00 rows=1859648 width=51)
                                                                          Filter: ((c_current_hdemo_sk IS NOT NULL) AND (c_current_cdemo_sk IS NOT NULL))
                                                                    ->  XN Hash  (cost=12500.00..12500.00 rows=807 width=4)
                                                                          ->  XN Seq Scan on customer_address  (cost=0.00..12500.00 rows=807 width=4)
                                                                                Filter: ((ca_city)::text = 'Edgewood'::text)
                                                  ->  XN Hash  (cost=0.30..0.30 rows=7 width=4)
                                                        ->  XN Seq Scan on income_band  (cost=0.00..0.30 rows=7 width=4)
                                                              Filter: ((ib_upper_bound <= 88128) AND (ib_lower_bound >= 38128))