XN Subquery Scan tmp1  (cost=1000122712150.71..1000122712150.93 rows=3 width=10)
  Filter: (col1 <= 5)
  ->  XN Window  (cost=1000122712150.71..1000122712150.82 rows=9 width=14)
        Partition: store.s_state
        Order: sum(store_sales.ss_net_profit)
        ->  XN Sort  (cost=1000122712150.71..1000122712150.73 rows=9 width=14)
              Sort Key: store.s_state, sum(store_sales.ss_net_profit)
              ->  XN HashAggregate  (cost=122712150.54..122712150.57 rows=9 width=14)
                    ->  XN Hash Join DS_BCAST_INNER  (cost=1101.51..122707400.74 rows=949961 width=14)
                          Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=1096.49..42285051.98 rows=1027530 width=12)
                                Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                ->  XN Seq Scan on store_sales  (cost=0.00..2879970.24 rows=261896796 width=16)
                                      Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                ->  XN Hash  (cost=1095.73..1095.73 rows=301 width=4)
                                      ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=301 width=4)
                                            Filter: ((d_month_seq >= 1200) AND (d_month_seq <= 1211))
                          ->  XN Hash  (cost=4.02..4.02 rows=402 width=10)
                                ->  XN Seq Scan on store  (cost=0.00..4.02 rows=402 width=10)

XN Limit  (cost=2000376532027.09..2000376532027.21 rows=51 width=80)
  ->  XN Merge  (cost=2000376532027.09..2000376532027.21 rows=51 width=80)
        Merge Key: lochierarchy, CASE WHEN (lochierarchy = 0) THEN s_state ELSE NULL::character varying END, pg_catalog.rank()
        ->  XN Network  (cost=2000376532027.09..2000376532027.21 rows=51 width=80)
              Send to leader
              ->  XN Sort  (cost=2000376532027.09..2000376532027.21 rows=51 width=80)
                    Sort Key: lochierarchy, CASE WHEN (lochierarchy = 0) THEN s_state ELSE NULL::character varying END, pg_catalog.rank()
                    ->  XN Window  (cost=1000376532024.36..1000376532025.64 rows=51 width=80)
                          Partition: lochierarchy, CASE WHEN (g_county = 0) THEN s_state ELSE NULL::character varying END
                          Order: total_sum
                          ->  XN Sort  (cost=1000376532024.36..1000376532024.49 rows=51 width=80)
                                Sort Key: lochierarchy, CASE WHEN (g_county = 0) THEN s_state ELSE NULL::character varying END, total_sum
                                ->  XN Network  (cost=173512800.45..376532022.92 rows=51 width=80)
                                      Distribute
                                      ->  XN Subquery Scan results_rollup  (cost=173512800.45..376532022.92 rows=51 width=80)
                                            ->  XN Unique  (cost=173512800.45..376532022.41 rows=51 width=32)
                                                  ->  XN Append  (cost=173512800.45..376532021.64 rows=51 width=32)
                                                        ->  XN Subquery Scan "*SELECT* 1"  (cost=173512800.45..173512800.96 rows=41 width=32)
                                                              ->  XN HashAggregate  (cost=173512800.45..173512800.55 rows=41 width=32)
                                                                    ->  XN Hash Join DS_BCAST_INNER  (cost=1601113.37..173506420.11 rows=850712 width=32)
                                                                          Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                                                          ->  XN Hash Join DS_BCAST_INNER  (cost=1096.49..42285051.98 rows=1027530 width=12)
                                                                                Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                                ->  XN Seq Scan on store_sales  (cost=0.00..2879970.24 rows=261896796 width=16)
                                                                                      Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                                                ->  XN Hash  (cost=1095.73..1095.73 rows=301 width=4)
                                                                                      ->  XN Seq Scan on date_dim d1  (cost=0.00..1095.73 rows=301 width=4)
                                                                                            Filter: ((d_month_seq >= 1200) AND (d_month_seq <= 1211))
                                                                          ->  XN Hash  (cost=1600015.99..1600015.99 rows=360 width=28)
                                                                                ->  XN Hash IN Join DS_BCAST_INNER  (cost=0.12..1600015.99 rows=360 width=28)
                                                                                      Hash Cond: (("outer".s_state)::text = ("inner".s_state)::text)
                                                                                      ->  XN Seq Scan on store  (cost=0.00..4.02 rows=402 width=28)
                                                                                      ->  XN Hash  (cost=0.10..0.10 rows=10 width=6)
                                                                                            ->  XN Seq Scan on volt_tt_618e6333dba25  (cost=0.00..0.10 rows=10 width=6)
                                                        ->  XN Subquery Scan "*SELECT* 2"  (cost=115910673.67..115910673.78 rows=9 width=14)
                                                              ->  XN HashAggregate  (cost=115910673.67..115910673.69 rows=9 width=14)
                                                                    ->  XN Hash Join DS_BCAST_INNER  (cost=1601113.37..115906420.11 rows=850712 width=14)
                                                                          Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                                                          ->  XN Hash Join DS_BCAST_INNER  (cost=1096.49..42285051.98 rows=1027530 width=12)
                                                                                Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                                ->  XN Seq Scan on store_sales  (cost=0.00..2879970.24 rows=261896796 width=16)
                                                                                      Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                                                ->  XN Hash  (cost=1095.73..1095.73 rows=301 width=4)
                                                                                      ->  XN Seq Scan on date_dim d1  (cost=0.00..1095.73 rows=301 width=4)
                                                                                            Filter: ((d_month_seq >= 1200) AND (d_month_seq <= 1211))
                                                                          ->  XN Hash  (cost=1600015.99..1600015.99 rows=360 width=10)
                                                                                ->  XN Hash IN Join DS_BCAST_INNER  (cost=0.12..1600015.99 rows=360 width=10)
                                                                                      Hash Cond: (("outer".s_state)::text = ("inner".s_state)::text)
                                                                                      ->  XN Seq Scan on store  (cost=0.00..4.02 rows=402 width=10)
                                                                                      ->  XN Hash  (cost=0.10..0.10 rows=10 width=6)
                                                                                            ->  XN Seq Scan on volt_tt_618e6333dba25  (cost=0.00..0.10 rows=10 width=6)
                                                        ->  XN Network  (cost=87108546.89..87108546.90 rows=1 width=8)
                                                              Distribute Round Robin
                                                              ->  XN Subquery Scan "*SELECT* 3"  (cost=87108546.89..87108546.90 rows=1 width=8)
                                                                    ->  XN Aggregate  (cost=87108546.89..87108546.89 rows=1 width=8)
                                                                          ->  XN Hash Join DS_BCAST_INNER  (cost=1601113.37..87106420.11 rows=850712 width=8)
                                                                                Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                                                                ->  XN Hash Join DS_BCAST_INNER  (cost=1096.49..42285051.98 rows=1027530 width=12)
                                                                                      Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                                      ->  XN Seq Scan on store_sales  (cost=0.00..2879970.24 rows=261896796 width=16)
                                                                                            Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                                                      ->  XN Hash  (cost=1095.73..1095.73 rows=301 width=4)
                                                                                            ->  XN Seq Scan on date_dim d1  (cost=0.00..1095.73 rows=301 width=4)
                                                                                                  Filter: ((d_month_seq >= 1200) AND (d_month_seq <= 1211))
                                                                                ->  XN Hash  (cost=1600015.99..1600015.99 rows=360 width=4)
                                                                                      ->  XN Hash IN Join DS_BCAST_INNER  (cost=0.12..1600015.99 rows=360 width=4)
                                                                                            Hash Cond: (("outer".s_state)::text = ("inner".s_state)::text)
                                                                                            ->  XN Seq Scan on store  (cost=0.00..4.02 rows=402 width=10)
                                                                                            ->  XN Hash  (cost=0.10..0.10 rows=10 width=6)
                                                                                                  ->  XN Seq Scan on volt_tt_618e6333dba25  (cost=0.00..0.10 rows=10 width=6)