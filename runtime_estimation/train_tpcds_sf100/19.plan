XN Limit  (cost=1000722063230.66..1000722063230.91 rows=100 width=51)
  ->  XN Merge  (cost=1000722063230.66..1000722063231.06 rows=160 width=51)
        Merge Key: sum(store_sales.ss_ext_sales_price), item.i_brand, item.i_brand_id, item.i_manufact_id, item.i_manufact
        ->  XN Network  (cost=1000722063230.66..1000722063231.06 rows=160 width=51)
              Send to leader
              ->  XN Sort  (cost=1000722063230.66..1000722063231.06 rows=160 width=51)
                    Sort Key: sum(store_sales.ss_ext_sales_price), item.i_brand, item.i_brand_id, item.i_manufact_id, item.i_manufact
                    ->  XN HashAggregate  (cost=722063224.40..722063224.80 rows=160 width=51)
                          ->  XN Hash Join DS_DIST_INNER  (cost=605580705.34..722063216.49 rows=633 width=51)
                                Inner Dist Key: customer.c_current_addr_sk
                                Hash Cond: ("outer".ca_address_sk = "inner".c_current_addr_sk)
                                Join Filter: ("substring"(("outer".ca_zip)::text, 1, 5) <> "substring"(("inner".s_zip)::text, 1, 5))
                                ->  XN Seq Scan on customer_address  (cost=0.00..10000.00 rows=1000000 width=13)
                                ->  XN Hash  (cost=605580703.73..605580703.73 rows=647 width=64)
                                      ->  XN Hash Join DS_BCAST_INNER  (cost=105855697.25..605580703.73 rows=647 width=64)
                                            Hash Cond: ("outer".c_customer_sk = "inner".ss_customer_sk)
                                            ->  XN Seq Scan on customer  (cost=0.00..20000.00 rows=2000000 width=8)
                                            ->  XN Hash  (cost=105855695.52..105855695.52 rows=694 width=64)
                                                  ->  XN Hash Join DS_BCAST_INNER  (cost=3654.82..105855695.52 rows=694 width=64)
                                                        Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                                        ->  XN Hash Join DS_DIST_NONE  (cost=3649.80..9375674.18 rows=750 width=59)
                                                              Hash Cond: ("outer".ss_item_sk = "inner".i_item_sk)
                                                              ->  XN Hash Join DS_BCAST_INNER  (cost=1095.80..9371057.04 rows=91362 width=20)
                                                                    Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                    ->  XN Seq Scan on store_sales  (cost=0.00..2879970.24 rows=250326190 width=24)
                                                                          Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL) AND (ss_customer_sk IS NOT NULL))
                                                                    ->  XN Hash  (cost=1095.73..1095.73 rows=28 width=4)
                                                                          ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=28 width=4)
                                                                                Filter: ((d_year = 1998) AND (d_moy = 11))
                                                              ->  XN Hash  (cost=2550.00..2550.00 rows=1598 width=47)
                                                                    ->  XN Seq Scan on item  (cost=0.00..2550.00 rows=1598 width=47)
                                                                          Filter: (i_manager_id = 8)
                                                        ->  XN Hash  (cost=4.02..4.02 rows=402 width=13)
                                                              ->  XN Seq Scan on store  (cost=0.00..4.02 rows=402 width=13)