XN Limit  (cost=1000215434068.27..1000215434068.30 rows=11 width=4)
  ->  XN Merge  (cost=1000215434068.27..1000215434068.30 rows=11 width=4)
        Merge Key: segment, count(*), (segment * 50)
        ->  XN Network  (cost=1000215434068.27..1000215434068.30 rows=11 width=4)
              Send to leader
              ->  XN Sort  (cost=1000215434068.27..1000215434068.30 rows=11 width=4)
                    Sort Key: segment, count(*), (segment * 50)
                    ->  XN HashAggregate  (cost=215434068.02..215434068.08 rows=11 width=4)
                          ->  XN Subquery Scan segments  (cost=215434067.75..215434067.97 rows=11 width=4)
                                ->  XN HashAggregate  (cost=215434067.75..215434067.86 rows=11 width=12)
                                      InitPlan
                                        ->  XN Unique  (cost=0.00..1095.88 rows=1 width=4)
                                              ->  XN Seq Scan on date_dim  (cost=0.00..1095.81 rows=29 width=4)
                                                    Filter: ((d_year = 1998) AND (d_moy = 12))
                                        ->  XN Unique  (cost=0.00..1095.88 rows=1 width=4)
                                              ->  XN Seq Scan on date_dim  (cost=0.00..1095.81 rows=29 width=4)
                                                    Filter: ((d_year = 1998) AND (d_moy = 12))
                                      ->  XN Hash Join DS_BCAST_INNER  (cost=163152679.95..215431875.93 rows=11 width=12)
                                            Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                            ->  XN Hash Join DS_BCAST_INNER  (cost=1096.65..50092138.90 rows=1251272 width=12)
                                                  Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                  ->  XN Seq Scan on store_sales  (cost=0.00..2879970.24 rows=262284743 width=16)
                                                        Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_customer_sk IS NOT NULL))
                                                  ->  XN Hash  (cost=1095.73..1095.73 rows=366 width=4)
                                                        ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=366 width=4)
                                                              Filter: ((d_month_seq <= $0) AND (d_month_seq >= $1))
                                            ->  XN Hash  (cost=163151583.26..163151583.26 rows=18 width=4)
                                                  ->  XN Hash Join DS_DIST_BOTH  (cost=112581553.43..163151583.26 rows=18 width=4)
                                                        Outer Dist Key: store.s_county
                                                        Inner Dist Key: customer_address.ca_county
                                                        Hash Cond: ((("outer".s_county)::text = ("inner".ca_county)::text) AND (("outer".s_state)::text = ("inner".ca_state)::text))
                                                        ->  XN Seq Scan on store  (cost=0.00..4.02 rows=397 width=24)
                                                              Filter: ((s_county IS NOT NULL) AND (s_state IS NOT NULL))
                                                        ->  XN Hash  (cost=112581552.38..112581552.38 rows=209 width=27)
                                                              ->  XN Hash Join DS_DIST_INNER  (cost=103391879.41..112581552.38 rows=209 width=27)
                                                                    Inner Dist Key: my_customers.c_current_addr_sk
                                                                    Hash Cond: ("outer".ca_address_sk = "inner".c_current_addr_sk)
                                                                    ->  XN Seq Scan on customer_address  (cost=0.00..10000.00 rows=944821 width=27)
                                                                          Filter: ((ca_county IS NOT NULL) AND (ca_state IS NOT NULL))
                                                                    ->  XN Hash  (cost=103391878.85..103391878.85 rows=224 width=8)
                                                                          ->  XN Subquery Scan my_customers  (cost=75306873.24..103391878.85 rows=224 width=8)
                                                                                ->  XN Unique  (cost=75306873.24..103391876.61 rows=224 width=8)
                                                                                      ->  XN Hash Join DS_BCAST_INNER  (cost=75306873.24..103391875.49 rows=224 width=8)
                                                                                            Hash Cond: ("outer".c_customer_sk = "inner".customer_sk)
                                                                                            ->  XN Seq Scan on customer  (cost=0.00..20000.00 rows=2000000 width=8)
                                                                                            ->  XN Hash  (cost=75306872.66..75306872.66 rows=230 width=4)
                                                                                                  ->  XN Hash Join DS_BCAST_INNER  (cost=4157.11..75306872.66 rows=230 width=4)
                                                                                                        Hash Cond: ("outer".item_sk = "inner".i_item_sk)
                                                                                                        ->  XN Hash Join DS_BCAST_INNER  (cost=1095.81..12661880.99 rows=85692 width=8)
                                                                                                              Hash Cond: ("outer".sold_date_sk = "inner".d_date_sk)
                                                                                                              ->  XN Subquery Scan cs_or_ws_sales  (cost=0.00..6479949.36 rows=215998312 width=12)
                                                                                                                    ->  XN Multi Scan  (cost=0.00..4319966.24 rows=215998312 width=12)
                                                                                                                          ->  XN Seq Scan on catalog_sales  (cost=0.00..1439970.72 rows=143997072 width=12)
                                                                                                                          ->  XN Seq Scan on web_sales  (cost=0.00..720012.40 rows=72001240 width=12)
                                                                                                              ->  XN Hash  (cost=1095.73..1095.73 rows=29 width=4)
                                                                                                                    ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=29 width=4)
                                                                                                                          Filter: ((d_year = 1998) AND (d_moy = 12))
                                                                                                        ->  XN Hash  (cost=3060.00..3060.00 rows=522 width=4)
                                                                                                              ->  XN Seq Scan on item  (cost=0.00..3060.00 rows=522 width=4)
                                                                                                                    Filter: (((i_class)::text = 'maternity'::text) AND ((i_category)::text = 'Women'::text))