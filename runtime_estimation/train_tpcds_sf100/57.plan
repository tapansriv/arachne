XN Window  (cost=1000092365136.43..1000092383135.89 rows=799976 width=62)
  Partition: item.i_category, item.i_brand, call_center.cc_name
  Order: date_dim.d_year, date_dim.d_moy
  ->  XN Sort  (cost=1000092365136.43..1000092367136.37 rows=799976 width=62)
        Sort Key: item.i_category, item.i_brand, call_center.cc_name, date_dim.d_year, date_dim.d_moy
        ->  XN Network  (cost=92284700.45..92286700.39 rows=799976 width=62)
              Distribute
              ->  XN HashAggregate  (cost=92284700.45..92286700.39 rows=799976 width=62)
                    ->  XN Hash Join DS_DIST_NONE  (cost=4194.97..92272700.81 rows=799976 width=62)
                          Hash Cond: ("outer".cs_item_sk = "inner".i_item_sk)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=1644.97..92244973.23 rows=763459 width=37)
                                Hash Cond: ("outer".cs_call_center_sk = "inner".cc_call_center_sk)
                                ->  XN Hash Join DS_BCAST_INNER  (cost=1644.60..82627738.25 rows=768000 width=24)
                                      Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                                      ->  XN Seq Scan on catalog_sales  (cost=0.00..1439970.72 rows=142275435 width=20)
                                            Filter: ((cs_sold_date_sk IS NOT NULL) AND (cs_call_center_sk IS NOT NULL))
                                      ->  XN Hash  (cost=1643.60..1643.60 rows=397 width=12)
                                            ->  XN Seq Scan on date_dim  (cost=0.00..1643.60 rows=397 width=12)
                                                  Filter: ((1999 = d_year) OR ((2000 = d_year) AND (1 = d_moy)) OR ((1998 = d_year) AND (12 = d_moy)))
                                ->  XN Hash  (cost=0.30..0.30 rows=30 width=21)
                                      ->  XN Seq Scan on call_center  (cost=0.00..0.30 rows=30 width=21)
                          ->  XN Hash  (cost=2040.00..2040.00 rows=204000 width=33)
                                ->  XN Seq Scan on item  (cost=0.00..2040.00 rows=204000 width=33)

XN Limit  (cost=3001793520995.44..3001793520995.54 rows=41 width=319)
  ->  XN Merge  (cost=3001793520995.44..3001793520995.54 rows=41 width=319)
        Merge Key: (v1.sum_sales - v1.avg_monthly_sales), v1.i_category, v1.i_brand, v1.cc_name, v1.d_year, v1.d_moy, v1.avg_monthly_sales, v1.sum_sales, volt_tt_618e62fd2bddf.col3, volt_dt_0.col3
        ->  XN Network  (cost=3001793520995.44..3001793520995.54 rows=41 width=319)
              Send to leader
              ->  XN Sort  (cost=3001793520995.44..3001793520995.54 rows=41 width=319)
                    Sort Key: (v1.sum_sales - v1.avg_monthly_sales), v1.i_category, v1.i_brand, v1.cc_name, v1.d_year, v1.d_moy, v1.avg_monthly_sales, v1.sum_sales, volt_tt_618e62fd2bddf.col3, volt_dt_0.col3
                    ->  XN Hash Join DS_BCAST_INNER  (cost=2001516958334.03..2001793520994.34 rows=41 width=319)
                          Hash Cond: ((("outer".i_brand)::text = ("inner".i_brand)::text) AND (("outer".i_category)::text = ("inner".i_category)::text) AND (("outer".cc_name)::text = ("inner".cc_name)::text) AND (("outer".col4 + 1) = "inner".rn))
                          ->  XN Seq Scan on volt_tt_618e62fd2bddf  (cost=0.00..1968.10 rows=196810 width=64)
                          ->  XN Hash  (cost=2001516958333.31..2001516958333.31 rows=72 width=375)
                                ->  XN Hash Join DS_BCAST_INNER  (cost=2000092511574.60..2001516958333.31 rows=72 width=375)
                                      Hash Cond: ((("outer".i_brand)::text = ("inner".i_brand)::text) AND (("outer".i_category)::text = ("inner".i_category)::text) AND (("outer".cc_name)::text = ("inner".cc_name)::text) AND (("outer".col4 - 1) = "inner".rn))
                                      ->  XN Seq Scan on volt_tt_618e62fd2bddf volt_dt_0  (cost=0.00..1968.10 rows=196810 width=64)
                                      ->  XN Hash  (cost=2000092511570.15..2000092511570.15 rows=445 width=311)
                                            ->  XN Subquery Scan v1  (cost=2000092467571.52..2000092511570.15 rows=445 width=311)
                                                  Filter: ((d_year = 1999) AND (avg_monthly_sales > 0::double precision) AND (CASE WHEN (avg_monthly_sales > 0::double precision) THEN (abs((sum_sales - avg_monthly_sales)) / avg_monthly_sales) ELSE NULL::double precision END > 0.10000000000000001::double precision))
                                                  ->  XN Window  (cost=2000092467571.52..2000092489570.83 rows=799975 width=62)
                                                        Partition: item.i_category, item.i_brand, call_center.cc_name
                                                        Order: date_dim.d_year, date_dim.d_moy
                                                        ->  XN Sort  (cost=2000092467571.52..2000092469571.46 rows=799975 width=62)
                                                              Sort Key: item.i_category, item.i_brand, call_center.cc_name, date_dim.d_year, date_dim.d_moy
                                                              ->  XN Network  (cost=1000092369136.22..1000092389135.59 rows=799975 width=62)
                                                                    Distribute
                                                                    ->  XN Window  (cost=1000092369136.22..1000092389135.59 rows=799975 width=62)
                                                                          Partition: item.i_category, item.i_brand, call_center.cc_name, date_dim.d_year
                                                                          ->  XN Sort  (cost=1000092369136.22..1000092371136.15 rows=799975 width=62)
                                                                                Sort Key: item.i_category, item.i_brand, call_center.cc_name, date_dim.d_year
                                                                                ->  XN Network  (cost=92286700.41..92290700.28 rows=799975 width=62)
                                                                                      Distribute
                                                                                      ->  XN HashAggregate  (cost=92286700.41..92290700.28 rows=799975 width=62)
                                                                                            ->  XN Hash Join DS_DIST_NONE  (cost=4194.97..92272700.85 rows=799975 width=62)
                                                                                                  Hash Cond: ("outer".cs_item_sk = "inner".i_item_sk)
                                                                                                  ->  XN Hash Join DS_BCAST_INNER  (cost=1644.97..92244973.23 rows=763460 width=37)
                                                                                                        Hash Cond: ("outer".cs_call_center_sk = "inner".cc_call_center_sk)
                                                                                                        ->  XN Hash Join DS_BCAST_INNER  (cost=1644.60..82627738.25 rows=768000 width=24)
                                                                                                              Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                                                                                                              ->  XN Seq Scan on catalog_sales  (cost=0.00..1439970.72 rows=142275435 width=20)
                                                                                                                    Filter: ((cs_sold_date_sk IS NOT NULL) AND (cs_call_center_sk IS NOT NULL))
                                                                                                              ->  XN Hash  (cost=1643.60..1643.60 rows=397 width=12)
                                                                                                                    ->  XN Seq Scan on date_dim  (cost=0.00..1643.60 rows=397 width=12)
                                                                                                                          Filter: ((d_year = 1999) OR ((d_year = 2000) AND (d_moy = 1)) OR ((d_year = 1998) AND (d_moy = 12)))
                                                                                                        ->  XN Hash  (cost=0.30..0.30 rows=30 width=21)
                                                                                                              ->  XN Seq Scan on call_center  (cost=0.00..0.30 rows=30 width=21)
                                                                                                  ->  XN Hash  (cost=2040.00..2040.00 rows=204000 width=33)
                                                                                                        ->  XN Seq Scan on item  (cost=0.00..2040.00 rows=204000 width=33)