XN Limit  (cost=1000965890665.07..1000965890665.32 rows=100 width=36)
  ->  XN Merge  (cost=1000965890665.07..1000965890665.91 rows=335 width=36)
        Merge Key: dt.d_year, sum(store_sales.ss_ext_sales_price), item.i_brand_id
        ->  XN Network  (cost=1000965890665.07..1000965890665.91 rows=335 width=36)
              Send to leader
              ->  XN Sort  (cost=1000965890665.07..1000965890665.91 rows=335 width=36)
                    Sort Key: dt.d_year, sum(store_sales.ss_ext_sales_price), item.i_brand_id
                    ->  XN HashAggregate  (cost=965890650.19..965890651.02 rows=335 width=36)
                          ->  XN Hash Join DS_DIST_NONE  (cost=3478.59..965890431.08 rows=21911 width=36)
                                Hash Cond: ("outer".ss_item_sk = "inner".i_item_sk)
                                ->  XN Hash Join DS_BCAST_INNER  (cost=928.10..965405357.07 rows=21435751 width=16)
                                      Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                      ->  XN Seq Scan on store_sales  (cost=0.00..2879970.24 rows=274408098 width=16)
                                            Filter: (ss_sold_date_sk IS NOT NULL)
                                      ->  XN Hash  (cost=913.11..913.11 rows=5993 width=8)
                                            ->  XN Seq Scan on date_dim dt  (cost=0.00..913.11 rows=5993 width=8)
                                                  Filter: (d_moy = 11)
                                ->  XN Hash  (cost=2550.00..2550.00 rows=199 width=28)
                                      ->  XN Seq Scan on item  (cost=0.00..2550.00 rows=199 width=28)
                                            Filter: (i_manufact_id = 128)