XN HashAggregate  (cost=6696825235.52..6696825489.81 rows=20343 width=52)
  ->  XN Hash Join DS_BCAST_INNER  (cost=220464.34..6696824735.41 rows=50011 width=52)
        Hash Cond: ("outer".cs_catalog_page_sk = "inner".cp_catalog_page_sk)
        ->  XN Hash Join DS_DIST_NONE  (cost=220209.34..168822900.20 rows=48004 width=36)
              Hash Cond: ("outer".cs_item_sk = "inner".i_item_sk)
              ->  XN Hash Join DS_BCAST_INNER  (cost=217176.37..168818298.72 rows=48377 width=40)
                    Hash Cond: ("outer".cs_promo_sk = "inner".p_promo_sk)
                    ->  XN Hash Join DS_BCAST_INNER  (cost=217161.41..50376698.65 rows=48948 width=44)
                          Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                          ->  XN Hash Left Join DS_DIST_NONE  (cost=216065.61..45575149.97 rows=143997072 width=48)
                                Hash Cond: (("outer".cs_order_number = "inner".cr_order_number) AND ("outer".cs_item_sk = "inner".cr_item_sk))
                                ->  XN Seq Scan on catalog_sales  (cost=0.00..1439970.72 rows=143997072 width=36)
                                ->  XN Hash  (cost=144043.74..144043.74 rows=14404374 width=24)
                                      ->  XN Seq Scan on catalog_returns  (cost=0.00..144043.74 rows=14404374 width=24)
                          ->  XN Hash  (cost=1095.73..1095.73 rows=25 width=4)
                                ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=25 width=4)
                                      Filter: ((d_date >= '2000-08-23'::date) AND (d_date <= '2000-09-22'::date))
                    ->  XN Hash  (cost=12.50..12.50 rows=987 width=4)
                          ->  XN Seq Scan on promotion  (cost=0.00..12.50 rows=987 width=4)
                                Filter: ('N'::text = (p_channel_tv)::text)
              ->  XN Hash  (cost=2550.00..2550.00 rows=193185 width=4)
                    ->  XN Seq Scan on item  (cost=0.00..2550.00 rows=193185 width=4)
                          Filter: (i_current_price > 50::double precision)
        ->  XN Hash  (cost=204.00..204.00 rows=20400 width=24)
              ->  XN Seq Scan on catalog_page  (cost=0.00..204.00 rows=20400 width=24)

XN HashAggregate  (cost=425483531.52..425483534.05 rows=203 width=52)
  ->  XN Hash Join DS_DIST_NONE  (cost=436074.95..425482713.53 rows=81799 width=52)
        Hash Cond: ("outer".ss_item_sk = "inner".i_item_sk)
        ->  XN Hash Join DS_BCAST_INNER  (cost=433041.99..425477007.79 rows=82435 width=56)
              Hash Cond: ("outer".ss_promo_sk = "inner".p_promo_sk)
              ->  XN Hash Join DS_BCAST_INNER  (cost=433027.02..307034216.25 rows=86765 width=60)
                    Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                    ->  XN Hash Join DS_BCAST_INNER  (cost=433022.00..178392170.46 rows=93849 width=44)
                          Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                          ->  XN Hash Left Join DS_DIST_NONE  (cost=431926.20..171790173.37 rows=287997024 width=48)
                                Hash Cond: (("outer".ss_ticket_number = "inner".sr_ticket_number) AND ("outer".ss_item_sk = "inner".sr_item_sk))
                                ->  XN Seq Scan on store_sales  (cost=0.00..2879970.24 rows=287997024 width=36)
                                ->  XN Hash  (cost=287950.80..287950.80 rows=28795080 width=24)
                                      ->  XN Seq Scan on store_returns  (cost=0.00..287950.80 rows=28795080 width=24)
                          ->  XN Hash  (cost=1095.73..1095.73 rows=25 width=4)
                                ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=25 width=4)
                                      Filter: ((d_date >= '2000-08-23'::date) AND (d_date <= '2000-09-22'::date))
                    ->  XN Hash  (cost=4.02..4.02 rows=402 width=24)
                          ->  XN Seq Scan on store  (cost=0.00..4.02 rows=402 width=24)
              ->  XN Hash  (cost=12.50..12.50 rows=987 width=4)
                    ->  XN Seq Scan on promotion  (cost=0.00..12.50 rows=987 width=4)
                          Filter: ('N'::text = (p_channel_tv)::text)
        ->  XN Hash  (cost=2550.00..2550.00 rows=193185 width=4)
              ->  XN Seq Scan on item  (cost=0.00..2550.00 rows=193185 width=4)
                    Filter: (i_current_price > 50::double precision)

XN HashAggregate  (cost=2306333176415.26..2306333176415.41 rows=12 width=52)
  ->  XN Hash Join DS_BCAST_INNER  (cost=2303389450418.85..2306333176172.58 rows=24268 width=52)
        Hash Cond: ("outer".ws_web_site_sk = "inner".web_site_sk)
        ->  XN Hash Join DS_DIST_INNER  (cost=2303389450418.54..2306325495626.15 rows=24277 width=36)
              Inner Dist Key: web_sales.ws_item_sk
              Hash Cond: ("outer".i_item_sk = "inner".ws_item_sk)
              ->  XN Seq Scan on item  (cost=0.00..2550.00 rows=193185 width=4)
                    Filter: (i_current_price > 50::double precision)
              ->  XN Hash  (cost=2303389450357.38..2303389450357.38 rows=24467 width=40)
                    ->  XN Hash Join DS_BCAST_INNER  (cost=109075.81..2303389450357.38 rows=24467 width=40)
                          Hash Cond: ("outer".ws_promo_sk = "inner".p_promo_sk)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=109060.85..2303271009543.77 rows=24621 width=44)
                                Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                                ->  XN Hash Left Join DS_BCAST_INNER  (cost=107965.05..2303267108186.26 rows=72001240 width=48)
                                      Hash Cond: (("outer".ws_order_number = "inner".wr_order_number) AND ("outer".ws_item_sk = "inner".wr_item_sk))
                                      ->  XN Seq Scan on web_sales  (cost=0.00..720012.40 rows=72001240 width=36)
                                      ->  XN Hash  (cost=71976.70..71976.70 rows=7197670 width=24)
                                            ->  XN Seq Scan on web_returns  (cost=0.00..71976.70 rows=7197670 width=24)
                                ->  XN Hash  (cost=1095.73..1095.73 rows=25 width=4)
                                      ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=25 width=4)
                                            Filter: ((d_date >= '2000-08-23'::date) AND (d_date <= '2000-09-22'::date))
                          ->  XN Hash  (cost=12.50..12.50 rows=987 width=4)
                                ->  XN Seq Scan on promotion  (cost=0.00..12.50 rows=987 width=4)
                                      Filter: ('N'::text = (p_channel_tv)::text)
        ->  XN Hash  (cost=0.24..0.24 rows=24 width=24)
              ->  XN Seq Scan on web_site  (cost=0.00..0.24 rows=24 width=24)

XN Subquery Scan foo  (cost=3000000000114.09..3000000000115.34 rows=100 width=88)
  ->  XN Limit  (cost=3000000000114.09..3000000000114.34 rows=100 width=88)
        ->  XN Merge  (cost=3000000000114.09..3000000000114.35 rows=104 width=88)
              Merge Key: channel, id
              ->  XN Network  (cost=3000000000114.09..3000000000114.35 rows=104 width=88)
                    Send to leader
                    ->  XN Sort  (cost=3000000000114.09..3000000000114.35 rows=104 width=88)
                          Sort Key: channel, id
                          ->  XN Unique  (cost=1000000000071.52..2000000000110.61 rows=104 width=88)
                                ->  XN Append  (cost=1000000000071.52..2000000000109.31 rows=104 width=88)
                                      ->  XN Subquery Scan "*SELECT* 1"  (cost=1000000000071.52..1000000000072.77 rows=100 width=88)
                                            ->  XN Limit  (cost=1000000000071.52..1000000000071.77 rows=100 width=88)
                                                  ->  XN Sort  (cost=1000000000071.52..1000000000072.02 rows=200 width=88)
                                                        Sort Key: derived_col1, derived_col2
                                                        ->  XN Unique  (cost=59.87..63.87 rows=200 width=88)
                                                              ->  XN HashAggregate  (cost=59.87..61.37 rows=200 width=88)
                                                                    ->  XN Subquery Scan x  (cost=4.52..47.95 rows=954 width=88)
                                                                          ->  XN Append  (cost=4.52..38.41 rows=954 width=75)
                                                                                ->  XN Subquery Scan "*SELECT* 1"  (cost=4.52..7.87 rows=191 width=66)
                                                                                      ->  XN HashAggregate  (cost=4.52..5.96 rows=191 width=66)
                                                                                            ->  XN Seq Scan on volt_tt_618e634f379bd  (cost=0.00..2.01 rows=201 width=66)
                                                                                ->  XN Subquery Scan "*SELECT* 2"  (cost=16.92..30.06 rows=751 width=75)
                                                                                      ->  XN HashAggregate  (cost=16.92..22.55 rows=751 width=75)
                                                                                            ->  XN Seq Scan on volt_tt_618e634f317fd  (cost=0.00..7.52 rows=752 width=75)
                                                                                ->  XN Subquery Scan "*SELECT* 3"  (cost=0.27..0.48 rows=12 width=67)
                                                                                      ->  XN HashAggregate  (cost=0.27..0.36 rows=12 width=67)
                                                                                            ->  XN Seq Scan on volt_tt_618e634f3e642  (cost=0.00..0.12 rows=12 width=67)
                                      ->  XN Subquery Scan "*SELECT* 2"  (cost=1000000000019.50..1000000000019.53 rows=3 width=56)
                                            ->  XN Limit  (cost=1000000000019.50..1000000000019.50 rows=3 width=56)
                                                  ->  XN Sort  (cost=1000000000019.50..1000000000019.50 rows=3 width=56)
                                                        Sort Key: derived_col1, NULL::character varying
                                                        ->  XN Unique  (cost=19.41..19.47 rows=3 width=56)
                                                              ->  XN HashAggregate  (cost=19.41..19.44 rows=3 width=56)
                                                                    ->  XN Subquery Scan x  (cost=4.02..19.38 rows=3 width=56)
                                                                          ->  XN Append  (cost=4.02..19.35 rows=3 width=43)
                                                                                ->  XN Subquery Scan "*SELECT* 1"  (cost=4.02..4.04 rows=1 width=41)
                                                                                      ->  XN HashAggregate  (cost=4.02..4.03 rows=1 width=41)
                                                                                            ->  XN Seq Scan on volt_tt_618e634f379bd  (cost=0.00..2.01 rows=201 width=41)
                                                                                ->  XN Subquery Scan "*SELECT* 2"  (cost=15.04..15.06 rows=1 width=43)
                                                                                      ->  XN HashAggregate  (cost=15.04..15.05 rows=1 width=43)
                                                                                            ->  XN Seq Scan on volt_tt_618e634f317fd  (cost=0.00..7.52 rows=752 width=43)
                                                                                ->  XN Subquery Scan "*SELECT* 3"  (cost=0.24..0.26 rows=1 width=39)
                                                                                      ->  XN HashAggregate  (cost=0.24..0.25 rows=1 width=39)
                                                                                            ->  XN Seq Scan on volt_tt_618e634f3e642  (cost=0.00..0.12 rows=12 width=39)
                                      ->  XN Network  (cost=17.00..17.01 rows=1 width=24)
                                            Distribute Round Robin
                                            ->  XN Subquery Scan "*SELECT* 3"  (cost=17.00..17.01 rows=1 width=24)
                                                  ->  XN Aggregate  (cost=17.00..17.00 rows=1 width=24)
                                                        ->  XN Subquery Scan x  (cost=3.53..16.97 rows=3 width=24)
                                                              ->  XN Append  (cost=3.53..16.94 rows=3 width=24)
                                                                    ->  XN Subquery Scan "*SELECT* 1"  (cost=3.53..3.54 rows=1 width=24)
                                                                          ->  XN Aggregate  (cost=3.53..3.53 rows=1 width=24)
                                                                                ->  XN Seq Scan on volt_tt_618e634f379bd  (cost=0.00..2.01 rows=201 width=24)
                                                                    ->  XN Subquery Scan "*SELECT* 2"  (cost=13.17..13.18 rows=1 width=24)
                                                                          ->  XN Aggregate  (cost=13.17..13.17 rows=1 width=24)
                                                                                ->  XN Seq Scan on volt_tt_618e634f317fd  (cost=0.00..7.52 rows=752 width=24)
                                                                    ->  XN Subquery Scan "*SELECT* 3"  (cost=0.22..0.23 rows=1 width=24)
                                                                          ->  XN Aggregate  (cost=0.22..0.22 rows=1 width=24)
                                                                                ->  XN Seq Scan on volt_tt_618e634f3e642  (cost=0.00..0.12 rows=12 width=24)