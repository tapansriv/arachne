XN Limit  (cost=1000063748775.89..1000063748775.90 rows=1 width=142)
  ->  XN Merge  (cost=1000063748775.89..1000063748775.90 rows=1 width=142)
        Merge Key: item.i_item_id, item.i_item_desc, store.s_state
        ->  XN Network  (cost=1000063748775.89..1000063748775.90 rows=1 width=142)
              Send to leader
              ->  XN Sort  (cost=1000063748775.89..1000063748775.90 rows=1 width=142)
                    Sort Key: item.i_item_id, item.i_item_desc, store.s_state
                    ->  XN HashAggregate  (cost=63748775.81..63748775.88 rows=1 width=142)
                          ->  XN Hash Join DS_DIST_INNER  (cost=63644185.75..63748775.77 rows=1 width=142)
                                Inner Dist Key: store_sales.ss_item_sk
                                Hash Cond: ("outer".i_item_sk = "inner".ss_item_sk)
                                ->  XN Seq Scan on item  (cost=0.00..2040.00 rows=204000 width=128)
                                ->  XN Hash  (cost=63644185.74..63644185.74 rows=1 width=30)
                                      ->  XN Hash Join DS_BCAST_INNER  (cost=63284176.69..63644185.74 rows=1 width=30)
                                            Hash Cond: ("outer".s_store_sk = "inner".ss_store_sk)
                                            ->  XN Seq Scan on store  (cost=0.00..4.02 rows=402 width=10)
                                            ->  XN Hash  (cost=63284176.69..63284176.69 rows=1 width=28)
                                                  ->  XN Hash Join DS_DIST_BOTH  (cost=52222895.05..63284176.69 rows=1 width=28)
                                                        Outer Dist Key: d2.d_date_sk
                                                        Inner Dist Key: store_returns.sr_returned_date_sk
                                                        Hash Cond: ("outer".d_date_sk = "inner".sr_returned_date_sk)
                                                        ->  XN Seq Scan on date_dim d2  (cost=0.00..1278.36 rows=262 width=4)
                                                              Filter: (((d_quarter_name)::text = '2001Q1'::text) OR ((d_quarter_name)::text = '2001Q2'::text) OR ((d_quarter_name)::text = '2001Q3'::text))
                                                        ->  XN Hash  (cost=52222894.97..52222894.97 rows=32 width=32)
                                                              ->  XN Hash Join DS_DIST_NONE  (cost=51243478.10..52222894.97 rows=32 width=32)
                                                                    Hash Cond: (("outer".sr_ticket_number = "inner".ss_ticket_number) AND ("outer".cs_bill_customer_sk = "inner".ss_customer_sk) AND ("outer".cs_item_sk = "inner".ss_item_sk))
                                                                    ->  XN Hash Join DS_DIST_NONE  (cost=34668492.27..35627016.83 rows=557128 width=32)
                                                                          Hash Cond: (("outer".sr_customer_sk = "inner".cs_bill_customer_sk) AND ("outer".sr_item_sk = "inner".cs_item_sk))
                                                                          ->  XN Seq Scan on store_returns  (cost=0.00..287950.80 rows=26822937 width=20)
                                                                                Filter: ((sr_returned_date_sk IS NOT NULL) AND (sr_customer_sk IS NOT NULL))
                                                                          ->  XN Hash  (cost=34665956.37..34665956.37 rows=507181 width=12)
                                                                                ->  XN Hash Join DS_BCAST_INNER  (cost=1279.01..34665956.37 rows=507181 width=12)
                                                                                      Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                                                                                      ->  XN Seq Scan on catalog_sales  (cost=0.00..1439970.72 rows=142370786 width=16)
                                                                                            Filter: ((cs_sold_date_sk IS NOT NULL) AND (cs_bill_customer_sk IS NOT NULL))
                                                                                      ->  XN Hash  (cost=1278.36..1278.36 rows=262 width=4)
                                                                                            ->  XN Seq Scan on date_dim d3  (cost=0.00..1278.36 rows=262 width=4)
                                                                                                  Filter: (((d_quarter_name)::text = '2001Q1'::text) OR ((d_quarter_name)::text = '2001Q2'::text) OR ((d_quarter_name)::text = '2001Q3'::text))
                                                                    ->  XN Hash  (cost=16572832.31..16572832.31 rows=287136 width=20)
                                                                          ->  XN Hash Join DS_BCAST_INNER  (cost=913.33..16572832.31 rows=287136 width=20)
                                                                                Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                                ->  XN Seq Scan on store_sales  (cost=0.00..2879970.24 rows=250326190 width=24)
                                                                                      Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL) AND (ss_customer_sk IS NOT NULL))
                                                                                ->  XN Hash  (cost=913.11..913.11 rows=88 width=4)
                                                                                      ->  XN Seq Scan on date_dim d1  (cost=0.00..913.11 rows=88 width=4)
                                                                                            Filter: ((d_quarter_name)::text = '2001Q1'::text)