XN Merge  (cost=1000036729856.81..1000036729861.15 rows=1733 width=56)
  Merge Key: inv1.w_warehouse_sk, inv1.i_item_sk, inv1.d_moy, inv1.mean, inv1.cov, inv2.d_moy, inv2.mean, inv2.cov
  ->  XN Network  (cost=1000036729856.81..1000036729861.15 rows=1733 width=56)
        Send to leader
        ->  XN Sort  (cost=1000036729856.81..1000036729861.15 rows=1733 width=56)
              Sort Key: inv1.w_warehouse_sk, inv1.i_item_sk, inv1.d_moy, inv1.mean, inv1.cov, inv2.d_moy, inv2.mean, inv2.cov
              ->  XN Hash Join DS_DIST_NONE  (cost=36727100.70..36729763.59 rows=1733 width=56)
                    Hash Cond: (("outer".i_item_sk = "inner".i_item_sk) AND ("outer".w_warehouse_sk = "inner".w_warehouse_sk))
                    ->  XN Subquery Scan inv1  (cost=18604024.05..18604681.69 rows=1000 width=28)
                          ->  XN HashAggregate  (cost=18604024.05..18604671.69 rows=1000 width=36)
                                Filter: (CASE WHEN (avg(inv_quantity_on_hand) = 0) THEN 0::double precision ELSE ((stddev((inv_quantity_on_hand)::double precision) * 1::double precision) / (avg(inv_quantity_on_hand))::double precision) END > 1::double precision)
                                ->  XN Hash Join DS_DIST_NONE  (cost=3646.00..18599301.62 rows=171725 width=36)
                                      Hash Cond: ("outer".inv_item_sk = "inner".i_item_sk)
                                      ->  XN Hash Join DS_BCAST_INNER  (cost=1096.00..18591346.93 rows=163886 width=36)
                                            Hash Cond: ("outer".inv_warehouse_sk = "inner".w_warehouse_sk)
                                            ->  XN Hash Join DS_BCAST_INNER  (cost=1095.81..13787659.31 rows=163886 width=16)
                                                  Hash Cond: ("outer".inv_date_sk = "inner".d_date_sk)
                                                  ->  XN Seq Scan on inventory  (cost=0.00..3993299.84 rows=399329984 width=16)
                                                  ->  XN Hash  (cost=1095.73..1095.73 rows=30 width=8)
                                                        ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=30 width=8)
                                                              Filter: ((d_year = 2001) AND (d_moy = 1))
                                            ->  XN Hash  (cost=0.15..0.15 rows=15 width=24)
                                                  ->  XN Seq Scan on warehouse  (cost=0.00..0.15 rows=15 width=24)
                                      ->  XN Hash  (cost=2040.00..2040.00 rows=204000 width=4)
                                            ->  XN Seq Scan on item  (cost=0.00..2040.00 rows=204000 width=4)
                    ->  XN Hash  (cost=18123071.64..18123071.64 rows=1000 width=28)
                          ->  XN Subquery Scan inv2  (cost=18122478.76..18123071.64 rows=1000 width=28)
                                ->  XN HashAggregate  (cost=18122478.76..18123061.64 rows=1000 width=36)
                                      Filter: (CASE WHEN (avg(inv_quantity_on_hand) = 0) THEN 0::double precision ELSE ((stddev((inv_quantity_on_hand)::double precision) * 1::double precision) / (avg(inv_quantity_on_hand))::double precision) END > 1::double precision)
                                      ->  XN Hash Join DS_DIST_NONE  (cost=3645.99..18118228.55 rows=154553 width=36)
                                            Hash Cond: ("outer".inv_item_sk = "inner".i_item_sk)
                                            ->  XN Hash Join DS_BCAST_INNER  (cost=1095.99..18110814.32 rows=147498 width=36)
                                                  Hash Cond: ("outer".inv_warehouse_sk = "inner".w_warehouse_sk)
                                                  ->  XN Hash Join DS_BCAST_INNER  (cost=1095.80..13307495.42 rows=147498 width=16)
                                                        Hash Cond: ("outer".inv_date_sk = "inner".d_date_sk)
                                                        ->  XN Seq Scan on inventory  (cost=0.00..3993299.84 rows=399329984 width=16)
                                                        ->  XN Hash  (cost=1095.73..1095.73 rows=27 width=8)
                                                              ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=27 width=8)
                                                                    Filter: ((d_year = 2001) AND (d_moy = 2))
                                                  ->  XN Hash  (cost=0.15..0.15 rows=15 width=24)
                                                        ->  XN Seq Scan on warehouse  (cost=0.00..0.15 rows=15 width=24)
                                            ->  XN Hash  (cost=2040.00..2040.00 rows=204000 width=4)
                                                  ->  XN Seq Scan on item  (cost=0.00..2040.00 rows=204000 width=4)