XN HashAggregate  (cost=6230938.83..6230938.99 rows=30 width=20)
  ->  XN Hash Join DS_BCAST_INNER  (cost=1095.80..6230573.95 rows=48651 width=20)
        Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
        ->  XN Seq Scan on catalog_sales  (cost=0.00..1439970.72 rows=143121674 width=24)
              Filter: (cs_sold_date_sk IS NOT NULL)
        ->  XN Hash  (cost=1095.73..1095.73 rows=25 width=4)
              ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=25 width=4)
                    Filter: ((d_date >= '2000-08-23'::date) AND (d_date <= '2000-09-22'::date))

XN HashAggregate  (cost=51863958.18..51863960.19 rows=402 width=20)
  ->  XN Hash Join DS_BCAST_INNER  (cost=1100.82..51863896.37 rows=8242 width=20)
        Hash Cond: ("outer".sr_store_sk = "inner".s_store_sk)
        ->  XN Hash Join DS_BCAST_INNER  (cost=1095.80..3623698.49 rows=8834 width=20)
              Hash Cond: ("outer".sr_returned_date_sk = "inner".d_date_sk)
              ->  XN Seq Scan on store_returns  (cost=0.00..287950.80 rows=26765084 width=24)
                    Filter: ((sr_store_sk IS NOT NULL) AND (sr_returned_date_sk IS NOT NULL))
              ->  XN Hash  (cost=1095.73..1095.73 rows=25 width=4)
                    ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=25 width=4)
                          Filter: ((d_date >= '2000-08-23'::date) AND (d_date <= '2000-09-22'::date))
        ->  XN Hash  (cost=4.02..4.02 rows=402 width=4)
              ->  XN Seq Scan on store  (cost=0.00..4.02 rows=402 width=4)

XN HashAggregate  (cost=57398082.00..57398084.01 rows=402 width=20)
  ->  XN Hash Join DS_BCAST_INNER  (cost=1100.82..57397490.24 rows=78901 width=20)
        Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
        ->  XN Hash Join DS_BCAST_INNER  (cost=1095.80..9155629.42 rows=85343 width=20)
              Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
              ->  XN Seq Scan on store_sales  (cost=0.00..2879970.24 rows=261896796 width=24)
                    Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
              ->  XN Hash  (cost=1095.73..1095.73 rows=25 width=4)
                    ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=25 width=4)
                          Filter: ((d_date >= '2000-08-23'::date) AND (d_date <= '2000-09-22'::date))
        ->  XN Hash  (cost=4.02..4.02 rows=402 width=4)
              ->  XN Seq Scan on store  (cost=0.00..4.02 rows=402 width=4)

XN HashAggregate  (cost=213594927.02..213594936.95 rows=1986 width=20)
  ->  XN Hash Join DS_DIST_BOTH  (cost=1121.30..213594912.13 rows=1986 width=20)
        Outer Dist Key: "outer".wr_web_page_sk
        Inner Dist Key: web_page.wp_web_page_sk
        Hash Cond: ("outer".wr_web_page_sk = "inner".wp_web_page_sk)
        ->  XN Hash Join DS_BCAST_INNER  (cost=1095.80..3154840.12 rows=2132 width=20)
              Hash Cond: ("outer".wr_returned_date_sk = "inner".d_date_sk)
              ->  XN Seq Scan on web_returns  (cost=0.00..71976.70 rows=6539704 width=24)
                    Filter: ((wr_returned_date_sk IS NOT NULL) AND (wr_web_page_sk IS NOT NULL))
              ->  XN Hash  (cost=1095.73..1095.73 rows=25 width=4)
                    ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=25 width=4)
                          Filter: ((d_date >= '2000-08-23'::date) AND (d_date <= '2000-09-22'::date))
        ->  XN Hash  (cost=20.40..20.40 rows=2040 width=4)
              ->  XN Seq Scan on web_page  (cost=0.00..20.40 rows=2040 width=4)

XN HashAggregate  (cost=249422123.99..249422134.19 rows=2040 width=20)
  ->  XN Hash Join DS_BCAST_INNER  (cost=1121.30..249421943.64 rows=24047 width=20)
        Hash Cond: ("outer".ws_web_page_sk = "inner".wp_web_page_sk)
        ->  XN Hash Join DS_BCAST_INNER  (cost=1095.80..4621369.91 rows=24621 width=20)
              Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
              ->  XN Seq Scan on web_sales  (cost=0.00..720012.40 rows=72001240 width=24)
              ->  XN Hash  (cost=1095.73..1095.73 rows=25 width=4)
                    ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=25 width=4)
                          Filter: ((d_date >= '2000-08-23'::date) AND (d_date <= '2000-09-22'::date))
        ->  XN Hash  (cost=20.40..20.40 rows=2040 width=4)
              ->  XN Seq Scan on web_page  (cost=0.00..20.40 rows=2040 width=4)

XN HashAggregate  (cost=3325280.43..3325280.58 rows=30 width=20)
  ->  XN Hash Join DS_BCAST_INNER  (cost=1095.80..3325243.48 rows=4927 width=20)
        Hash Cond: ("outer".cr_returned_date_sk = "inner".d_date_sk)
        ->  XN Seq Scan on catalog_returns  (cost=0.00..144043.74 rows=14404374 width=24)
        ->  XN Hash  (cost=1095.73..1095.73 rows=25 width=4)
              ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=25 width=4)
                    Filter: ((d_date >= '2000-08-23'::date) AND (d_date <= '2000-09-22'::date))

XN Nested Loop DS_BCAST_INNER  (cost=0.00..3840007.77 rows=336 width=32)
  ->  XN Seq Scan on volt_tt_618e63487b20c  (cost=0.00..0.21 rows=21 width=16)
  ->  XN Seq Scan on volt_tt_618e63486f23c  (cost=0.00..0.16 rows=16 width=16)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----

XN Subquery Scan foo  (cost=3000004480359.10..3000004480360.35 rows=100 width=60)
  ->  XN Limit  (cost=3000004480359.10..3000004480359.35 rows=100 width=60)
        ->  XN Merge  (cost=3000004480359.10..3000004480359.36 rows=104 width=60)
              Merge Key: channel, id
              ->  XN Network  (cost=3000004480359.10..3000004480359.36 rows=104 width=60)
                    Send to leader
                    ->  XN Sort  (cost=3000004480359.10..3000004480359.36 rows=104 width=60)
                          Sort Key: channel, id
                          ->  XN Unique  (cost=1000004480166.29..2000004480355.62 rows=104 width=60)
                                ->  XN Append  (cost=1000004480166.29..2000004480354.32 rows=104 width=60)
                                      ->  XN Subquery Scan "*SELECT* 1"  (cost=1000004480166.29..1000004480167.54 rows=100 width=60)
                                            ->  XN Limit  (cost=1000004480166.29..1000004480166.54 rows=100 width=60)
                                                  ->  XN Sort  (cost=1000004480166.29..1000004480166.79 rows=200 width=60)
                                                        Sort Key: derived_col1, derived_col2
                                                        ->  XN Unique  (cost=4480154.64..4480158.64 rows=200 width=60)
                                                              ->  XN HashAggregate  (cost=4480154.64..4480156.14 rows=200 width=60)
                                                                    ->  XN Subquery Scan x  (cost=11.53..4480139.34 rows=1224 width=60)
                                                                          ->  XN Append  (cost=11.53..4480127.10 rows=1224 width=36)
                                                                                ->  XN Subquery Scan "*SELECT* 1"  (cost=11.53..15.55 rows=201 width=36)
                                                                                      ->  XN HashAggregate  (cost=11.53..13.54 rows=201 width=36)
                                                                                            ->  XN Hash Left Join DS_DIST_NONE  (cost=2.51..9.02 rows=201 width=36)
                                                                                                  Hash Cond: ("outer".s_store_sk = "inner".s_store_sk)
                                                                                                  ->  XN Seq Scan on volt_tt_618e6348744e0  (cost=0.00..2.01 rows=201 width=20)
                                                                                                  ->  XN Hash  (cost=2.01..2.01 rows=201 width=20)
                                                                                                        ->  XN Seq Scan on volt_tt_618e634871a87  (cost=0.00..2.01 rows=201 width=20)
                                                                                ->  XN Subquery Scan "*SELECT* 2"  (cost=4480011.13..4480011.43 rows=15 width=36)
                                                                                      ->  XN HashAggregate  (cost=4480011.13..4480011.28 rows=15 width=36)
                                                                                            ->  XN Nested Loop DS_BCAST_INNER  (cost=0.00..4480006.93 rows=336 width=36)
                                                                                                  ->  XN Seq Scan on volt_tt_618e63487b20c  (cost=0.00..0.21 rows=21 width=16)
                                                                                                  ->  XN Seq Scan on volt_tt_618e63486f23c  (cost=0.00..0.16 rows=16 width=20)
                                                                                ->  XN Subquery Scan "*SELECT* 3"  (cost=79.97..100.13 rows=1008 width=36)
                                                                                      ->  XN HashAggregate  (cost=79.97..90.05 rows=1008 width=36)
                                                                                            ->  XN Hash Right Join DS_DIST_NONE  (cost=12.75..67.18 rows=1023 width=36)
                                                                                                  Hash Cond: ("outer".wp_web_page_sk = "inner".wp_web_page_sk)
                                                                                                  ->  XN Seq Scan on volt_tt_618e634876baa  (cost=0.00..13.60 rows=1360 width=20)
                                                                                                  ->  XN Hash  (cost=10.20..10.20 rows=1020 width=20)
                                                                                                        ->  XN Seq Scan on volt_tt_618e634879315  (cost=0.00..10.20 rows=1020 width=20)
                                      ->  XN Subquery Scan "*SELECT* 2"  (cost=1000000000095.36..1000000000095.39 rows=3 width=56)
                                            ->  XN Limit  (cost=1000000000095.36..1000000000095.36 rows=3 width=56)
                                                  ->  XN Sort  (cost=1000000000095.36..1000000000095.36 rows=3 width=56)
                                                        Sort Key: derived_col1, NULL::integer
                                                        ->  XN Unique  (cost=95.27..95.33 rows=3 width=56)
                                                              ->  XN HashAggregate  (cost=95.27..95.29 rows=3 width=56)
                                                                    ->  XN Subquery Scan x  (cost=11.03..95.24 rows=3 width=56)
                                                                          ->  XN Append  (cost=11.03..95.21 rows=3 width=43)
                                                                                ->  XN Subquery Scan "*SELECT* 1"  (cost=11.03..11.04 rows=1 width=32)
                                                                                      ->  XN HashAggregate  (cost=11.03..11.04 rows=1 width=32)
                                                                                            ->  XN Hash Left Join DS_DIST_NONE  (cost=2.51..9.02 rows=201 width=32)
                                                                                                  Hash Cond: ("outer".s_store_sk = "inner".s_store_sk)
                                                                                                  ->  XN Seq Scan on volt_tt_618e6348744e0  (cost=0.00..2.01 rows=201 width=20)
                                                                                                  ->  XN Hash  (cost=2.01..2.01 rows=201 width=20)
                                                                                                        ->  XN Seq Scan on volt_tt_618e634871a87  (cost=0.00..2.01 rows=201 width=20)
                                                                                ->  XN Subquery Scan "*SELECT* 2"  (cost=6.72..6.74 rows=1 width=43)
                                                                                      ->  XN HashAggregate  (cost=6.72..6.73 rows=1 width=43)
                                                                                            ->  XN Seq Scan on volt_tt_618e63487d636  (cost=0.00..3.36 rows=336 width=43)
                                                                                ->  XN Subquery Scan "*SELECT* 3"  (cost=77.41..77.43 rows=1 width=32)
                                                                                      ->  XN HashAggregate  (cost=77.41..77.42 rows=1 width=32)
                                                                                            ->  XN Hash Right Join DS_DIST_NONE  (cost=12.75..67.18 rows=1023 width=32)
                                                                                                  Hash Cond: ("outer".wp_web_page_sk = "inner".wp_web_page_sk)
                                                                                                  ->  XN Seq Scan on volt_tt_618e634876baa  (cost=0.00..13.60 rows=1360 width=20)
                                                                                                  ->  XN Hash  (cost=10.20..10.20 rows=1020 width=20)
                                                                                                        ->  XN Seq Scan on volt_tt_618e634879315  (cost=0.00..10.20 rows=1020 width=20)
                                      ->  XN Network  (cost=91.37..91.38 rows=1 width=24)
                                            Distribute Round Robin
                                            ->  XN Subquery Scan "*SELECT* 3"  (cost=91.37..91.38 rows=1 width=24)
                                                  ->  XN Aggregate  (cost=91.37..91.37 rows=1 width=24)
                                                        ->  XN Subquery Scan x  (cost=10.53..91.34 rows=3 width=24)
                                                              ->  XN Append  (cost=10.53..91.31 rows=3 width=32)
                                                                    ->  XN Subquery Scan "*SELECT* 1"  (cost=10.53..10.54 rows=1 width=32)
                                                                          ->  XN Aggregate  (cost=10.53..10.53 rows=1 width=32)
                                                                                ->  XN Hash Left Join DS_DIST_NONE  (cost=2.51..9.02 rows=201 width=32)
                                                                                      Hash Cond: ("outer".s_store_sk = "inner".s_store_sk)
                                                                                      ->  XN Seq Scan on volt_tt_618e6348744e0  (cost=0.00..2.01 rows=201 width=20)
                                                                                      ->  XN Hash  (cost=2.01..2.01 rows=201 width=20)
                                                                                            ->  XN Seq Scan on volt_tt_618e634871a87  (cost=0.00..2.01 rows=201 width=20)
                                                                    ->  XN Subquery Scan "*SELECT* 2"  (cost=5.89..5.90 rows=1 width=24)
                                                                          ->  XN Aggregate  (cost=5.89..5.89 rows=1 width=24)
                                                                                ->  XN Seq Scan on volt_tt_618e63487d636  (cost=0.00..3.36 rows=336 width=24)
                                                                    ->  XN Subquery Scan "*SELECT* 3"  (cost=74.86..74.87 rows=1 width=32)
                                                                          ->  XN Aggregate  (cost=74.86..74.86 rows=1 width=32)
                                                                                ->  XN Hash Right Join DS_DIST_NONE  (cost=12.75..67.18 rows=1023 width=32)
                                                                                      Hash Cond: ("outer".wp_web_page_sk = "inner".wp_web_page_sk)
                                                                                      ->  XN Seq Scan on volt_tt_618e634876baa  (cost=0.00..13.60 rows=1360 width=20)
                                                                                      ->  XN Hash  (cost=10.20..10.20 rows=1020 width=20)
                                                                                            ->  XN Seq Scan on volt_tt_618e634879315  (cost=0.00..10.20 rows=1020 width=20)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----