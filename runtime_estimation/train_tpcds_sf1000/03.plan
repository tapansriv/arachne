XN Limit  (cost=1001058850195.42..1001058850195.67 rows=100 width=36)
  ->  XN Merge  (cost=1001058850195.42..1001058850196.69 rows=507 width=36)
        Merge Key: dt.d_year, sum(store_sales.ss_ext_sales_price), item.i_brand_id
        ->  XN Network  (cost=1001058850195.42..1001058850196.69 rows=507 width=36)
              Send to leader
              ->  XN Sort  (cost=1001058850195.42..1001058850196.69 rows=507 width=36)
                    Sort Key: dt.d_year, sum(store_sales.ss_ext_sales_price), item.i_brand_id
                    ->  XN HashAggregate  (cost=1058850171.37..1058850172.64 rows=507 width=36)
                          ->  XN Hash Join DS_DIST_NONE  (cost=4679.29..1058847956.00 rows=221537 width=36)
                                Hash Cond: ("outer".ss_item_sk = "inner".i_item_sk)
                                ->  XN Hash Join DS_BCAST_INNER  (cost=928.56..1053854034.94 rows=221686887 width=16)
                                      Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                      ->  XN Seq Scan on store_sales  (cost=0.00..28799879.68 rows=2748508627 width=16)
                                            Filter: (ss_sold_date_sk IS NOT NULL)
                                      ->  XN Hash  (cost=913.11..913.11 rows=6178 width=8)
                                            ->  XN Seq Scan on date_dim dt  (cost=0.00..913.11 rows=6178 width=8)
                                                  Filter: (d_moy = 11)
                                ->  XN Hash  (cost=3750.00..3750.00 rows=292 width=28)
                                      ->  XN Seq Scan on item  (cost=0.00..3750.00 rows=292 width=28)
                                            Filter: (i_manufact_id = 128)