XN Seq Scan on date_dim  (cost=913.11..1826.23 rows=8 width=4)
  Filter: (d_week_seq = $0)
  InitPlan
    ->  XN Seq Scan on date_dim  (cost=0.00..913.11 rows=1 width=4)
          Filter: (d_date = '2000-01-03'::date)

XN Limit  (cost=1014022421027.36..1014022421027.61 rows=100 width=66)
  ->  XN Merge  (cost=1014022421027.36..1014022421193.33 rows=66390 width=66)
        Merge Key: ss_items.item_id, ss_items.ss_item_rev
        ->  XN Network  (cost=1014022421027.36..1014022421193.33 rows=66390 width=66)
              Send to leader
              ->  XN Sort  (cost=1014022421027.36..1014022421193.33 rows=66390 width=66)
                    Sort Key: ss_items.item_id, ss_items.ss_item_rev
                    ->  XN Hash Join DS_DIST_NONE  (cost=13902334018.88..14022415709.96 rows=66390 width=66)
                          Hash Cond: (("outer".item_id)::text = ("inner".item_id)::text)
                          Join Filter: (("outer".cs_item_rev <= ("inner".ss_item_rev * 1.1000000000000001::double precision)) AND ("inner".ss_item_rev <= ("outer".cs_item_rev * 1.1000000000000001::double precision)) AND ("outer".cs_item_rev >= ("inner".ss_item_rev * 0.90000000000000002::double precision)) AND ("inner".ss_item_rev >= ("outer".cs_item_rev * 0.90000000000000002::double precision)) AND ("inner".ss_item_rev <= ("outer".ws_item_rev * 1.1000000000000001::double precision)) AND ("outer".ws_item_rev <= ("inner".ss_item_rev * 1.1000000000000001::double precision)) AND ("inner".ss_item_rev >= ("outer".ws_item_rev * 0.90000000000000002::double precision)) AND ("outer".ws_item_rev >= ("inner".ss_item_rev * 0.90000000000000002::double precision)))
                          ->  XN Hash Join DS_DIST_NONE  (cost=13837480201.75..13848661516.63 rows=600060 width=100)
                                Hash Cond: (("outer".item_id)::text = ("inner".item_id)::text)
                                Join Filter: (("outer".cs_item_rev <= ("inner".ws_item_rev * 1.1000000000000001::double precision)) AND ("inner".ws_item_rev <= ("outer".cs_item_rev * 1.1000000000000001::double precision)) AND ("outer".cs_item_rev >= ("inner".ws_item_rev * 0.90000000000000002::double precision)) AND ("inner".ws_item_rev >= ("outer".cs_item_rev * 0.90000000000000002::double precision)))
                                ->  XN Subquery Scan cs_items  (cost=33988814.66..33990531.68 rows=137362 width=50)
                                      ->  XN HashAggregate  (cost=33988814.66..33989158.06 rows=137362 width=28)
                                            ->  XN Hash Join DS_DIST_NONE  (cost=33979978.24..33988127.85 rows=137362 width=28)
                                                  Hash Cond: ("outer".i_item_sk = "inner".cs_item_sk)
                                                  ->  XN Seq Scan on item  (cost=0.00..3000.00 rows=300000 width=24)
                                                  ->  XN Hash  (cost=33979637.44..33979637.44 rows=136321 width=12)
                                                        ->  XN Hash Join DS_BCAST_INNER  (cost=841643.78..33979637.44 rows=136321 width=12)
                                                              Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                                                              ->  XN Seq Scan on catalog_sales  (cost=0.00..14399804.16 rows=1431746103 width=16)
                                                                    Filter: (cs_sold_date_sk IS NOT NULL)
                                                              ->  XN Hash  (cost=841643.76..841643.76 rows=7 width=4)
                                                                    ->  XN Hash IN Join DS_BCAST_INNER  (cost=0.09..841643.76 rows=7 width=4)
                                                                          Hash Cond: ("outer".d_date = "inner".d_date)
                                                                          ->  XN Seq Scan on date_dim  (cost=0.00..730.49 rows=73049 width=8)
                                                                          ->  XN Hash  (cost=0.07..0.07 rows=7 width=4)
                                                                                ->  XN Seq Scan on volt_tt_618ff005023f4  (cost=0.00..0.07 rows=7 width=4)
                                ->  XN Hash  (cost=13803491210.17..13803491210.17 rows=70769 width=50)
                                      ->  XN Subquery Scan ws_items  (cost=13803490325.55..13803491210.17 rows=70769 width=50)
                                            ->  XN HashAggregate  (cost=13803490325.55..13803490502.48 rows=70769 width=28)
                                                  ->  XN Hash Join DS_BCAST_INNER  (cost=17882514.02..13803489971.71 rows=70769 width=28)
                                                        Hash Cond: ("outer".i_item_sk = "inner".ws_item_sk)
                                                        ->  XN Seq Scan on item  (cost=0.00..3000.00 rows=300000 width=24)
                                                        ->  XN Hash  (cost=17882341.70..17882341.70 rows=68928 width=12)
                                                              ->  XN Hash Join DS_BCAST_INNER  (cost=841643.78..17882341.70 rows=68928 width=12)
                                                                    Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                                                                    ->  XN Seq Scan on web_sales  (cost=0.00..7200003.84 rows=720000384 width=16)
                                                                    ->  XN Hash  (cost=841643.76..841643.76 rows=7 width=4)
                                                                          ->  XN Hash IN Join DS_BCAST_INNER  (cost=0.09..841643.76 rows=7 width=4)
                                                                                Hash Cond: ("outer".d_date = "inner".d_date)
                                                                                ->  XN Seq Scan on date_dim  (cost=0.00..730.49 rows=73049 width=8)
                                                                                ->  XN Hash  (cost=0.07..0.07 rows=7 width=4)
                                                                                      ->  XN Seq Scan on volt_tt_618ff005023f4  (cost=0.00..0.07 rows=7 width=4)
                          ->  XN Hash  (cost=64853454.18..64853454.18 rows=145180 width=50)
                                ->  XN Subquery Scan ss_items  (cost=64851639.43..64853454.18 rows=145180 width=50)
                                      ->  XN HashAggregate  (cost=64851639.43..64852002.38 rows=145180 width=28)
                                            ->  XN Hash Join DS_DIST_NONE  (cost=64841021.08..64850349.98 rows=257890 width=28)
                                                  Hash Cond: ("outer".i_item_sk = "inner".ss_item_sk)
                                                  ->  XN Seq Scan on item  (cost=0.00..3000.00 rows=300000 width=24)
                                                  ->  XN Hash  (cost=64840393.12..64840393.12 rows=251183 width=12)
                                                        ->  XN Hash Join DS_BCAST_INNER  (cost=841643.78..64840393.12 rows=251183 width=12)
                                                              Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                              ->  XN Seq Scan on store_sales  (cost=0.00..28799879.68 rows=2748508627 width=16)
                                                                    Filter: (ss_sold_date_sk IS NOT NULL)
                                                              ->  XN Hash  (cost=841643.76..841643.76 rows=7 width=4)
                                                                    ->  XN Hash IN Join DS_BCAST_INNER  (cost=0.09..841643.76 rows=7 width=4)
                                                                          Hash Cond: ("outer".d_date = "inner".d_date)
                                                                          ->  XN Seq Scan on date_dim  (cost=0.00..730.49 rows=73049 width=8)
                                                                          ->  XN Hash  (cost=0.07..0.07 rows=7 width=4)
                                                                                ->  XN Seq Scan on volt_tt_618ff005023f4  (cost=0.00..0.07 rows=7 width=4)