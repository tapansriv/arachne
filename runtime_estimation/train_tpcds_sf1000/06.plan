XN Limit  (cost=1082032253270.64..1082032253270.77 rows=52 width=6)
  InitPlan
    ->  XN Unique  (cost=0.00..1095.81 rows=2 width=4)
          ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=31 width=4)
                Filter: ((d_year = 2001) AND (d_moy = 1))
  ->  XN Merge  (cost=1082032252174.83..1082032252174.96 rows=52 width=6)
        Merge Key: count(*), a.ca_state
        ->  XN Network  (cost=1082032252174.83..1082032252174.96 rows=52 width=6)
              Send to leader
              ->  XN Sort  (cost=1082032252174.83..1082032252174.96 rows=52 width=6)
                    Sort Key: count(*), a.ca_state
                    ->  XN HashAggregate  (cost=82032252172.96..82032252173.35 rows=52 width=6)
                          Filter: (count(*) >= 10)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=42082551656.98..82032249808.97 rows=315199 width=6)
                                Hash Cond: ("outer".ca_address_sk = "inner".c_current_addr_sk)
                                ->  XN Seq Scan on customer_address a  (cost=0.00..60000.00 rows=6000000 width=10)
                                ->  XN Hash  (cost=42082550824.69..42082550824.69 rows=332913 width=4)
                                      ->  XN Hash Join DS_BCAST_INNER  (cost=86837495.57..42082550824.69 rows=332913 width=4)
                                            Hash Cond: ("outer".c_customer_sk = "inner".ss_customer_sk)
                                            ->  XN Seq Scan on customer c  (cost=0.00..120000.00 rows=12000000 width=8)
                                            ->  XN Hash  (cost=86836620.66..86836620.66 rows=349962 width=4)
                                                  ->  XN Hash Join DS_DIST_NONE  (cost=21627355.08..86836620.66 rows=349962 width=4)
                                                        Hash Cond: ("outer".ss_item_sk = "inner".i_item_sk)
                                                        ->  XN Hash Join DS_BCAST_INNER  (cost=913.19..65193839.24 rows=1027193 width=8)
                                                              Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                              ->  XN Seq Scan on store_sales s  (cost=0.00..28799879.68 rows=2622621955 width=12)
                                                                    Filter: ((ss_customer_sk IS NOT NULL) AND (ss_sold_date_sk IS NOT NULL))
                                                              ->  XN Hash  (cost=913.11..913.11 rows=30 width=4)
                                                                    ->  XN Seq Scan on date_dim d  (cost=0.00..913.11 rows=30 width=4)
                                                                          Filter: (d_month_seq = $0)
                                                        ->  XN Hash  (cost=21626193.02..21626193.02 rows=99551 width=4)
                                                              ->  XN Hash Join DS_BCAST_INNER  (cost=10414971.65..21626193.02 rows=99551 width=4)
                                                                    Hash Cond: (("outer".i_category)::text = ("inner".i_category)::text)
                                                                    Join Filter: ("outer".i_current_price > ("inner".avg * 1.2::double precision))
                                                                    ->  XN Seq Scan on item i  (cost=0.00..3000.00 rows=299326 width=21)
                                                                          Filter: (i_category IS NOT NULL)
                                                                    ->  XN Hash  (cost=10414971.62..10414971.62 rows=10 width=101)
                                                                          ->  XN Subquery Scan volt_dt_0  (cost=10414971.50..10414971.62 rows=10 width=101)
                                                                                ->  XN HashAggregate  (cost=10414971.50..10414971.52 rows=10 width=101)
                                                                                      ->  XN Hash Join DS_BCAST_INNER  (cost=3750.12..10413478.23 rows=298653 width=101)
                                                                                            Hash Cond: (("outer".i_category)::text = ("inner".i_category)::text)
                                                                                            ->  XN Seq Scan on item j  (cost=0.00..3000.00 rows=299326 width=17)
                                                                                                  Filter: (i_category IS NOT NULL)
                                                                                            ->  XN Hash  (cost=3750.10..3750.10 rows=10 width=93)
                                                                                                  ->  XN Subquery Scan volt_dt_1  (cost=0.00..3750.10 rows=10 width=93)
                                                                                                        ->  XN Unique  (cost=0.00..3750.00 rows=10 width=9)
                                                                                                              ->  XN Seq Scan on item i  (cost=0.00..3000.00 rows=300000 width=9)