XN Limit  (cost=5300048096580.59..5300048096580.84 rows=100 width=28)
  ->  XN Merge  (cost=5300048096580.59..5300048097026.50 rows=178360 width=28)
        Merge Key: ca.ca_state, customer_demographics.cd_gender, customer_demographics.cd_marital_status, customer_demographics.cd_dep_count, customer_demographics.cd_dep_employed_count, customer_demographics.cd_dep_college_count
        ->  XN Network  (cost=5300048096580.59..5300048097026.50 rows=178360 width=28)
              Send to leader
              ->  XN Sort  (cost=5300048096580.59..5300048097026.50 rows=178360 width=28)
                    Sort Key: ca.ca_state, customer_demographics.cd_gender, customer_demographics.cd_marital_status, customer_demographics.cd_dep_count, customer_demographics.cd_dep_employed_count, customer_demographics.cd_dep_college_count
                    ->  XN HashAggregate  (cost=4300048075672.85..4300048081023.65 rows=178360 width=28)
                          ->  XN Hash IN Join DS_BCAST_INNER  (cost=205320187.57..4300047735009.35 rows=7570300 width=28)
                                Hash Cond: ("outer".c_customer_sk = "inner".ss_customer_sk)
                                ->  XN Hash Left Join DS_BCAST_INNER  (cost=110966681.56..3184699972586.60 rows=10275256 width=32)
                                      Hash Cond: ("outer".c_customer_sk = "inner".rhs_col_1)
                                      Filter: (("outer".witness IS NOT NULL) OR ("inner".witness_1 IS NOT NULL))
                                      ->  XN Hash Left Join DS_BCAST_INNER  (cost=63615443.23..2750399165759.97 rows=10275256 width=36)
                                            Hash Cond: ("outer".c_customer_sk = "inner".rhs_col)
                                            ->  XN Hash Join DS_BCAST_INNER  (cost=99010.00..1891489485100.62 rows=10275256 width=32)
                                                  Hash Cond: ("outer".c_current_addr_sk = "inner".ca_address_sk)
                                                  ->  XN Hash Join DS_BCAST_INNER  (cost=24010.00..691488629052.12 rows=10852735 width=30)
                                                        Hash Cond: ("outer".c_current_cdemo_sk = "inner".cd_demo_sk)
                                                        ->  XN Seq Scan on customer c  (cost=0.00..120000.00 rows=11585070 width=12)
                                                              Filter: (c_current_cdemo_sk IS NOT NULL)
                                                        ->  XN Hash  (cost=19208.00..19208.00 rows=1920800 width=26)
                                                              ->  XN Seq Scan on customer_demographics  (cost=0.00..19208.00 rows=1920800 width=26)
                                                  ->  XN Hash  (cost=60000.00..60000.00 rows=6000000 width=10)
                                                        ->  XN Seq Scan on customer_address ca  (cost=0.00..60000.00 rows=6000000 width=10)
                                            ->  XN Hash  (cost=63503823.55..63503823.55 rows=5043869 width=8)
                                                  ->  XN Subquery Scan derived_table1  (cost=1096.38..63503823.55 rows=5043869 width=8)
                                                        ->  XN Unique  (cost=1096.38..63453384.87 rows=5043869 width=4)
                                                              ->  XN Hash Join DS_BCAST_INNER  (cost=1096.38..63428165.52 rows=5043869 width=4)
                                                                    Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                                                                    ->  XN Seq Scan on catalog_sales  (cost=0.00..14399804.16 rows=1431746103 width=8)
                                                                          Filter: (cs_sold_date_sk IS NOT NULL)
                                                                    ->  XN Hash  (cost=1095.73..1095.73 rows=259 width=4)
                                                                          ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=259 width=4)
                                                                                Filter: ((d_year = 2002) AND (d_qoy < 4))
                                      ->  XN Hash  (cost=47344862.57..47344862.57 rows=2550302 width=8)
                                            ->  XN Subquery Scan derived_table2  (cost=1096.38..47344862.57 rows=2550302 width=8)
                                                  ->  XN Unique  (cost=1096.38..47319359.55 rows=2550302 width=4)
                                                        ->  XN Hash Join DS_BCAST_INNER  (cost=1096.38..47306608.04 rows=2550302 width=4)
                                                              Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                                                              ->  XN Seq Scan on web_sales  (cost=0.00..7200003.84 rows=720000384 width=8)
                                                              ->  XN Hash  (cost=1095.73..1095.73 rows=259 width=4)
                                                                    ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=259 width=4)
                                                                          Filter: ((d_year = 2002) AND (d_qoy < 4))
                                ->  XN Hash  (cost=94330271.59..94330271.59 rows=9293769 width=4)
                                      ->  XN Hash Join DS_BCAST_INNER  (cost=1096.38..94330271.59 rows=9293769 width=4)
                                            Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                            ->  XN Seq Scan on store_sales  (cost=0.00..28799879.68 rows=2748508627 width=8)
                                                  Filter: (ss_sold_date_sk IS NOT NULL)
                                            ->  XN Hash  (cost=1095.73..1095.73 rows=259 width=4)
                                                  ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=259 width=4)
                                                        Filter: ((d_year = 2002) AND (d_qoy < 4))