XN Limit  (cost=1000173849569.29..1000173849569.29 rows=2 width=143)
  ->  XN Merge  (cost=1000173849569.29..1000173849569.29 rows=2 width=143)
        Merge Key: item.i_item_id, item.i_item_desc, store.s_state
        ->  XN Network  (cost=1000173849569.29..1000173849569.29 rows=2 width=143)
              Send to leader
              ->  XN Sort  (cost=1000173849569.29..1000173849569.29 rows=2 width=143)
                    Sort Key: item.i_item_id, item.i_item_desc, store.s_state
                    ->  XN HashAggregate  (cost=173849569.14..173849569.28 rows=2 width=143)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=173042819.02..173849569.05 rows=2 width=143)
                                Hash Cond: ("outer".i_item_sk = "inner".ss_item_sk)
                                ->  XN Seq Scan on item  (cost=0.00..3000.00 rows=300000 width=129)
                                ->  XN Hash  (cost=173042819.02..173042819.02 rows=2 width=30)
                                      ->  XN Hash Join DS_BCAST_INNER  (cost=172322796.45..173042819.02 rows=2 width=30)
                                            Hash Cond: ("outer".s_store_sk = "inner".ss_store_sk)
                                            ->  XN Seq Scan on store  (cost=0.00..10.02 rows=1002 width=10)
                                            ->  XN Hash  (cost=172322796.45..172322796.45 rows=2 width=28)
                                                  ->  XN Hash Join DS_DIST_NONE  (cost=101507660.22..172322796.45 rows=2 width=28)
                                                        Hash Cond: (("outer".ss_ticket_number = "inner".sr_ticket_number) AND ("outer".ss_customer_sk = "inner".cs_bill_customer_sk) AND ("outer".ss_item_sk = "inner".cs_item_sk))
                                                        ->  XN Hash Join DS_BCAST_INNER  (cost=913.33..70708105.09 rows=2878519 width=20)
                                                              Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                              ->  XN Seq Scan on store_sales  (cost=0.00..28799879.68 rows=2505482151 width=24)
                                                                    Filter: ((ss_customer_sk IS NOT NULL) AND (ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                              ->  XN Hash  (cost=913.11..913.11 rows=88 width=4)
                                                                    ->  XN Seq Scan on date_dim d1  (cost=0.00..913.11 rows=88 width=4)
                                                                          Filter: ((d_quarter_name)::text = '2001Q1'::text)
                                                        ->  XN Hash  (cost=101506520.27..101506520.27 rows=30216 width=28)
                                                              ->  XN Hash Join DS_DIST_NONE  (cost=37683715.73..101506520.27 rows=30216 width=28)
                                                                    Hash Cond: (("outer".cs_bill_customer_sk = "inner".sr_customer_sk) AND ("outer".cs_item_sk = "inner".sr_item_sk))
                                                                    ->  XN Hash Join DS_BCAST_INNER  (cost=1279.01..63697178.33 rows=5076208 width=12)
                                                                          Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                                                                          ->  XN Seq Scan on catalog_sales  (cost=0.00..14399804.16 rows=1424426646 width=16)
                                                                                Filter: ((cs_sold_date_sk IS NOT NULL) AND (cs_bill_customer_sk IS NOT NULL))
                                                                          ->  XN Hash  (cost=1278.36..1278.36 rows=262 width=4)
                                                                                ->  XN Seq Scan on date_dim d3  (cost=0.00..1278.36 rows=262 width=4)
                                                                                      Filter: (((d_quarter_name)::text = '2001Q1'::text) OR ((d_quarter_name)::text = '2001Q2'::text) OR ((d_quarter_name)::text = '2001Q3'::text))
                                                                    ->  XN Hash  (cost=37677815.08..37677815.08 rows=924328 width=16)
                                                                          ->  XN Hash Join DS_BCAST_INNER  (cost=1279.01..37677815.08 rows=924328 width=16)
                                                                                Hash Cond: ("outer".sr_returned_date_sk = "inner".d_date_sk)
                                                                                ->  XN Seq Scan on store_returns  (cost=0.00..2879997.76 rows=267783602 width=20)
                                                                                      Filter: ((sr_returned_date_sk IS NOT NULL) AND (sr_customer_sk IS NOT NULL))
                                                                                ->  XN Hash  (cost=1278.36..1278.36 rows=262 width=4)
                                                                                      ->  XN Seq Scan on date_dim d2  (cost=0.00..1278.36 rows=262 width=4)
                                                                                            Filter: (((d_quarter_name)::text = '2001Q1'::text) OR ((d_quarter_name)::text = '2001Q2'::text) OR ((d_quarter_name)::text = '2001Q3'::text))