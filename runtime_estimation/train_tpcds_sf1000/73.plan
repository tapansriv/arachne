XN Merge  (cost=1000393726646.23..1000393726648.73 rows=997 width=43)
  Merge Key: dj.cnt, customer.c_last_name
  ->  XN Network  (cost=1000393726646.23..1000393726648.73 rows=997 width=43)
        Send to leader
        ->  XN Sort  (cost=1000393726646.23..1000393726648.73 rows=997 width=43)
              Sort Key: dj.cnt, customer.c_last_name
              ->  XN Hash Join DS_BCAST_INNER  (cost=141576586.61..393726596.58 rows=997 width=43)
                    Hash Cond: ("outer".c_customer_sk = "inner".ss_customer_sk)
                    ->  XN Seq Scan on customer  (cost=0.00..120000.00 rows=12000000 width=35)
                    ->  XN Hash  (cost=141576584.11..141576584.11 rows=1000 width=16)
                          ->  XN Subquery Scan dj  (cost=141576386.94..141576584.11 rows=1000 width=16)
                                ->  XN HashAggregate  (cost=141576386.94..141576574.11 rows=1000 width=8)
                                      Filter: ((count(*) <= 5) AND (count(*) >= 1))
                                      ->  XN Hash Join DS_BCAST_INNER  (cost=1899.34..141576199.78 rows=14973 width=8)
                                            Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                            ->  XN Hash Join DS_BCAST_INNER  (cost=1878.96..125133466.02 rows=113940 width=12)
                                                  Hash Cond: ("outer".ss_hdemo_sk = "inner".hd_demo_sk)
                                                  ->  XN Hash Join DS_BCAST_INNER  (cost=1643.73..66413775.34 rows=1702936 width=16)
                                                        Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                        ->  XN Seq Scan on store_sales  (cost=0.00..28799879.68 rows=2508417805 width=20)
                                                              Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_hdemo_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                        ->  XN Hash  (cost=1643.60..1643.60 rows=52 width=4)
                                                              ->  XN Seq Scan on date_dim  (cost=0.00..1643.60 rows=52 width=4)
                                                                    Filter: (((d_year = 2000) OR (d_year = 2001) OR (d_year = 1999)) AND (d_dom <= 2) AND (d_dom >= 1))
                                                  ->  XN Hash  (cost=234.00..234.00 rows=489 width=4)
                                                        ->  XN Seq Scan on household_demographics  (cost=0.00..234.00 rows=489 width=4)
                                                              Filter: ((((hd_buy_potential)::text = '>10000'::text) OR ((hd_buy_potential)::text = 'Unknown'::text)) AND (CASE WHEN (hd_vehicle_count > 0) THEN (((hd_dep_count)::numeric * 1.000) / (hd_vehicle_count)::numeric) ELSE NULL::numeric END > 1.00000000000000) AND (hd_vehicle_count > 0))
                                            ->  XN Hash  (cost=20.04..20.04 rows=137 width=4)
                                                  ->  XN Seq Scan on store  (cost=0.00..20.04 rows=137 width=4)
                                                        Filter: (((s_county)::text = 'Bronx County'::text) OR ((s_county)::text = 'Franklin Parish'::text) OR ((s_county)::text = 'Orange County'::text) OR ((s_county)::text = 'Williamson County'::text))