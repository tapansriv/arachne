XN Limit  (cost=14431592381233.02..14431592381233.27 rows=100 width=84)
  ->  XN Merge  (cost=14431592381233.02..14431592413662.85 rows=12971935 width=84)
        Merge Key: ss.ss_sold_year, ss.ss_item_sk, ss.ss_customer_sk, ss.ss_qty, ss.ss_wc, ss.ss_sp, (COALESCE(cs.cs_qty, 0::bigint) + COALESCE(ws.ws_qty, 0::bigint)), (COALESCE(cs.cs_wc, 0::double precision) + COALESCE(ws.ws_wc, 0::double precision)), (COALESCE(cs.cs_sp, 0::double precision) + COALESCE(ws.ws_sp, 0::double precision)), round((((ss.ss_qty)::numeric * 1.00) / ((COALESCE(cs.cs_qty, 0::bigint) + COALESCE(ws.ws_qty, 0::bigint)))::numeric), 2)
        ->  XN Network  (cost=14431592381233.02..14431592413662.85 rows=12971935 width=84)
              Send to leader
              ->  XN Sort  (cost=14431592381233.02..14431592413662.85 rows=12971935 width=84)
                    Sort Key: ss.ss_sold_year, ss.ss_item_sk, ss.ss_customer_sk, ss.ss_qty, ss.ss_wc, ss.ss_sp, (COALESCE(cs.cs_qty, 0::bigint) + COALESCE(ws.ws_qty, 0::bigint)), (COALESCE(cs.cs_wc, 0::double precision) + COALESCE(ws.ws_wc, 0::double precision)), (COALESCE(cs.cs_sp, 0::double precision) + COALESCE(ws.ws_sp, 0::double precision)), round((((ss.ss_qty)::numeric * 1.00) / ((COALESCE(cs.cs_qty, 0::bigint) + COALESCE(ws.ws_qty, 0::bigint)))::numeric), 2)
                    ->  XN Hash Left Join DS_DIST_NONE  (cost=11541688468852.38..13431590848670.87 rows=12971935 width=84)
                          Hash Cond: (("outer".ss_customer_sk = "inner".cs_customer_sk) AND ("outer".ss_item_sk = "inner".cs_item_sk) AND ("outer".ss_sold_year = "inner".cs_sold_year))
                          Filter: ((COALESCE("inner".cs_qty, 0::bigint) > 0) OR (COALESCE("outer".ws_qty, 0::bigint) > 0))
                          ->  XN Hash Left Join DS_BCAST_INNER  (cost=11537444027016.78..13164379695038.86 rows=12971935 width=60)
                                Hash Cond: (("outer".ss_customer_sk = "inner".ws_customer_sk) AND ("outer".ss_item_sk = "inner".ws_item_sk) AND ("outer".ss_sold_year = "inner".ws_sold_year))
                                ->  XN Subquery Scan ss  (cost=16727775690.71..16728002699.57 rows=12971935 width=36)
                                      ->  XN HashAggregate  (cost=16727775690.71..16727872980.22 rows=12971935 width=32)
                                            ->  XN Hash Join DS_BCAST_INNER  (cost=4320910.62..16727581111.69 rows=12971935 width=32)
                                                  Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                  ->  XN Hash Left Join DS_DIST_NONE  (cost=4319996.64..16636250628.76 rows=2879987968 width=32)
                                                        Hash Cond: (("outer".ss_ticket_number = "inner".sr_ticket_number) AND ("outer".ss_item_sk = "inner".sr_item_sk))
                                                        Filter: ("inner".sr_ticket_number IS NULL)
                                                        ->  XN Seq Scan on store_sales  (cost=0.00..28799879.68 rows=2879987968 width=36)
                                                        ->  XN Hash  (cost=2879997.76..2879997.76 rows=287999776 width=8)
                                                              ->  XN Seq Scan on store_returns  (cost=0.00..2879997.76 rows=287999776 width=8)
                                                  ->  XN Hash  (cost=913.11..913.11 rows=345 width=8)
                                                        ->  XN Seq Scan on date_dim  (cost=0.00..913.11 rows=345 width=8)
                                                              Filter: (d_year = 2000)
                                ->  XN Hash  (cost=11520716225847.66..11520716225847.66 rows=3397121 width=36)
                                      ->  XN Subquery Scan ws  (cost=11520716166398.04..11520716225847.66 rows=3397121 width=36)
                                            ->  XN HashAggregate  (cost=11520716166398.04..11520716191876.45 rows=3397121 width=32)
                                                  ->  XN Hash Join DS_BCAST_INNER  (cost=1080876.78..11520716115441.23 rows=3397121 width=32)
                                                        Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                                                        ->  XN Hash Left Join DS_BCAST_INNER  (cost=1079962.80..11520651880551.24 rows=720000384 width=32)
                                                              Hash Cond: (("outer".ws_order_number = "inner".wr_order_number) AND ("outer".ws_item_sk = "inner".wr_item_sk))
                                                              Filter: ("inner".wr_order_number IS NULL)
                                                              ->  XN Seq Scan on web_sales  (cost=0.00..7200003.84 rows=720000384 width=36)
                                                              ->  XN Hash  (cost=719975.20..719975.20 rows=71997520 width=8)
                                                                    ->  XN Seq Scan on web_returns  (cost=0.00..719975.20 rows=71997520 width=8)
                                                        ->  XN Hash  (cost=913.11..913.11 rows=345 width=8)
                                                              ->  XN Seq Scan on date_dim  (cost=0.00..913.11 rows=345 width=8)
                                                                    Filter: (d_year = 2000)
                          ->  XN Hash  (cost=4244391155.78..4244391155.78 rows=6757308 width=36)
                                ->  XN Subquery Scan cs  (cost=4244272902.89..4244391155.78 rows=6757308 width=36)
                                      ->  XN HashAggregate  (cost=4244272902.89..4244323582.70 rows=6757308 width=32)
                                            ->  XN Hash Join DS_BCAST_INNER  (cost=2160865.25..4244171543.27 rows=6757308 width=32)
                                                  Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                                                  ->  XN Hash Left Join DS_DIST_NONE  (cost=2159951.28..4170903301.02 rows=1439980416 width=32)
                                                        Hash Cond: (("outer".cs_order_number = "inner".cr_order_number) AND ("outer".cs_item_sk = "inner".cr_item_sk))
                                                        Filter: ("inner".cr_order_number IS NULL)
                                                        ->  XN Seq Scan on catalog_sales  (cost=0.00..14399804.16 rows=1439980416 width=36)
                                                        ->  XN Hash  (cost=1439967.52..1439967.52 rows=143996752 width=8)
                                                              ->  XN Seq Scan on catalog_returns  (cost=0.00..1439967.52 rows=143996752 width=8)
                                                  ->  XN Hash  (cost=913.11..913.11 rows=345 width=8)
                                                        ->  XN Seq Scan on date_dim  (cost=0.00..913.11 rows=345 width=8)
                                                              Filter: (d_year = 2000)