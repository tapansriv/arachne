XN Merge  (cost=1000057387410.65..1000057387414.98 rows=1733 width=56)
  Merge Key: inv1.w_warehouse_sk, inv1.i_item_sk, inv1.d_moy, inv1.mean, inv1.cov, inv2.d_moy, inv2.mean, inv2.cov
  ->  XN Network  (cost=1000057387410.65..1000057387414.98 rows=1733 width=56)
        Send to leader
        ->  XN Sort  (cost=1000057387410.65..1000057387414.98 rows=1733 width=56)
              Sort Key: inv1.w_warehouse_sk, inv1.i_item_sk, inv1.d_moy, inv1.mean, inv1.cov, inv2.d_moy, inv2.mean, inv2.cov
              ->  XN Hash Join DS_DIST_NONE  (cost=57383962.93..57387317.42 rows=1733 width=56)
                    Hash Cond: (("outer".i_item_sk = "inner".i_item_sk) AND ("outer".w_warehouse_sk = "inner".w_warehouse_sk))
                    ->  XN Subquery Scan inv1  (cost=29013393.83..29014743.07 rows=1000 width=28)
                          ->  XN HashAggregate  (cost=29013393.83..29014733.07 rows=1000 width=36)
                                Filter: (CASE WHEN (avg(inv_quantity_on_hand) = 0) THEN 0::double precision ELSE ((stddev((inv_quantity_on_hand)::double precision) * 1::double precision) / (avg(inv_quantity_on_hand))::double precision) END > 1::double precision)
                                ->  XN Hash Join DS_DIST_NONE  (cost=4846.06..29004018.45 rows=340923 width=36)
                                      Hash Cond: ("outer".inv_item_sk = "inner".i_item_sk)
                                      ->  XN Hash Join DS_BCAST_INNER  (cost=1096.06..28989387.92 rows=332057 width=36)
                                            Hash Cond: ("outer".inv_warehouse_sk = "inner".w_warehouse_sk)
                                            ->  XN Hash Join DS_BCAST_INNER  (cost=1095.81..22581916.38 rows=332057 width=16)
                                                  Hash Cond: ("outer".inv_date_sk = "inner".d_date_sk)
                                                  ->  XN Seq Scan on inventory  (cost=0.00..7830000.00 rows=783000000 width=16)
                                                  ->  XN Hash  (cost=1095.73..1095.73 rows=31 width=8)
                                                        ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=31 width=8)
                                                              Filter: ((d_year = 2001) AND (d_moy = 1))
                                            ->  XN Hash  (cost=0.20..0.20 rows=20 width=24)
                                                  ->  XN Seq Scan on warehouse  (cost=0.00..0.20 rows=20 width=24)
                                      ->  XN Hash  (cost=3000.00..3000.00 rows=300000 width=4)
                                            ->  XN Seq Scan on item  (cost=0.00..3000.00 rows=300000 width=4)
                    ->  XN Hash  (cost=28370564.10..28370564.10 rows=1000 width=28)
                          ->  XN Subquery Scan inv2  (cost=28369387.65..28370564.10 rows=1000 width=28)
                                ->  XN HashAggregate  (cost=28369387.65..28370554.10 rows=1000 width=36)
                                      Filter: (CASE WHEN (avg(inv_quantity_on_hand) = 0) THEN 0::double precision ELSE ((stddev((inv_quantity_on_hand)::double precision) * 1::double precision) / (avg(inv_quantity_on_hand))::double precision) END > 1::double precision)
                                      ->  XN Hash Join DS_DIST_NONE  (cost=4846.05..28361222.00 rows=296933 width=36)
                                            Hash Cond: ("outer".inv_item_sk = "inner".i_item_sk)
                                            ->  XN Hash Join DS_BCAST_INNER  (cost=1096.05..28347995.41 rows=289211 width=36)
                                                  Hash Cond: ("outer".inv_warehouse_sk = "inner".w_warehouse_sk)
                                                  ->  XN Hash Join DS_BCAST_INNER  (cost=1095.80..21941487.91 rows=289211 width=16)
                                                        Hash Cond: ("outer".inv_date_sk = "inner".d_date_sk)
                                                        ->  XN Seq Scan on inventory  (cost=0.00..7830000.00 rows=783000000 width=16)
                                                        ->  XN Hash  (cost=1095.73..1095.73 rows=27 width=8)
                                                              ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=27 width=8)
                                                                    Filter: ((d_year = 2001) AND (d_moy = 2))
                                                  ->  XN Hash  (cost=0.20..0.20 rows=20 width=24)
                                                        ->  XN Seq Scan on warehouse  (cost=0.00..0.20 rows=20 width=24)
                                            ->  XN Hash  (cost=3000.00..3000.00 rows=300000 width=4)
                                                  ->  XN Seq Scan on item  (cost=0.00..3000.00 rows=300000 width=4)