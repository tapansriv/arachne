XN HashAggregate  (cost=285256786.17..285635607.86 rows=1000 width=113)
  Filter: (count(*) > 4)
  ->  XN Hash Join DS_DIST_NONE  (cost=5214.41..284751690.58 rows=50509559 width=113)
        Hash Cond: ("outer".ss_item_sk = "inner".i_item_sk)
        ->  XN Hash Join DS_BCAST_INNER  (cost=1464.41..283009661.67 rows=49195974 width=8)
              Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
              ->  XN Seq Scan on store_sales  (cost=0.00..28799879.68 rows=2748508627 width=8)
                    Filter: (ss_sold_date_sk IS NOT NULL)
              ->  XN Hash  (cost=1460.98..1460.98 rows=1371 width=8)
                    ->  XN Seq Scan on date_dim  (cost=0.00..1460.98 rows=1371 width=8)
                          Filter: ((2000 = d_year) OR (2001 = d_year) OR (2002 = d_year) OR (2003 = d_year))
        ->  XN Hash  (cost=3000.00..3000.00 rows=300000 width=109)
              ->  XN Seq Scan on item  (cost=0.00..3000.00 rows=300000 width=109)

XN HashAggregate  (cost=2880697191552.80..2880697371552.80 rows=1000 width=24)
  Filter: (("max"(tpcds_cmax) * 0.5::double precision) < sum(((ss_quantity)::double precision * ss_sales_price)))
  ->  XN Nested Loop DS_BCAST_INNER  (cost=1440233533880.54..2880677585043.09 rows=2614201294 width=24)
        ->  XN Hash Join DS_BCAST_INNER  (cost=150000.00..1440391731607.36 rows=2614201294 width=16)
              Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
              ->  XN Seq Scan on store_sales  (cost=0.00..28799879.68 rows=2748079304 width=16)
                    Filter: (ss_customer_sk IS NOT NULL)
              ->  XN Hash  (cost=120000.00..120000.00 rows=12000000 width=4)
                    ->  XN Seq Scan on customer  (cost=0.00..120000.00 rows=12000000 width=4)
        ->  XN Materialize  (cost=1440233383880.54..1440233383880.55 rows=1 width=8)
              ->  XN Subquery Scan max_store_sales  (cost=1440233383864.53..1440233383864.54 rows=1 width=8)
                    ->  XN Aggregate  (cost=1440233383864.53..1440233383864.53 rows=1 width=8)
                          ->  XN Subquery Scan sq2  (cost=1440233143864.53..1440233353864.53 rows=12000000 width=8)
                                ->  XN HashAggregate  (cost=1440233143864.53..1440233233864.53 rows=12000000 width=16)
                                      ->  XN Hash Join DS_BCAST_INNER  (cost=151464.41..1440232920585.51 rows=44655804 width=16)
                                            Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                            ->  XN Hash Join DS_BCAST_INNER  (cost=1464.41..226573545.62 rows=46942709 width=16)
                                                  Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                  ->  XN Seq Scan on store_sales  (cost=0.00..28799879.68 rows=2622621955 width=20)
                                                        Filter: ((ss_customer_sk IS NOT NULL) AND (ss_sold_date_sk IS NOT NULL))
                                                  ->  XN Hash  (cost=1460.98..1460.98 rows=1371 width=4)
                                                        ->  XN Seq Scan on date_dim  (cost=0.00..1460.98 rows=1371 width=4)
                                                              Filter: ((2000 = d_year) OR (2001 = d_year) OR (2002 = d_year) OR (2003 = d_year))
                                            ->  XN Hash  (cost=120000.00..120000.00 rows=12000000 width=4)
                                                  ->  XN Seq Scan on customer  (cost=0.00..120000.00 rows=12000000 width=4)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----

XN Subquery Scan sq3  (cost=3552145042165.29..3552145042166.54 rows=100 width=72)
  ->  XN Limit  (cost=3552145042165.29..3552145042165.54 rows=100 width=31)
        ->  XN Merge  (cost=3552145042165.29..3552145042165.79 rows=200 width=31)
              Merge Key: c_last_name, c_first_name, sales
              ->  XN Network  (cost=3552145042165.29..3552145042165.79 rows=200 width=31)
                    Send to leader
                    ->  XN Sort  (cost=3552145042165.29..3552145042165.79 rows=200 width=31)
                          Sort Key: c_last_name, c_first_name, sales
                          ->  XN Append  (cost=1364908623617.19..2552145042157.65 rows=200 width=31)
                                ->  XN Subquery Scan "*SELECT* 1"  (cost=1364908623617.19..1364908623618.44 rows=100 width=31)
                                      ->  XN Limit  (cost=1364908623617.19..1364908623617.44 rows=100 width=31)
                                            ->  XN Sort  (cost=1364908623617.19..1364908626617.19 rows=1200000 width=31)
                                                  Sort Key: customer.c_last_name, customer.c_first_name, sum((catalog_sales.cs_list_price * (catalog_sales.cs_quantity)::double precision))
                                                  ->  XN HashAggregate  (cost=364908493449.57..364908502449.57 rows=1200000 width=31)
                                                        ->  XN Hash Join DS_BCAST_INNER  (cost=238900800204.21..364907504785.87 rows=131821826 width=31)
                                                              Hash Cond: ("outer".i_item_sk = "inner".cs_item_sk)
                                                              ->  XN Seq Scan on volt_tt_618fe79a2043e  (cost=0.00..1345050.40 rows=134505040 width=4)
                                                              ->  XN Hash  (cost=238900799488.29..238900799488.29 rows=286369 width=35)
                                                                    ->  XN Hash Join DS_BCAST_INNER  (cost=146509486624.60..238900799488.29 rows=286369 width=35)
                                                                          Hash Cond: ("outer".c_customer_sk = "inner".cs_bill_customer_sk)
                                                                          ->  XN Seq Scan on customer  (cost=0.00..120000.00 rows=12000000 width=23)
                                                                          ->  XN Hash  (cost=146509485902.80..146509485902.80 rows=288722 width=24)
                                                                                ->  XN Hash Join DS_BCAST_INNER  (cost=35452772.05..146509485902.80 rows=288722 width=24)
                                                                                      Hash Cond: ("outer".c_customer_sk = "inner".cs_bill_customer_sk)
                                                                                      ->  XN Seq Scan on volt_tt_618fe79a222b3  (cost=0.00..66774.90 rows=6677490 width=4)
                                                                                      ->  XN Hash  (cost=35451464.25..35451464.25 rows=523121 width=20)
                                                                                            ->  XN Hash Join DS_BCAST_INNER  (cost=1095.80..35451464.25 rows=523121 width=20)
                                                                                                  Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                                                                                                  ->  XN Seq Scan on catalog_sales  (cost=0.00..14399804.16 rows=1424426646 width=24)
                                                                                                        Filter: ((cs_sold_date_sk IS NOT NULL) AND (cs_bill_customer_sk IS NOT NULL))
                                                                                                  ->  XN Hash  (cost=1095.73..1095.73 rows=27 width=4)
                                                                                                        ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=27 width=4)
                                                                                                              Filter: ((d_year = 2000) AND (d_moy = 2))
                                ->  XN Subquery Scan "*SELECT* 2"  (cost=1187236418537.96..1187236418539.21 rows=100 width=31)
                                      ->  XN Limit  (cost=1187236418537.96..1187236418538.21 rows=100 width=31)
                                            ->  XN Sort  (cost=1187236418537.96..1187236421537.96 rows=1200000 width=31)
                                                  Sort Key: customer.c_last_name, customer.c_first_name, sum((web_sales.ws_list_price * (web_sales.ws_quantity)::double precision))
                                                  ->  XN HashAggregate  (cost=187236288370.35..187236297370.35 rows=1200000 width=31)
                                                        ->  XN Hash Join DS_BCAST_INNER  (cost=122035948381.79..187235776817.46 rows=68207051 width=31)
                                                              Hash Cond: ("outer".i_item_sk = "inner".ws_item_sk)
                                                              ->  XN Seq Scan on volt_tt_618fe79a2043e  (cost=0.00..1345050.40 rows=134505040 width=4)
                                                              ->  XN Hash  (cost=122035948011.36..122035948011.36 rows=148173 width=35)
                                                                    ->  XN Hash Join DS_BCAST_INNER  (cost=74460956529.63..122035948011.36 rows=148173 width=35)
                                                                          Hash Cond: ("outer".c_customer_sk = "inner".ws_bill_customer_sk)
                                                                          ->  XN Seq Scan on customer  (cost=0.00..120000.00 rows=12000000 width=23)
                                                                          ->  XN Hash  (cost=74460956157.95..74460956157.95 rows=148671 width=24)
                                                                                ->  XN Hash Join DS_BCAST_INNER  (cost=19444427.72..74460956157.95 rows=148671 width=24)
                                                                                      Hash Cond: ("outer".c_customer_sk = "inner".ws_bill_customer_sk)
                                                                                      ->  XN Seq Scan on volt_tt_618fe79a222b3  (cost=0.00..66774.90 rows=6677490 width=4)
                                                                                      ->  XN Hash  (cost=19443763.06..19443763.06 rows=265862 width=20)
                                                                                            ->  XN Hash Join DS_BCAST_INNER  (cost=1095.80..19443763.06 rows=265862 width=20)
                                                                                                  Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                                                                                                  ->  XN Seq Scan on web_sales  (cost=0.00..7200003.84 rows=720000384 width=24)
                                                                                                  ->  XN Hash  (cost=1095.73..1095.73 rows=27 width=4)
                                                                                                        ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=27 width=4)
                                                                                                              Filter: ((d_year = 2000) AND (d_moy = 2))