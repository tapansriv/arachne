XN HashAggregate  (cost=35787609.52..35787609.72 rows=40 width=20)
  ->  XN Hash Join DS_BCAST_INNER  (cost=1095.81..35783373.84 rows=564758 width=20)
        Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
        ->  XN Seq Scan on catalog_sales  (cost=0.00..14399804.16 rows=1431746103 width=24)
              Filter: (cs_sold_date_sk IS NOT NULL)
        ->  XN Hash  (cost=1095.73..1095.73 rows=29 width=4)
              ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=29 width=4)
                    Filter: ((d_date >= '2000-08-23'::date) AND (d_date <= '2000-09-22'::date))

XN HashAggregate  (cost=129946301.04..129946306.02 rows=996 width=20)
  ->  XN Hash Join DS_BCAST_INNER  (cost=1108.33..129945558.91 rows=98950 width=20)
        Hash Cond: ("outer".sr_store_sk = "inner".s_store_sk)
        ->  XN Hash Join DS_BCAST_INNER  (cost=1095.81..9702259.80 rows=102093 width=20)
              Hash Cond: ("outer".sr_returned_date_sk = "inner".d_date_sk)
              ->  XN Seq Scan on store_returns  (cost=0.00..2879997.76 rows=267211624 width=24)
                    Filter: ((sr_returned_date_sk IS NOT NULL) AND (sr_store_sk IS NOT NULL))
              ->  XN Hash  (cost=1095.73..1095.73 rows=29 width=4)
                    ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=29 width=4)
                          Filter: ((d_date >= '2000-08-23'::date) AND (d_date <= '2000-09-22'::date))
        ->  XN Hash  (cost=10.02..10.02 rows=1002 width=4)
              ->  XN Seq Scan on store  (cost=0.00..10.02 rows=1002 width=4)

XN HashAggregate  (cost=185391843.84..185391848.82 rows=996 width=20)
  ->  XN Hash Join DS_BCAST_INNER  (cost=1108.33..185384677.93 rows=955454 width=20)
        Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
        ->  XN Hash Join DS_BCAST_INNER  (cost=1095.81..65112742.80 rows=994136 width=20)
              Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
              ->  XN Seq Scan on store_sales  (cost=0.00..28799879.68 rows=2625746076 width=24)
                    Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
              ->  XN Hash  (cost=1095.73..1095.73 rows=29 width=4)
                    ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=29 width=4)
                          Filter: ((d_date >= '2000-08-23'::date) AND (d_date <= '2000-09-22'::date))
        ->  XN Hash  (cost=10.02..10.02 rows=1002 width=4)
              ->  XN Seq Scan on store  (cost=0.00..10.02 rows=1002 width=4)

XN HashAggregate  (cost=365020665.07..365020680.07 rows=3000 width=20)
  ->  XN Hash Join DS_BCAST_INNER  (cost=1133.31..365020489.24 rows=23444 width=20)
        Hash Cond: ("outer".wr_web_page_sk = "inner".wp_web_page_sk)
        ->  XN Hash Join DS_BCAST_INNER  (cost=1095.81..5019907.47 rows=24786 width=20)
              Hash Cond: ("outer".wr_returned_date_sk = "inner".d_date_sk)
              ->  XN Seq Scan on web_returns  (cost=0.00..719975.20 rows=65487088 width=24)
                    Filter: ((wr_web_page_sk IS NOT NULL) AND (wr_returned_date_sk IS NOT NULL))
              ->  XN Hash  (cost=1095.73..1095.73 rows=29 width=4)
                    ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=29 width=4)
                          Filter: ((d_date >= '2000-08-23'::date) AND (d_date <= '2000-09-22'::date))
        ->  XN Hash  (cost=30.00..30.00 rows=3000 width=4)
              ->  XN Seq Scan on web_page  (cost=0.00..30.00 rows=3000 width=4)

XN HashAggregate  (cost=379692522.50..379692537.50 rows=3000 width=20)
  ->  XN Hash Join DS_BCAST_INNER  (cost=1133.31..379690398.70 rows=283173 width=20)
        Hash Cond: ("outer".ws_web_page_sk = "inner".wp_web_page_sk)
        ->  XN Hash Join DS_BCAST_INNER  (cost=1095.81..19683960.01 rows=285556 width=20)
              Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
              ->  XN Seq Scan on web_sales  (cost=0.00..7200003.84 rows=720000384 width=24)
              ->  XN Hash  (cost=1095.73..1095.73 rows=29 width=4)
                    ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=29 width=4)
                          Filter: ((d_date >= '2000-08-23'::date) AND (d_date <= '2000-09-22'::date))
        ->  XN Hash  (cost=30.00..30.00 rows=3000 width=4)
              ->  XN Seq Scan on web_page  (cost=0.00..30.00 rows=3000 width=4)

XN HashAggregate  (cost=6722022.45..6722022.65 rows=40 width=20)
  ->  XN Hash Join DS_BCAST_INNER  (cost=1095.81..6721594.00 rows=57127 width=20)
        Hash Cond: ("outer".cr_returned_date_sk = "inner".d_date_sk)
        ->  XN Seq Scan on catalog_returns  (cost=0.00..1439967.52 rows=143996752 width=24)
        ->  XN Hash  (cost=1095.73..1095.73 rows=29 width=4)
              ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=29 width=4)
                    Filter: ((d_date >= '2000-08-23'::date) AND (d_date <= '2000-09-22'::date))

XN Nested Loop DS_BCAST_INNER  (cost=0.00..5280014.64 rows=638 width=32)
  ->  XN Seq Scan on volt_tt_618ff360dc458  (cost=0.00..0.29 rows=29 width=16)
  ->  XN Seq Scan on volt_tt_618ff360d0324  (cost=0.00..0.22 rows=22 width=16)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----

XN Subquery Scan foo  (cost=3000006160573.54..3000006160574.79 rows=100 width=60)
  ->  XN Limit  (cost=3000006160573.54..3000006160573.79 rows=100 width=60)
        ->  XN Merge  (cost=3000006160573.54..3000006160573.80 rows=104 width=60)
              Merge Key: channel, id
              ->  XN Network  (cost=3000006160573.54..3000006160573.80 rows=104 width=60)
                    Send to leader
                    ->  XN Sort  (cost=3000006160573.54..3000006160573.80 rows=104 width=60)
                          Sort Key: channel, id
                          ->  XN Unique  (cost=1000006160265.13..2000006160570.06 rows=104 width=60)
                                ->  XN Append  (cost=1000006160265.13..2000006160568.76 rows=104 width=60)
                                      ->  XN Subquery Scan "*SELECT* 1"  (cost=1000006160265.13..1000006160266.38 rows=100 width=60)
                                            ->  XN Limit  (cost=1000006160265.13..1000006160265.38 rows=100 width=60)
                                                  ->  XN Sort  (cost=1000006160265.13..1000006160265.63 rows=202 width=60)
                                                        Sort Key: derived_col1, derived_col2
                                                        ->  XN Unique  (cost=6160253.35..6160257.39 rows=202 width=60)
                                                              ->  XN HashAggregate  (cost=6160253.35..6160254.87 rows=202 width=60)
                                                                    ->  XN Subquery Scan x  (cost=28.77..6160228.14 rows=2017 width=60)
                                                                          ->  XN Append  (cost=28.77..6160207.97 rows=2017 width=36)
                                                                                ->  XN Subquery Scan "*SELECT* 1"  (cost=28.77..38.79 rows=501 width=36)
                                                                                      ->  XN HashAggregate  (cost=28.77..33.78 rows=501 width=36)
                                                                                            ->  XN Hash Left Join DS_DIST_NONE  (cost=6.26..22.50 rows=501 width=36)
                                                                                                  Hash Cond: ("outer".s_store_sk = "inner".s_store_sk)
                                                                                                  ->  XN Seq Scan on volt_tt_618ff360d56e1  (cost=0.00..5.01 rows=501 width=20)
                                                                                                  ->  XN Hash  (cost=5.01..5.01 rows=501 width=20)
                                                                                                        ->  XN Seq Scan on volt_tt_618ff360d2bda  (cost=0.00..5.01 rows=501 width=20)
                                                                                ->  XN Subquery Scan "*SELECT* 2"  (cost=6160021.03..6160021.45 rows=21 width=36)
                                                                                      ->  XN HashAggregate  (cost=6160021.03..6160021.24 rows=21 width=36)
                                                                                            ->  XN Nested Loop DS_BCAST_INNER  (cost=0.00..6160013.05 rows=638 width=36)
                                                                                                  ->  XN Seq Scan on volt_tt_618ff360dc458  (cost=0.00..0.29 rows=29 width=16)
                                                                                                  ->  XN Seq Scan on volt_tt_618ff360d0324  (cost=0.00..0.22 rows=22 width=20)
                                                                                ->  XN Subquery Scan "*SELECT* 3"  (cost=117.84..147.74 rows=1495 width=36)
                                                                                      ->  XN HashAggregate  (cost=117.84..132.79 rows=1495 width=36)
                                                                                            ->  XN Hash Right Join DS_DIST_NONE  (cost=18.75..98.90 rows=1515 width=36)
                                                                                                  Hash Cond: ("outer".wp_web_page_sk = "inner".wp_web_page_sk)
                                                                                                  ->  XN Seq Scan on volt_tt_618ff360d7dea  (cost=0.00..20.00 rows=2000 width=20)
                                                                                                  ->  XN Hash  (cost=15.00..15.00 rows=1500 width=20)
                                                                                                        ->  XN Seq Scan on volt_tt_618ff360da560  (cost=0.00..15.00 rows=1500 width=20)
                                      ->  XN Subquery Scan "*SELECT* 2"  (cost=1000000000154.53..1000000000154.56 rows=3 width=56)
                                            ->  XN Limit  (cost=1000000000154.53..1000000000154.53 rows=3 width=56)
                                                  ->  XN Sort  (cost=1000000000154.53..1000000000154.53 rows=3 width=56)
                                                        Sort Key: derived_col1, NULL::integer
                                                        ->  XN Unique  (cost=154.44..154.50 rows=3 width=56)
                                                              ->  XN HashAggregate  (cost=154.44..154.47 rows=3 width=56)
                                                                    ->  XN Subquery Scan x  (cost=27.52..154.41 rows=3 width=56)
                                                                          ->  XN Append  (cost=27.52..154.38 rows=3 width=43)
                                                                                ->  XN Subquery Scan "*SELECT* 1"  (cost=27.52..27.54 rows=1 width=32)
                                                                                      ->  XN HashAggregate  (cost=27.52..27.53 rows=1 width=32)
                                                                                            ->  XN Hash Left Join DS_DIST_NONE  (cost=6.26..22.50 rows=501 width=32)
                                                                                                  Hash Cond: ("outer".s_store_sk = "inner".s_store_sk)
                                                                                                  ->  XN Seq Scan on volt_tt_618ff360d56e1  (cost=0.00..5.01 rows=501 width=20)
                                                                                                  ->  XN Hash  (cost=5.01..5.01 rows=501 width=20)
                                                                                                        ->  XN Seq Scan on volt_tt_618ff360d2bda  (cost=0.00..5.01 rows=501 width=20)
                                                                                ->  XN Subquery Scan "*SELECT* 2"  (cost=12.76..12.78 rows=1 width=43)
                                                                                      ->  XN HashAggregate  (cost=12.76..12.77 rows=1 width=43)
                                                                                            ->  XN Seq Scan on volt_tt_618ff360de980  (cost=0.00..6.38 rows=638 width=43)
                                                                                ->  XN Subquery Scan "*SELECT* 3"  (cost=114.05..114.07 rows=1 width=32)
                                                                                      ->  XN HashAggregate  (cost=114.05..114.06 rows=1 width=32)
                                                                                            ->  XN Hash Right Join DS_DIST_NONE  (cost=18.75..98.90 rows=1515 width=32)
                                                                                                  Hash Cond: ("outer".wp_web_page_sk = "inner".wp_web_page_sk)
                                                                                                  ->  XN Seq Scan on volt_tt_618ff360d7dea  (cost=0.00..20.00 rows=2000 width=20)
                                                                                                  ->  XN Hash  (cost=15.00..15.00 rows=1500 width=20)
                                                                                                        ->  XN Seq Scan on volt_tt_618ff360da560  (cost=0.00..15.00 rows=1500 width=20)
                                      ->  XN Network  (cost=147.81..147.82 rows=1 width=24)
                                            Distribute Round Robin
                                            ->  XN Subquery Scan "*SELECT* 3"  (cost=147.81..147.82 rows=1 width=24)
                                                  ->  XN Aggregate  (cost=147.81..147.81 rows=1 width=24)
                                                        ->  XN Subquery Scan x  (cost=26.27..147.78 rows=3 width=24)
                                                              ->  XN Append  (cost=26.27..147.75 rows=3 width=32)
                                                                    ->  XN Subquery Scan "*SELECT* 1"  (cost=26.27..26.28 rows=1 width=32)
                                                                          ->  XN Aggregate  (cost=26.27..26.27 rows=1 width=32)
                                                                                ->  XN Hash Left Join DS_DIST_NONE  (cost=6.26..22.50 rows=501 width=32)
                                                                                      Hash Cond: ("outer".s_store_sk = "inner".s_store_sk)
                                                                                      ->  XN Seq Scan on volt_tt_618ff360d56e1  (cost=0.00..5.01 rows=501 width=20)
                                                                                      ->  XN Hash  (cost=5.01..5.01 rows=501 width=20)
                                                                                            ->  XN Seq Scan on volt_tt_618ff360d2bda  (cost=0.00..5.01 rows=501 width=20)
                                                                    ->  XN Subquery Scan "*SELECT* 2"  (cost=11.17..11.18 rows=1 width=24)
                                                                          ->  XN Aggregate  (cost=11.17..11.17 rows=1 width=24)
                                                                                ->  XN Seq Scan on volt_tt_618ff360de980  (cost=0.00..6.38 rows=638 width=24)
                                                                    ->  XN Subquery Scan "*SELECT* 3"  (cost=110.27..110.28 rows=1 width=32)
                                                                          ->  XN Aggregate  (cost=110.27..110.27 rows=1 width=32)
                                                                                ->  XN Hash Right Join DS_DIST_NONE  (cost=18.75..98.90 rows=1515 width=32)
                                                                                      Hash Cond: ("outer".wp_web_page_sk = "inner".wp_web_page_sk)
                                                                                      ->  XN Seq Scan on volt_tt_618ff360d7dea  (cost=0.00..20.00 rows=2000 width=20)
                                                                                      ->  XN Hash  (cost=15.00..15.00 rows=1500 width=20)
                                                                                            ->  XN Seq Scan on volt_tt_618ff360da560  (cost=0.00..15.00 rows=1500 width=20)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----