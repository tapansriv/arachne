XN Subquery Scan tmp1  (cost=1000300086218.74..1000300086219.26 rows=7 width=10)
  Filter: (col1 <= 5)
  ->  XN Window  (cost=1000300086218.74..1000300086219.00 rows=21 width=14)
        Partition: store.s_state
        Order: sum(store_sales.ss_net_profit)
        ->  XN Sort  (cost=1000300086218.74..1000300086218.79 rows=21 width=14)
              Sort Key: store.s_state, sum(store_sales.ss_net_profit)
              ->  XN HashAggregate  (cost=300086218.23..300086218.28 rows=21 width=14)
                    ->  XN Hash Join DS_BCAST_INNER  (cost=1109.04..300034656.66 rows=10312313 width=14)
                          Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=1096.52..99290100.26 rows=10729811 width=12)
                                Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                ->  XN Seq Scan on store_sales  (cost=0.00..28799879.68 rows=2625746076 width=16)
                                      Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                ->  XN Hash  (cost=1095.73..1095.73 rows=313 width=4)
                                      ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=313 width=4)
                                            Filter: ((d_month_seq >= 1200) AND (d_month_seq <= 1211))
                          ->  XN Hash  (cost=10.02..10.02 rows=1002 width=10)
                                ->  XN Seq Scan on store  (cost=0.00..10.02 rows=1002 width=10)

XN Limit  (cost=2000956633665.01..2000956633665.26 rows=100 width=80)
  ->  XN Merge  (cost=2000956633665.01..2000956633665.32 rows=123 width=80)
        Merge Key: lochierarchy, CASE WHEN (lochierarchy = 0) THEN s_state ELSE NULL::character varying END, pg_catalog.rank()
        ->  XN Network  (cost=2000956633665.01..2000956633665.32 rows=123 width=80)
              Send to leader
              ->  XN Sort  (cost=2000956633665.01..2000956633665.32 rows=123 width=80)
                    Sort Key: lochierarchy, CASE WHEN (lochierarchy = 0) THEN s_state ELSE NULL::character varying END, pg_catalog.rank()
                    ->  XN Window  (cost=1000956633657.66..1000956633660.74 rows=123 width=80)
                          Partition: lochierarchy, CASE WHEN (g_county = 0) THEN s_state ELSE NULL::character varying END
                          Order: total_sum
                          ->  XN Sort  (cost=1000956633657.66..1000956633657.97 rows=123 width=80)
                                Sort Key: lochierarchy, CASE WHEN (g_county = 0) THEN s_state ELSE NULL::character varying END, total_sum
                                ->  XN Network  (cost=445835702.39..956633653.39 rows=123 width=80)
                                      Distribute
                                      ->  XN Subquery Scan results_rollup  (cost=445835702.39..956633653.39 rows=123 width=80)
                                            ->  XN Unique  (cost=445835702.39..956633652.16 rows=123 width=32)
                                                  ->  XN Append  (cost=445835702.39..956633650.32 rows=123 width=32)
                                                        ->  XN Subquery Scan "*SELECT* 1"  (cost=445835702.39..445835703.65 rows=101 width=32)
                                                              ->  XN HashAggregate  (cost=445835702.39..445835702.64 rows=101 width=32)
                                                                    ->  XN Hash Join DS_BCAST_INNER  (cost=3521140.35..445762244.00 rows=9794452 width=32)
                                                                          Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                                                          ->  XN Hash Join DS_BCAST_INNER  (cost=1096.52..99290100.26 rows=10729811 width=12)
                                                                                Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                                ->  XN Seq Scan on store_sales  (cost=0.00..28799879.68 rows=2625746076 width=16)
                                                                                      Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                                                ->  XN Hash  (cost=1095.73..1095.73 rows=313 width=4)
                                                                                      ->  XN Seq Scan on date_dim d1  (cost=0.00..1095.73 rows=313 width=4)
                                                                                            Filter: ((d_month_seq >= 1200) AND (d_month_seq <= 1211))
                                                                          ->  XN Hash  (cost=3520041.46..3520041.46 rows=952 width=28)
                                                                                ->  XN Hash IN Join DS_BCAST_INNER  (cost=0.28..3520041.46 rows=952 width=28)
                                                                                      Hash Cond: (("outer".s_state)::text = ("inner".s_state)::text)
                                                                                      ->  XN Seq Scan on store  (cost=0.00..10.02 rows=1002 width=28)
                                                                                      ->  XN Hash  (cost=0.22..0.22 rows=22 width=6)
                                                                                            ->  XN Seq Scan on volt_tt_618ff32954680  (cost=0.00..0.22 rows=22 width=6)
                                                        ->  XN Subquery Scan "*SELECT* 2"  (cost=293491216.26..293491216.52 rows=21 width=14)
                                                              ->  XN HashAggregate  (cost=293491216.26..293491216.31 rows=21 width=14)
                                                                    ->  XN Hash Join DS_BCAST_INNER  (cost=3521140.35..293442244.00 rows=9794452 width=14)
                                                                          Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                                                          ->  XN Hash Join DS_BCAST_INNER  (cost=1096.52..99290100.26 rows=10729811 width=12)
                                                                                Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                                ->  XN Seq Scan on store_sales  (cost=0.00..28799879.68 rows=2625746076 width=16)
                                                                                      Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                                                ->  XN Hash  (cost=1095.73..1095.73 rows=313 width=4)
                                                                                      ->  XN Seq Scan on date_dim d1  (cost=0.00..1095.73 rows=313 width=4)
                                                                                            Filter: ((d_month_seq >= 1200) AND (d_month_seq <= 1211))
                                                                          ->  XN Hash  (cost=3520041.46..3520041.46 rows=952 width=10)
                                                                                ->  XN Hash IN Join DS_BCAST_INNER  (cost=0.28..3520041.46 rows=952 width=10)
                                                                                      Hash Cond: (("outer".s_state)::text = ("inner".s_state)::text)
                                                                                      ->  XN Seq Scan on store  (cost=0.00..10.02 rows=1002 width=10)
                                                                                      ->  XN Hash  (cost=0.22..0.22 rows=22 width=6)
                                                                                            ->  XN Seq Scan on volt_tt_618ff32954680  (cost=0.00..0.22 rows=22 width=6)
                                                        ->  XN Network  (cost=217306730.13..217306730.14 rows=1 width=8)
                                                              Distribute Round Robin
                                                              ->  XN Subquery Scan "*SELECT* 3"  (cost=217306730.13..217306730.14 rows=1 width=8)
                                                                    ->  XN Aggregate  (cost=217306730.13..217306730.13 rows=1 width=8)
                                                                          ->  XN Hash Join DS_BCAST_INNER  (cost=3521140.35..217282244.00 rows=9794452 width=8)
                                                                                Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                                                                ->  XN Hash Join DS_BCAST_INNER  (cost=1096.52..99290100.26 rows=10729811 width=12)
                                                                                      Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                                      ->  XN Seq Scan on store_sales  (cost=0.00..28799879.68 rows=2625746076 width=16)
                                                                                            Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                                                      ->  XN Hash  (cost=1095.73..1095.73 rows=313 width=4)
                                                                                            ->  XN Seq Scan on date_dim d1  (cost=0.00..1095.73 rows=313 width=4)
                                                                                                  Filter: ((d_month_seq >= 1200) AND (d_month_seq <= 1211))
                                                                                ->  XN Hash  (cost=3520041.46..3520041.46 rows=952 width=4)
                                                                                      ->  XN Hash IN Join DS_BCAST_INNER  (cost=0.28..3520041.46 rows=952 width=4)
                                                                                            Hash Cond: (("outer".s_state)::text = ("inner".s_state)::text)
                                                                                            ->  XN Seq Scan on store  (cost=0.00..10.02 rows=1002 width=10)
                                                                                            ->  XN Hash  (cost=0.22..0.22 rows=22 width=6)
                                                                                                  ->  XN Seq Scan on volt_tt_618ff32954680  (cost=0.00..0.22 rows=22 width=6)