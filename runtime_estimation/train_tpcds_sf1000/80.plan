XN HashAggregate  (cost=13970288332.86..13970288704.51 rows=29732 width=52)
  ->  XN Hash Join DS_BCAST_INNER  (cost=2165903.92..13970282785.70 rows=554716 width=52)
        Hash Cond: ("outer".cs_catalog_page_sk = "inner".cp_catalog_page_sk)
        ->  XN Hash Join DS_DIST_NONE  (cost=2165528.92..4370264772.55 rows=537377 width=36)
              Hash Cond: ("outer".cs_item_sk = "inner".i_item_sk)
              ->  XN Hash Join DS_BCAST_INNER  (cost=2161069.54..4370242488.40 rows=553378 width=40)
                    Hash Cond: ("outer".cs_promo_sk = "inner".p_promo_sk)
                    ->  XN Hash Join DS_BCAST_INNER  (cost=2161047.09..4192389832.09 rows=568006 width=44)
                          Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                          ->  XN Hash Left Join DS_DIST_NONE  (cost=2159951.28..4170903301.02 rows=1439980416 width=48)
                                Hash Cond: (("outer".cs_order_number = "inner".cr_order_number) AND ("outer".cs_item_sk = "inner".cr_item_sk))
                                ->  XN Seq Scan on catalog_sales  (cost=0.00..14399804.16 rows=1439980416 width=36)
                                ->  XN Hash  (cost=1439967.52..1439967.52 rows=143996752 width=24)
                                      ->  XN Seq Scan on catalog_returns  (cost=0.00..1439967.52 rows=143996752 width=24)
                          ->  XN Hash  (cost=1095.73..1095.73 rows=29 width=4)
                                ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=29 width=4)
                                      Filter: ((d_date >= '2000-08-23'::date) AND (d_date <= '2000-09-22'::date))
                    ->  XN Hash  (cost=18.75..18.75 rows=1482 width=4)
                          ->  XN Seq Scan on promotion  (cost=0.00..18.75 rows=1482 width=4)
                                Filter: ('N'::text = (p_channel_tv)::text)
              ->  XN Hash  (cost=3750.00..3750.00 rows=283749 width=4)
                    ->  XN Seq Scan on item  (cost=0.00..3750.00 rows=283749 width=4)
                          Filter: (i_current_price > 50::double precision)
        ->  XN Hash  (cost=300.00..300.00 rows=30000 width=24)
              ->  XN Seq Scan on catalog_page  (cost=0.00..300.00 rows=30000 width=24)

XN HashAggregate  (cost=17174324505.49..17174324511.70 rows=497 width=52)
  ->  XN Hash Join DS_DIST_NONE  (cost=4325586.80..17174315002.41 rows=950308 width=52)
        Hash Cond: ("outer".ss_item_sk = "inner".i_item_sk)
        ->  XN Hash Join DS_BCAST_INNER  (cost=4321127.43..17174279021.36 rows=978604 width=56)
              Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
              ->  XN Hash Join DS_BCAST_INNER  (cost=4321114.90..16853606312.75 rows=1018224 width=40)
                    Hash Cond: ("outer".ss_promo_sk = "inner".p_promo_sk)
                    ->  XN Hash Join DS_BCAST_INNER  (cost=4321092.45..16675742478.12 rows=1090395 width=44)
                          Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                          ->  XN Hash Left Join DS_DIST_NONE  (cost=4319996.64..16636250628.76 rows=2879987968 width=48)
                                Hash Cond: (("outer".ss_ticket_number = "inner".sr_ticket_number) AND ("outer".ss_item_sk = "inner".sr_item_sk))
                                ->  XN Seq Scan on store_sales  (cost=0.00..28799879.68 rows=2879987968 width=36)
                                ->  XN Hash  (cost=2879997.76..2879997.76 rows=287999776 width=24)
                                      ->  XN Seq Scan on store_returns  (cost=0.00..2879997.76 rows=287999776 width=24)
                          ->  XN Hash  (cost=1095.73..1095.73 rows=29 width=4)
                                ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=29 width=4)
                                      Filter: ((d_date >= '2000-08-23'::date) AND (d_date <= '2000-09-22'::date))
                    ->  XN Hash  (cost=18.75..18.75 rows=1482 width=4)
                          ->  XN Seq Scan on promotion  (cost=0.00..18.75 rows=1482 width=4)
                                Filter: ('N'::text = (p_channel_tv)::text)
              ->  XN Hash  (cost=10.02..10.02 rows=1002 width=24)
                    ->  XN Seq Scan on store  (cost=0.00..10.02 rows=1002 width=24)
        ->  XN Hash  (cost=3750.00..3750.00 rows=283749 width=4)
              ->  XN Seq Scan on item  (cost=0.00..3750.00 rows=283749 width=4)
                    Filter: (i_current_price > 50::double precision)

XN HashAggregate  (cost=23074512595987.42..23074512595987.76 rows=27 width=52)
  ->  XN Hash Join DS_BCAST_INNER  (cost=1085541.11..23074512593223.47 rows=276395 width=52)
        Hash Cond: ("outer".ws_web_site_sk = "inner".web_site_sk)
        ->  XN Hash Join DS_BCAST_INNER  (cost=1085540.44..23074495304353.54 rows=271347 width=36)
              Hash Cond: ("outer".ws_item_sk = "inner".i_item_sk)
              ->  XN Hash Join DS_BCAST_INNER  (cost=1081081.06..23040445410893.58 rows=279427 width=40)
                    Hash Cond: ("outer".ws_promo_sk = "inner".p_promo_sk)
                    ->  XN Hash Join DS_BCAST_INNER  (cost=1081058.61..23040267564507.41 rows=285556 width=44)
                          Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                          ->  XN Hash Left Join DS_BCAST_INNER  (cost=1079962.80..23040255080551.24 rows=720000384 width=48)
                                Hash Cond: (("outer".ws_order_number = "inner".wr_order_number) AND ("outer".ws_item_sk = "inner".wr_item_sk))
                                ->  XN Seq Scan on web_sales  (cost=0.00..7200003.84 rows=720000384 width=36)
                                ->  XN Hash  (cost=719975.20..719975.20 rows=71997520 width=24)
                                      ->  XN Seq Scan on web_returns  (cost=0.00..719975.20 rows=71997520 width=24)
                          ->  XN Hash  (cost=1095.73..1095.73 rows=29 width=4)
                                ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=29 width=4)
                                      Filter: ((d_date >= '2000-08-23'::date) AND (d_date <= '2000-09-22'::date))
                    ->  XN Hash  (cost=18.75..18.75 rows=1482 width=4)
                          ->  XN Seq Scan on promotion  (cost=0.00..18.75 rows=1482 width=4)
                                Filter: ('N'::text = (p_channel_tv)::text)
              ->  XN Hash  (cost=3750.00..3750.00 rows=283749 width=4)
                    ->  XN Seq Scan on item  (cost=0.00..3750.00 rows=283749 width=4)
                          Filter: (i_current_price > 50::double precision)
        ->  XN Hash  (cost=0.54..0.54 rows=54 width=24)
              ->  XN Seq Scan on web_site  (cost=0.00..0.54 rows=54 width=24)

XN Subquery Scan foo  (cost=3000000000181.51..3000000000182.76 rows=100 width=88)
  ->  XN Limit  (cost=3000000000181.51..3000000000181.76 rows=100 width=88)
        ->  XN Merge  (cost=3000000000181.51..3000000000181.77 rows=104 width=88)
              Merge Key: channel, id
              ->  XN Network  (cost=3000000000181.51..3000000000181.77 rows=104 width=88)
                    Send to leader
                    ->  XN Sort  (cost=3000000000181.51..3000000000181.77 rows=104 width=88)
                          Sort Key: channel, id
                          ->  XN Unique  (cost=1000000000113.77..2000000000178.03 rows=104 width=88)
                                ->  XN Append  (cost=1000000000113.77..2000000000176.73 rows=104 width=88)
                                      ->  XN Subquery Scan "*SELECT* 1"  (cost=1000000000113.77..1000000000115.02 rows=100 width=88)
                                            ->  XN Limit  (cost=1000000000113.77..1000000000114.02 rows=100 width=88)
                                                  ->  XN Sort  (cost=1000000000113.77..1000000000114.27 rows=200 width=88)
                                                        Sort Key: derived_col1, derived_col2
                                                        ->  XN Unique  (cost=102.13..106.13 rows=200 width=88)
                                                              ->  XN HashAggregate  (cost=102.13..103.63 rows=200 width=88)
                                                                    ->  XN Subquery Scan x  (cost=11.27..81.72 rows=1633 width=88)
                                                                          ->  XN Append  (cost=11.27..65.39 rows=1633 width=75)
                                                                                ->  XN Subquery Scan "*SELECT* 1"  (cost=11.27..19.99 rows=498 width=66)
                                                                                      ->  XN HashAggregate  (cost=11.27..15.01 rows=498 width=66)
                                                                                            ->  XN Seq Scan on volt_tt_618ff44d2d72b  (cost=0.00..5.01 rows=501 width=66)
                                                                                ->  XN Subquery Scan "*SELECT* 2"  (cost=24.93..44.32 rows=1108 width=75)
                                                                                      ->  XN HashAggregate  (cost=24.93..33.24 rows=1108 width=75)
                                                                                            ->  XN Seq Scan on volt_tt_618ff44d274e3  (cost=0.00..11.08 rows=1108 width=75)
                                                                                ->  XN Subquery Scan "*SELECT* 3"  (cost=0.61..1.08 rows=27 width=67)
                                                                                      ->  XN HashAggregate  (cost=0.61..0.81 rows=27 width=67)
                                                                                            ->  XN Seq Scan on volt_tt_618ff44d3449e  (cost=0.00..0.27 rows=27 width=67)
                                      ->  XN Subquery Scan "*SELECT* 2"  (cost=1000000000032.92..1000000000032.95 rows=3 width=56)
                                            ->  XN Limit  (cost=1000000000032.92..1000000000032.92 rows=3 width=56)
                                                  ->  XN Sort  (cost=1000000000032.92..1000000000032.92 rows=3 width=56)
                                                        Sort Key: derived_col1, NULL::character varying
                                                        ->  XN Unique  (cost=32.83..32.89 rows=3 width=56)
                                                              ->  XN HashAggregate  (cost=32.83..32.86 rows=3 width=56)
                                                                    ->  XN Subquery Scan x  (cost=10.02..32.80 rows=3 width=56)
                                                                          ->  XN Append  (cost=10.02..32.77 rows=3 width=43)
                                                                                ->  XN Subquery Scan "*SELECT* 1"  (cost=10.02..10.04 rows=1 width=41)
                                                                                      ->  XN HashAggregate  (cost=10.02..10.03 rows=1 width=41)
                                                                                            ->  XN Seq Scan on volt_tt_618ff44d2d72b  (cost=0.00..5.01 rows=501 width=41)
                                                                                ->  XN Subquery Scan "*SELECT* 2"  (cost=22.16..22.18 rows=1 width=43)
                                                                                      ->  XN HashAggregate  (cost=22.16..22.17 rows=1 width=43)
                                                                                            ->  XN Seq Scan on volt_tt_618ff44d274e3  (cost=0.00..11.08 rows=1108 width=43)
                                                                                ->  XN Subquery Scan "*SELECT* 3"  (cost=0.54..0.56 rows=1 width=39)
                                                                                      ->  XN HashAggregate  (cost=0.54..0.55 rows=1 width=39)
                                                                                            ->  XN Seq Scan on volt_tt_618ff44d3449e  (cost=0.00..0.27 rows=27 width=39)
                                      ->  XN Network  (cost=28.74..28.75 rows=1 width=24)
                                            Distribute Round Robin
                                            ->  XN Subquery Scan "*SELECT* 3"  (cost=28.74..28.75 rows=1 width=24)
                                                  ->  XN Aggregate  (cost=28.74..28.74 rows=1 width=24)
                                                        ->  XN Subquery Scan x  (cost=8.78..28.71 rows=3 width=24)
                                                              ->  XN Append  (cost=8.78..28.68 rows=3 width=24)
                                                                    ->  XN Subquery Scan "*SELECT* 1"  (cost=8.78..8.79 rows=1 width=24)
                                                                          ->  XN Aggregate  (cost=8.78..8.78 rows=1 width=24)
                                                                                ->  XN Seq Scan on volt_tt_618ff44d2d72b  (cost=0.00..5.01 rows=501 width=24)
                                                                    ->  XN Subquery Scan "*SELECT* 2"  (cost=19.40..19.41 rows=1 width=24)
                                                                          ->  XN Aggregate  (cost=19.40..19.40 rows=1 width=24)
                                                                                ->  XN Seq Scan on volt_tt_618ff44d274e3  (cost=0.00..11.08 rows=1108 width=24)
                                                                    ->  XN Subquery Scan "*SELECT* 3"  (cost=0.48..0.49 rows=1 width=24)
                                                                          ->  XN Aggregate  (cost=0.48..0.48 rows=1 width=24)
                                                                                ->  XN Seq Scan on volt_tt_618ff44d3449e  (cost=0.00..0.27 rows=27 width=24)