XN Limit  (cost=1501822431157.51..1501822431157.76 rows=100 width=29)
  ->  XN Merge  (cost=1501822431157.51..1501822432657.51 rows=600000 width=29)
        Merge Key: customer_address.ca_zip, customer_address.ca_city
        ->  XN Network  (cost=1501822431157.51..1501822432657.51 rows=600000 width=29)
              Send to leader
              ->  XN Sort  (cost=1501822431157.51..1501822432657.51 rows=600000 width=29)
                    Sort Key: customer_address.ca_zip, customer_address.ca_city
                    ->  XN HashAggregate  (cost=501822372073.70..501822373573.70 rows=600000 width=29)
                          ->  XN Hash Left Join DS_BCAST_INNER  (cost=203263386489.72..501822365920.62 rows=820410 width=29)
                                Hash Cond: (("outer".i_item_id)::text = ("inner".rhs_col)::text)
                                Filter: (("inner".witness IS NOT NULL) OR ("substring"(("outer".ca_zip)::text, 1, 5) = '80348'::text) OR ("substring"(("outer".ca_zip)::text, 1, 5) = '81792'::text) OR ("substring"(("outer".ca_zip)::text, 1, 5) = '83405'::text) OR ("substring"(("outer".ca_zip)::text, 1, 5) = '85392'::text) OR ("substring"(("outer".ca_zip)::text, 1, 5) = '85460'::text) OR ("substring"(("outer".ca_zip)::text, 1, 5) = '85669'::text) OR ("substring"(("outer".ca_zip)::text, 1, 5) = '86197'::text) OR ("substring"(("outer".ca_zip)::text, 1, 5) = '86475'::text) OR ("substring"(("outer".ca_zip)::text, 1, 5) = '88274'::text))
                                ->  XN Hash Join DS_BCAST_INNER  (cost=203263375989.59..501818985163.50 rows=820410 width=49)
                                      Hash Cond: ("outer".ws_item_sk = "inner".i_item_sk)
                                      ->  XN Hash Join DS_BCAST_INNER  (cost=203263372239.59..405818955230.32 rows=799071 width=33)
                                            Hash Cond: ("outer".ca_address_sk = "inner".c_current_addr_sk)
                                            ->  XN Seq Scan on customer_address  (cost=0.00..60000.00 rows=6000000 width=25)
                                            ->  XN Hash  (cost=203263370129.64..203263370129.64 rows=843981 width=16)
                                                  ->  XN Hash Join DS_BCAST_INNER  (cost=26531689.83..203263370129.64 rows=843981 width=16)
                                                        Hash Cond: ("outer".c_customer_sk = "inner".ws_bill_customer_sk)
                                                        ->  XN Seq Scan on customer  (cost=0.00..120000.00 rows=12000000 width=8)
                                                        ->  XN Hash  (cost=26529572.78..26529572.78 rows=846819 width=16)
                                                              ->  XN Hash Join DS_BCAST_INNER  (cost=1095.95..26529572.78 rows=846819 width=16)
                                                                    Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                                                                    ->  XN Seq Scan on web_sales  (cost=0.00..7200003.84 rows=720000384 width=20)
                                                                    ->  XN Hash  (cost=1095.73..1095.73 rows=86 width=4)
                                                                          ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=86 width=4)
                                                                                Filter: ((d_year = 2001) AND (d_qoy = 2))
                                      ->  XN Hash  (cost=3000.00..3000.00 rows=300000 width=24)
                                            ->  XN Seq Scan on item  (cost=0.00..3000.00 rows=300000 width=24)
                                ->  XN Hash  (cost=10500.11..10500.11 rows=6 width=46)
                                      ->  XN Subquery Scan derived_table1  (cost=0.00..10500.11 rows=6 width=46)
                                            ->  XN Unique  (cost=0.00..10500.05 rows=6 width=20)
                                                  ->  XN Seq Scan on item  (cost=0.00..10500.00 rows=11 width=20)
                                                        Filter: ((i_item_sk = 2) OR (i_item_sk = 3) OR (i_item_sk = 5) OR (i_item_sk = 7) OR (i_item_sk = 11) OR (i_item_sk = 13) OR (i_item_sk = 17) OR (i_item_sk = 19) OR (i_item_sk = 23) OR (i_item_sk = 29))