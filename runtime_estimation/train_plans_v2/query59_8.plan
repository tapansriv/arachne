XN Limit  (cost=1000003664507.62..1000003664507.67 rows=21 width=32)
  ->  XN Merge  (cost=1000003664507.62..1000003664507.67 rows=21 width=32)
        Merge Key: sum(store_sales.ss_ext_sales_price), item.i_brand_id
        ->  XN Network  (cost=1000003664507.62..1000003664507.67 rows=21 width=32)
              Send to leader
              ->  XN Sort  (cost=1000003664507.62..1000003664507.67 rows=21 width=32)
                    Sort Key: sum(store_sales.ss_ext_sales_price), item.i_brand_id
                    ->  XN HashAggregate  (cost=3664507.10..3664507.16 rows=21 width=32)
                          ->  XN Hash Join DS_DIST_NONE  (cost=1321.63..3664506.95 rows=21 width=32)
                                Hash Cond: ("outer".ss_item_sk = "inner".i_item_sk)
                                ->  XN Hash Join DS_BCAST_INNER  (cost=1095.81..3664256.71 rows=1076 width=12)
                                      Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                      ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2747688 width=16)
                                            Filter: (ss_sold_date_sk IS NOT NULL)
                                      ->  XN Hash  (cost=1095.73..1095.73 rows=30 width=4)
                                            ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=30 width=4)
                                                  Filter: ((d_year = 2002) AND (d_moy = 11))
                                ->  XN Hash  (cost=225.00..225.00 rows=327 width=28)
                                      ->  XN Seq Scan on item  (cost=0.00..225.00 rows=327 width=28)
                                            Filter: (i_manager_id = 6)