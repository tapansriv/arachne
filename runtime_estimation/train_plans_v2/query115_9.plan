XN Subquery Scan tmp1  (cost=1000041943145.55..1000041943145.58 rows=1 width=10)
  Filter: (col1 <= 5)
  ->  XN Window  (cost=1000041943145.55..1000041943145.56 rows=1 width=14)
        Partition: store.s_state
        Order: sum(store_sales.ss_net_profit)
        ->  XN Sort  (cost=1000041943145.55..1000041943145.56 rows=1 width=14)
              Sort Key: store.s_state, sum(store_sales.ss_net_profit)
              ->  XN HashAggregate  (cost=41943145.54..41943145.54 rows=1 width=14)
                    ->  XN Hash Join DS_BCAST_INNER  (cost=1096.71..41943091.65 rows=10778 width=14)
                          Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=1096.56..39542842.76 rows=11276 width=12)
                                Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2626352 width=16)
                                      Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                ->  XN Hash  (cost=1095.73..1095.73 rows=329 width=4)
                                      ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=329 width=4)
                                            Filter: ((d_month_seq <= 1190) AND (d_month_seq >= 1179))
                          ->  XN Hash  (cost=0.12..0.12 rows=12 width=10)
                                ->  XN Seq Scan on store  (cost=0.00..0.12 rows=12 width=10)

XN Limit  (cost=2000127749437.70..2000127749437.70 rows=3 width=80)
  ->  XN Merge  (cost=2000127749437.70..2000127749437.70 rows=3 width=80)
        Merge Key: lochierarchy, CASE WHEN (lochierarchy = 0) THEN s_state ELSE NULL::character varying END, pg_catalog.rank()
        ->  XN Network  (cost=2000127749437.70..2000127749437.70 rows=3 width=80)
              Send to leader
              ->  XN Sort  (cost=2000127749437.70..2000127749437.70 rows=3 width=80)
                    Sort Key: lochierarchy, CASE WHEN (lochierarchy = 0) THEN s_state ELSE NULL::character varying END, pg_catalog.rank()
                    ->  XN Window  (cost=1000127749437.60..1000127749437.67 rows=3 width=80)
                          Partition: lochierarchy, CASE WHEN (g_county = 0) THEN s_state ELSE NULL::character varying END
                          Order: total_sum
                          ->  XN Sort  (cost=1000127749437.60..1000127749437.60 rows=3 width=80)
                                Sort Key: lochierarchy, CASE WHEN (g_county = 0) THEN s_state ELSE NULL::character varying END, total_sum
                                ->  XN Network  (cost=44503172.77..127749437.57 rows=3 width=80)
                                      Distribute
                                      ->  XN Subquery Scan results_rollup  (cost=44503172.77..127749437.57 rows=3 width=80)
                                            ->  XN Unique  (cost=44503172.77..127749437.54 rows=3 width=35)
                                                  ->  XN Append  (cost=44503172.77..127749437.50 rows=3 width=35)
                                                        ->  XN Subquery Scan "*SELECT* 1"  (cost=44503172.77..44503172.78 rows=1 width=35)
                                                              ->  XN HashAggregate  (cost=44503172.77..44503172.77 rows=1 width=35)
                                                                    ->  XN Hash Join DS_BCAST_INNER  (cost=161096.99..44503091.93 rows=10778 width=35)
                                                                          Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                                                          ->  XN Hash Join DS_BCAST_INNER  (cost=1096.56..39542842.76 rows=11276 width=12)
                                                                                Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                                ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2626352 width=16)
                                                                                      Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                                                ->  XN Hash  (cost=1095.73..1095.73 rows=329 width=4)
                                                                                      ->  XN Seq Scan on date_dim d1  (cost=0.00..1095.73 rows=329 width=4)
                                                                                            Filter: ((d_month_seq <= 1190) AND (d_month_seq >= 1179))
                                                                          ->  XN Hash  (cost=160000.40..160000.40 rows=12 width=31)
                                                                                ->  XN Hash IN Join DS_BCAST_INNER  (cost=0.01..160000.40 rows=12 width=31)
                                                                                      Hash Cond: (("outer".s_state)::text = ("inner".s_state)::text)
                                                                                      ->  XN Seq Scan on store  (cost=0.00..0.12 rows=12 width=31)
                                                                                      ->  XN Hash  (cost=0.01..0.01 rows=1 width=6)
                                                                                            ->  XN Seq Scan on volt_tt_6193981c42b77  (cost=0.00..0.01 rows=1 width=6)
                                                        ->  XN Subquery Scan "*SELECT* 2"  (cost=42103145.82..42103145.83 rows=1 width=14)
                                                              ->  XN HashAggregate  (cost=42103145.82..42103145.82 rows=1 width=14)
                                                                    ->  XN Hash Join DS_BCAST_INNER  (cost=161096.99..42103091.93 rows=10778 width=14)
                                                                          Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                                                          ->  XN Hash Join DS_BCAST_INNER  (cost=1096.56..39542842.76 rows=11276 width=12)
                                                                                Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                                ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2626352 width=16)
                                                                                      Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                                                ->  XN Hash  (cost=1095.73..1095.73 rows=329 width=4)
                                                                                      ->  XN Seq Scan on date_dim d1  (cost=0.00..1095.73 rows=329 width=4)
                                                                                            Filter: ((d_month_seq <= 1190) AND (d_month_seq >= 1179))
                                                                          ->  XN Hash  (cost=160000.40..160000.40 rows=12 width=10)
                                                                                ->  XN Hash IN Join DS_BCAST_INNER  (cost=0.01..160000.40 rows=12 width=10)
                                                                                      Hash Cond: (("outer".s_state)::text = ("inner".s_state)::text)
                                                                                      ->  XN Seq Scan on store  (cost=0.00..0.12 rows=12 width=10)
                                                                                      ->  XN Hash  (cost=0.01..0.01 rows=1 width=6)
                                                                                            ->  XN Seq Scan on volt_tt_6193981c42b77  (cost=0.00..0.01 rows=1 width=6)
                                                        ->  XN Network  (cost=41143118.88..41143118.89 rows=1 width=8)
                                                              Distribute Round Robin
                                                              ->  XN Subquery Scan "*SELECT* 3"  (cost=41143118.88..41143118.89 rows=1 width=8)
                                                                    ->  XN Aggregate  (cost=41143118.88..41143118.88 rows=1 width=8)
                                                                          ->  XN Hash Join DS_BCAST_INNER  (cost=161096.99..41143091.93 rows=10778 width=8)
                                                                                Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                                                                ->  XN Hash Join DS_BCAST_INNER  (cost=1096.56..39542842.76 rows=11276 width=12)
                                                                                      Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                                      ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2626352 width=16)
                                                                                            Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                                                      ->  XN Hash  (cost=1095.73..1095.73 rows=329 width=4)
                                                                                            ->  XN Seq Scan on date_dim d1  (cost=0.00..1095.73 rows=329 width=4)
                                                                                                  Filter: ((d_month_seq <= 1190) AND (d_month_seq >= 1179))
                                                                                ->  XN Hash  (cost=160000.40..160000.40 rows=12 width=4)
                                                                                      ->  XN Hash IN Join DS_BCAST_INNER  (cost=0.01..160000.40 rows=12 width=4)
                                                                                            Hash Cond: (("outer".s_state)::text = ("inner".s_state)::text)
                                                                                            ->  XN Seq Scan on store  (cost=0.00..0.12 rows=12 width=10)
                                                                                            ->  XN Hash  (cost=0.01..0.01 rows=1 width=6)
                                                                                                  ->  XN Seq Scan on volt_tt_6193981c42b77  (cost=0.00..0.01 rows=1 width=6)