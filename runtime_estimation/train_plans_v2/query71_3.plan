XN Limit  (cost=2000079512897.41..2000079512897.66 rows=100 width=442)
  ->  XN Merge  (cost=2000079512897.41..2000079512943.82 rows=18562 width=442)
        Merge Key: i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id, sumsales, rk
        ->  XN Network  (cost=2000079512897.41..2000079512943.82 rows=18562 width=442)
              Send to leader
              ->  XN Sort  (cost=2000079512897.41..2000079512943.82 rows=18562 width=442)
                    Sort Key: i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id, sumsales, rk
                    ->  XN Subquery Scan dw2  (cost=1000079509214.70..1000079511581.36 rows=18562 width=442)
                          Filter: (rk <= 100)
                          ->  XN Window  (cost=1000079509214.70..1000079510885.28 rows=55686 width=434)
                                Partition: i_category
                                Order: sumsales
                                ->  XN Sort  (cost=1000079509214.70..1000079509353.92 rows=55686 width=434)
                                      Sort Key: i_category, sumsales
                                      ->  XN Network  (cost=79503850.74..79504825.25 rows=55686 width=434)
                                            Distribute
                                            ->  XN Subquery Scan dw1  (cost=79503850.74..79504825.25 rows=55686 width=434)
                                                  ->  XN HashAggregate  (cost=79503850.74..79504268.39 rows=55686 width=105)
                                                        GROUPING SETS((), (i_category), (i_category, i_class), (i_category, i_class, i_brand), (i_category, i_class, i_brand, i_product_name), (i_category, i_class, i_brand, i_product_name, d_year), (i_category, i_class, i_brand, i_product_name, d_year, d_qoy), (i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy), (i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id))
                                                        ->  XN Hash Join DS_DIST_NONE  (cost=79503102.06..79503612.81 rows=10575 width=105)
                                                              Hash Cond: ("outer".i_item_sk = "inner".ss_item_sk)
                                                              ->  XN Seq Scan on item  (cost=0.00..180.00 rows=18000 width=65)
                                                              ->  XN Hash  (cost=79503076.26..79503076.26 rows=10320 width=48)
                                                                    ->  XN Hash Join DS_BCAST_INNER  (cost=1096.67..79503076.26 rows=10320 width=48)
                                                                          Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                                                          ->  XN Hash Join DS_BCAST_INNER  (cost=1096.52..75662837.93 rows=10797 width=32)
                                                                                Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                                ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2626352 width=24)
                                                                                      Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                                                ->  XN Hash  (cost=1095.73..1095.73 rows=315 width=16)
                                                                                      ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=315 width=16)
                                                                                            Filter: ((d_month_seq >= 1191) AND (d_month_seq <= 1202))
                                                                          ->  XN Hash  (cost=0.12..0.12 rows=12 width=24)
                                                                                ->  XN Seq Scan on store  (cost=0.00..0.12 rows=12 width=24)