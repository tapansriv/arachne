XN Window  (cost=1000050625236.31..1000050625406.28 rows=11331 width=16)
  Partition: store_sales.ss_item_sk
  Order: date_dim.d_date
  ->  XN Sort  (cost=1000050625236.31..1000050625264.64 rows=11331 width=16)
        Sort Key: store_sales.ss_item_sk, date_dim.d_date
        ->  XN HashAggregate  (cost=50624444.96..50624473.29 rows=11331 width=16)
              ->  XN Hash Join DS_BCAST_INNER  (cost=1096.52..50624359.98 rows=11331 width=16)
                    Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                    ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2747688 width=16)
                          Filter: (ss_sold_date_sk IS NOT NULL)
                    ->  XN Hash  (cost=1095.73..1095.73 rows=316 width=8)
                          ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=316 width=8)
                                Filter: ((d_month_seq >= 1190) AND (d_month_seq <= 1201))

XN Window  (cost=1000050577525.29..1000050577571.94 rows=3110 width=16)
  Partition: web_sales.ws_item_sk
  Order: date_dim.d_date
  ->  XN Sort  (cost=1000050577525.29..1000050577533.06 rows=3110 width=16)
        Sort Key: web_sales.ws_item_sk, date_dim.d_date
        ->  XN Network  (cost=50577337.09..50577344.86 rows=3110 width=16)
              Distribute
              ->  XN HashAggregate  (cost=50577337.09..50577344.86 rows=3110 width=16)
                    ->  XN Hash Join DS_BCAST_INNER  (cost=1096.52..50577313.77 rows=3110 width=16)
                          Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                          ->  XN Seq Scan on web_sales  (cost=0.00..7193.84 rows=719384 width=16)
                          ->  XN Hash  (cost=1095.73..1095.73 rows=316 width=8)
                                ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=316 width=8)
                                      Filter: ((d_month_seq >= 1190) AND (d_month_seq <= 1201))

XN HashAggregate  (cost=333594.80..333717.28 rows=48992 width=24)
  ->  XN Merge Join DS_DIST_NONE  (cost=0.00..265942.81 rows=6765199 width=24)
        Merge Cond: ("outer".ss_item_sk = "inner".ss_item_sk)
        Join Filter: ("outer".col3 >= "inner".col3)
        ->  XN Seq Scan on volt_tt_61938f3e887ab  (cost=0.00..4899.14 rows=489914 width=24)
        ->  XN Seq Scan on volt_tt_61938f3e887ab  (cost=0.00..4899.14 rows=489914 width=20)

XN HashAggregate  (cost=30726.31..30776.50 rows=20077 width=24)
  ->  XN Merge Join DS_DIST_NONE  (cost=0.00..24989.63 rows=573668 width=24)
        Merge Cond: ("outer".ws_item_sk = "inner".ws_item_sk)
        Join Filter: ("outer".col3 >= "inner".col3)
        ->  XN Seq Scan on volt_tt_61938f3e8a9a2  (cost=0.00..1390.83 rows=139083 width=24)
        ->  XN Seq Scan on volt_tt_61938f3e8a9a2  (cost=0.00..1390.83 rows=139083 width=20)

XN Window  (cost=1150959463275.84..1150959476748.48 rows=489914 width=32)
  Partition: CASE WHEN (volt_tt_61938f3e8cdb5.item_sk IS NOT NULL) THEN volt_tt_61938f3e8cdb5.item_sk ELSE volt_tt_61938f3e8c3b7.item_sk END
  Order: CASE WHEN (volt_tt_61938f3e8cdb5.d_date IS NOT NULL) THEN volt_tt_61938f3e8cdb5.d_date ELSE volt_tt_61938f3e8c3b7.d_date END
  ->  XN Sort  (cost=1150959463275.84..1150959464500.63 rows=489914 width=32)
        Sort Key: CASE WHEN (volt_tt_61938f3e8cdb5.item_sk IS NOT NULL) THEN volt_tt_61938f3e8cdb5.item_sk ELSE volt_tt_61938f3e8c3b7.item_sk END, CASE WHEN (volt_tt_61938f3e8cdb5.d_date IS NOT NULL) THEN volt_tt_61938f3e8cdb5.d_date ELSE volt_tt_61938f3e8c3b7.d_date END
        ->  XN Network  (cost=2086.24..150959416973.65 rows=489914 width=32)
              Distribute
              ->  XN Hash Full Join DS_DIST_BOTH  (cost=2086.24..150959416973.65 rows=489914 width=32)
                    Outer Dist Key: volt_tt_61938f3e8c3b7.item_sk
                    Inner Dist Key: volt_tt_61938f3e8cdb5.item_sk
                    Hash Cond: (("outer".item_sk = "inner".item_sk) AND ("outer".d_date = "inner".d_date))
                    ->  XN Seq Scan on volt_tt_61938f3e8c3b7  (cost=0.00..4899.14 rows=489914 width=16)
                    ->  XN Hash  (cost=1390.83..1390.83 rows=139083 width=16)
                          ->  XN Seq Scan on volt_tt_61938f3e8cdb5  (cost=0.00..1390.83 rows=139083 width=16)

XN Limit  (cost=1000000932472.24..1000000932525.32 rows=100 width=40)
  ->  XN Merge  (cost=1000000932472.24..1000000933003.07 rows=1000 width=40)
        Merge Key: volt_tt_61938f3e8efa1.col0, volt_tt_61938f3e8efa1.col1
        ->  XN Network  (cost=1000000932472.24..1000000933003.07 rows=212334 width=40)
              Send to leader
              ->  XN Sort  (cost=1000000932472.24..1000000933003.07 rows=212334 width=40)
                    Sort Key: volt_tt_61938f3e8efa1.col0, volt_tt_61938f3e8efa1.col1
                    ->  XN HashAggregate  (cost=911030.78..913684.95 rows=212334 width=40)
                          Filter: ("max"(cume_sales) > "max"(cume_sales1))
                          ->  XN Hash Join DS_DIST_NONE  (cost=7533.81..706306.04 rows=10236237 width=40)
                                Hash Cond: ("outer".col0 = "inner".col0)
                                Join Filter: ("outer".col4 >= "inner".col4)
                                ->  XN Seq Scan on volt_tt_61938f3e8efa1  (cost=0.00..6027.05 rows=602705 width=32)
                                ->  XN Hash  (cost=6027.05..6027.05 rows=602705 width=28)
                                      ->  XN Seq Scan on volt_tt_61938f3e8efa1 volt_dt_0  (cost=0.00..6027.05 rows=602705 width=28)