XN Window  (cost=1000050945243.13..1000050945414.17 rows=11403 width=16)
  Partition: store_sales.ss_item_sk
  Order: date_dim.d_date
  ->  XN Sort  (cost=1000050945243.13..1000050945271.64 rows=11403 width=16)
        Sort Key: store_sales.ss_item_sk, date_dim.d_date
        ->  XN HashAggregate  (cost=50944446.22..50944474.73 rows=11403 width=16)
              ->  XN Hash Join DS_BCAST_INNER  (cost=1096.53..50944360.70 rows=11403 width=16)
                    Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                    ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2747688 width=16)
                          Filter: (ss_sold_date_sk IS NOT NULL)
                    ->  XN Hash  (cost=1095.73..1095.73 rows=318 width=8)
                          ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=318 width=8)
                                Filter: ((d_month_seq >= 1189) AND (d_month_seq <= 1200))

XN Window  (cost=1000050897526.91..1000050897573.85 rows=3129 width=16)
  Partition: web_sales.ws_item_sk
  Order: date_dim.d_date
  ->  XN Sort  (cost=1000050897526.91..1000050897534.73 rows=3129 width=16)
        Sort Key: web_sales.ws_item_sk, date_dim.d_date
        ->  XN Network  (cost=50897337.43..50897345.25 rows=3129 width=16)
              Distribute
              ->  XN HashAggregate  (cost=50897337.43..50897345.25 rows=3129 width=16)
                    ->  XN Hash Join DS_BCAST_INNER  (cost=1096.53..50897313.96 rows=3129 width=16)
                          Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                          ->  XN Seq Scan on web_sales  (cost=0.00..7193.84 rows=719384 width=16)
                          ->  XN Hash  (cost=1095.73..1095.73 rows=318 width=8)
                                ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=318 width=8)
                                      Filter: ((d_month_seq >= 1189) AND (d_month_seq <= 1200))

XN HashAggregate  (cost=334823.21..334945.58 rows=48949 width=24)
  ->  XN Merge Join DS_DIST_NONE  (cost=0.00..266910.35 rows=6791286 width=24)
        Merge Cond: ("outer".ss_item_sk = "inner".ss_item_sk)
        Join Filter: ("outer".col3 >= "inner".col3)
        ->  XN Seq Scan on volt_tt_61938b516ae10  (cost=0.00..4894.86 rows=489486 width=24)
        ->  XN Seq Scan on volt_tt_61938b516ae10  (cost=0.00..4894.86 rows=489486 width=20)

XN HashAggregate  (cost=32582.58..32632.64 rows=20023 width=24)
  ->  XN Merge Join DS_DIST_NONE  (cost=0.00..26452.08 rows=613051 width=24)
        Merge Cond: ("outer".ws_item_sk = "inner".ws_item_sk)
        Join Filter: ("outer".col3 >= "inner".col3)
        ->  XN Seq Scan on volt_tt_61938b516d016  (cost=0.00..1385.07 rows=138507 width=24)
        ->  XN Seq Scan on volt_tt_61938b516d016  (cost=0.00..1385.07 rows=138507 width=20)

XN Window  (cost=1150718512896.46..1150718526357.33 rows=489486 width=32)
  Partition: CASE WHEN (volt_tt_61938b516f529.item_sk IS NOT NULL) THEN volt_tt_61938b516f529.item_sk ELSE volt_tt_61938b516eb1d.item_sk END
  Order: CASE WHEN (volt_tt_61938b516f529.d_date IS NOT NULL) THEN volt_tt_61938b516f529.d_date ELSE volt_tt_61938b516eb1d.d_date END
  ->  XN Sort  (cost=1150718512896.46..1150718514120.18 rows=489486 width=32)
        Sort Key: CASE WHEN (volt_tt_61938b516f529.item_sk IS NOT NULL) THEN volt_tt_61938b516f529.item_sk ELSE volt_tt_61938b516eb1d.item_sk END, CASE WHEN (volt_tt_61938b516f529.d_date IS NOT NULL) THEN volt_tt_61938b516f529.d_date ELSE volt_tt_61938b516eb1d.d_date END
        ->  XN Network  (cost=2077.61..150718466637.82 rows=489486 width=32)
              Distribute
              ->  XN Hash Full Join DS_DIST_BOTH  (cost=2077.61..150718466637.82 rows=489486 width=32)
                    Outer Dist Key: volt_tt_61938b516eb1d.item_sk
                    Inner Dist Key: volt_tt_61938b516f529.item_sk
                    Hash Cond: (("outer".item_sk = "inner".item_sk) AND ("outer".d_date = "inner".d_date))
                    ->  XN Seq Scan on volt_tt_61938b516eb1d  (cost=0.00..4894.86 rows=489486 width=16)
                    ->  XN Hash  (cost=1385.07..1385.07 rows=138507 width=16)
                          ->  XN Seq Scan on volt_tt_61938b516f529  (cost=0.00..1385.07 rows=138507 width=16)

XN Limit  (cost=1000000932329.30..1000000932384.21 rows=100 width=40)
  ->  XN Merge  (cost=1000000932329.30..1000000932878.43 rows=1000 width=40)
        Merge Key: volt_tt_61938b51716f6.col0, volt_tt_61938b51716f6.col1
        ->  XN Network  (cost=1000000932329.30..1000000932878.43 rows=219650 width=40)
              Send to leader
              ->  XN Sort  (cost=1000000932329.30..1000000932878.43 rows=219650 width=40)
                    Sort Key: volt_tt_61938b51716f6.col0, volt_tt_61938b51716f6.col1
                    ->  XN HashAggregate  (cost=910095.40..912841.02 rows=219650 width=40)
                          Filter: ("max"(cume_sales) > "max"(cume_sales1))
                          ->  XN Hash Join DS_DIST_NONE  (cost=7522.61..705529.28 rows=10228306 width=40)
                                Hash Cond: ("outer".col0 = "inner".col0)
                                Join Filter: ("outer".col4 >= "inner".col4)
                                ->  XN Seq Scan on volt_tt_61938b51716f6  (cost=0.00..6018.09 rows=601809 width=32)
                                ->  XN Hash  (cost=6018.09..6018.09 rows=601809 width=28)
                                      ->  XN Seq Scan on volt_tt_61938b51716f6 volt_dt_0  (cost=0.00..6018.09 rows=601809 width=28)