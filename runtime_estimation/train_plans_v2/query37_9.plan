XN Merge  (cost=1000167620715.97..1000167620716.88 rows=367 width=43)
  Merge Key: customer.c_last_name, customer.c_first_name, customer.c_salutation, customer.c_preferred_cust_flag, dn.ss_ticket_number
  ->  XN Network  (cost=1000167620715.97..1000167620716.88 rows=367 width=43)
        Send to leader
        ->  XN Sort  (cost=1000167620715.97..1000167620716.88 rows=367 width=43)
              Sort Key: customer.c_last_name, customer.c_first_name, customer.c_salutation, customer.c_preferred_cust_flag, dn.ss_ticket_number
              ->  XN Hash Join DS_BCAST_INNER  (cost=80942446.66..167620700.33 rows=367 width=43)
                    Hash Cond: ("outer".c_customer_sk = "inner".ss_customer_sk)
                    ->  XN Seq Scan on customer  (cost=0.00..1000.00 rows=100000 width=35)
                    ->  XN Hash  (cost=80942445.76..80942445.76 rows=361 width=16)
                          ->  XN Subquery Scan dn  (cost=80942437.64..80942445.76 rows=361 width=16)
                                ->  XN HashAggregate  (cost=80942437.64..80942442.15 rows=361 width=8)
                                      Filter: ((count(*) <= 20) AND (count(*) >= 15))
                                      ->  XN Hash Join DS_BCAST_INNER  (cost=2190.68..80942433.12 rows=361 width=8)
                                            Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                            ->  XN Hash Join DS_BCAST_INNER  (cost=2190.50..79502424.62 rows=377 width=12)
                                                  Hash Cond: ("outer".ss_hdemo_sk = "inner".hd_demo_sk)
                                                  ->  XN Hash Join DS_BCAST_INNER  (cost=2009.28..20822112.66 rows=5643 width=16)
                                                        Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                        ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2499433 width=20)
                                                              Filter: ((ss_hdemo_sk IS NOT NULL) AND (ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                        ->  XN Hash  (cost=2008.85..2008.85 rows=173 width=4)
                                                              ->  XN Seq Scan on date_dim  (cost=0.00..2008.85 rows=173 width=4)
                                                                    Filter: (((d_year = 1999) OR (d_year = 2000) OR (d_year = 1998)) AND (((d_dom >= 25) AND (d_dom <= 28)) OR ((d_dom <= 3) AND (d_dom >= 1))))
                                                  ->  XN Hash  (cost=180.00..180.00 rows=489 width=4)
                                                        ->  XN Seq Scan on household_demographics  (cost=0.00..180.00 rows=489 width=4)
                                                              Filter: ((((hd_buy_potential)::text = '0-500'::text) OR ((hd_buy_potential)::text = '1001-5000'::text)) AND (CASE WHEN (hd_vehicle_count > 0) THEN (hd_dep_count / hd_vehicle_count) ELSE NULL::integer END > 1) AND (hd_vehicle_count > 0))
                                            ->  XN Hash  (cost=0.15..0.15 rows=12 width=4)
                                                  ->  XN Seq Scan on store  (cost=0.00..0.15 rows=12 width=4)
                                                        Filter: ((s_county)::text = 'Williamson County'::text)