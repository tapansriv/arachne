XN HashAggregate  (cost=297621310.29..297621317.79 rows=600 width=52)
  ->  XN Hash Join DS_BCAST_INNER  (cost=39341034.64..297621304.29 rows=600 width=52)
        Hash Cond: ("outer".cp_catalog_page_sk = "inner".cs_catalog_page_sk)
        ->  XN Seq Scan on catalog_page  (cost=0.00..117.18 rows=11718 width=24)
        ->  XN Hash  (cost=39341033.17..39341033.17 rows=587 width=36)
              ->  XN Hash Join DS_BCAST_INNER  (cost=3940574.43..39341033.17 rows=587 width=36)
                    Hash Cond: ("outer".cs_promo_sk = "inner".p_promo_sk)
                    ->  XN Hash Join DS_DIST_NONE  (cost=3940569.94..3941015.12 rows=614 width=40)
                          Hash Cond: ("outer".i_item_sk = "inner".cs_item_sk)
                          ->  XN Seq Scan on item  (cost=0.00..225.00 rows=17123 width=4)
                                Filter: (i_current_price > 50::double precision)
                          ->  XN Hash  (cost=3940568.37..3940568.37 rows=629 width=44)
                                ->  XN Hash Join DS_BCAST_INNER  (cost=3256.82..3940568.37 rows=629 width=44)
                                      Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                                      ->  XN Hash Left Join DS_DIST_NONE  (cost=2161.01..81446.92 rows=1441548 width=48)
                                            Hash Cond: (("outer".cs_order_number = "inner".cr_order_number) AND ("outer".cs_item_sk = "inner".cr_item_sk))
                                            ->  XN Seq Scan on catalog_sales  (cost=0.00..14415.48 rows=1441548 width=36)
                                            ->  XN Hash  (cost=1440.67..1440.67 rows=144067 width=24)
                                                  ->  XN Seq Scan on catalog_returns  (cost=0.00..1440.67 rows=144067 width=24)
                                      ->  XN Hash  (cost=1095.73..1095.73 rows=32 width=4)
                                            ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=32 width=4)
                                                  Filter: ((d_date <= '1998-09-06'::date) AND (d_date >= '1998-08-07'::date))
                    ->  XN Hash  (cost=3.75..3.75 rows=295 width=4)
                          ->  XN Seq Scan on promotion  (cost=0.00..3.75 rows=295 width=4)
                                Filter: ('N'::text = (p_channel_tv)::text)

XN HashAggregate  (cost=43280367.49..43280367.56 rows=6 width=52)
  ->  XN Hash Join DS_BCAST_INNER  (cost=39439883.41..43280357.15 rows=1034 width=52)
        Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
        ->  XN Hash Join DS_DIST_NONE  (cost=39439883.27..39440333.12 rows=1082 width=36)
              Hash Cond: ("outer".i_item_sk = "inner".ss_item_sk)
              ->  XN Seq Scan on item  (cost=0.00..225.00 rows=17123 width=4)
                    Filter: (i_current_price > 50::double precision)
              ->  XN Hash  (cost=39439880.49..39439880.49 rows=1110 width=40)
                    ->  XN Hash Join DS_BCAST_INNER  (cost=5413.01..39439880.49 rows=1110 width=40)
                          Hash Cond: ("outer".ss_promo_sk = "inner".p_promo_sk)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=5408.52..4039849.87 rows=1203 width=44)
                                Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                ->  XN Hash Left Join DS_DIST_NONE  (cost=4312.71..162736.97 rows=2880404 width=48)
                                      Hash Cond: (("outer".ss_ticket_number = "inner".sr_ticket_number) AND ("outer".ss_item_sk = "inner".sr_item_sk))
                                      ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2880404 width=36)
                                      ->  XN Hash  (cost=2875.14..2875.14 rows=287514 width=24)
                                            ->  XN Seq Scan on store_returns  (cost=0.00..2875.14 rows=287514 width=24)
                                ->  XN Hash  (cost=1095.73..1095.73 rows=32 width=4)
                                      ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=32 width=4)
                                            Filter: ((d_date <= '1998-09-06'::date) AND (d_date >= '1998-08-07'::date))
                          ->  XN Hash  (cost=3.75..3.75 rows=295 width=4)
                                ->  XN Seq Scan on promotion  (cost=0.00..3.75 rows=295 width=4)
                                      Filter: ('N'::text = (p_channel_tv)::text)
        ->  XN Hash  (cost=0.12..0.12 rows=12 width=24)
              ->  XN Seq Scan on store  (cost=0.00..0.12 rows=12 width=24)

XN HashAggregate  (cost=23158971198.57..23158971198.76 rows=15 width=52)
  ->  XN Hash Join DS_BCAST_INNER  (cost=23003450746.94..23158971195.61 rows=296 width=52)
        Hash Cond: ("outer".ws_web_site_sk = "inner".web_site_sk)
        ->  XN Hash Join DS_BCAST_INNER  (cost=23003450746.57..23149371188.57 rows=296 width=36)
              Hash Cond: ("outer".i_item_sk = "inner".ws_item_sk)
              ->  XN Seq Scan on item  (cost=0.00..225.00 rows=17123 width=4)
                    Filter: (i_current_price > 50::double precision)
              ->  XN Hash  (cost=23003450745.81..23003450745.81 rows=304 width=40)
                    ->  XN Hash Join DS_BCAST_INNER  (cost=2176.75..23003450745.81 rows=304 width=40)
                          Hash Cond: ("outer".ws_promo_sk = "inner".p_promo_sk)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=2172.26..22968050734.34 rows=315 width=44)
                                Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                                ->  XN Hash Left Join DS_BCAST_INNER  (cost=1076.44..22964200643.08 rows=719384 width=48)
                                      Hash Cond: (("outer".ws_order_number = "inner".wr_order_number) AND ("outer".ws_item_sk = "inner".wr_item_sk))
                                      ->  XN Seq Scan on web_sales  (cost=0.00..7193.84 rows=719384 width=36)
                                      ->  XN Hash  (cost=717.63..717.63 rows=71763 width=24)
                                            ->  XN Seq Scan on web_returns  (cost=0.00..717.63 rows=71763 width=24)
                                ->  XN Hash  (cost=1095.73..1095.73 rows=32 width=4)
                                      ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=32 width=4)
                                            Filter: ((d_date <= '1998-09-06'::date) AND (d_date >= '1998-08-07'::date))
                          ->  XN Hash  (cost=3.75..3.75 rows=295 width=4)
                                ->  XN Seq Scan on promotion  (cost=0.00..3.75 rows=295 width=4)
                                      Filter: ('N'::text = (p_channel_tv)::text)
        ->  XN Hash  (cost=0.30..0.30 rows=30 width=24)
              ->  XN Seq Scan on web_site  (cost=0.00..0.30 rows=30 width=24)

XN Subquery Scan foo  (cost=3000000000052.37..3000000000053.62 rows=100 width=88)
  ->  XN Limit  (cost=3000000000052.37..3000000000052.62 rows=100 width=88)
        ->  XN Merge  (cost=3000000000052.37..3000000000052.63 rows=104 width=88)
              Merge Key: channel, id
              ->  XN Network  (cost=3000000000052.37..3000000000052.63 rows=104 width=88)
                    Send to leader
                    ->  XN Sort  (cost=3000000000052.37..3000000000052.63 rows=104 width=88)
                          Sort Key: channel, id
                          ->  XN Unique  (cost=1000000000033.05..2000000000048.89 rows=104 width=88)
                                ->  XN Append  (cost=1000000000033.05..2000000000047.59 rows=104 width=88)
                                      ->  XN Subquery Scan "*SELECT* 1"  (cost=1000000000033.05..1000000000034.30 rows=100 width=88)
                                            ->  XN Limit  (cost=1000000000033.05..1000000000033.30 rows=100 width=88)
                                                  ->  XN Sort  (cost=1000000000033.05..1000000000033.55 rows=200 width=88)
                                                        Sort Key: derived_col1, derived_col2
                                                        ->  XN Unique  (cost=21.40..25.40 rows=200 width=88)
                                                              ->  XN HashAggregate  (cost=21.40..22.90 rows=200 width=88)
                                                                    ->  XN Subquery Scan x  (cost=0.14..17.14 rows=341 width=88)
                                                                          ->  XN Append  (cost=0.14..13.73 rows=341 width=75)
                                                                                ->  XN Subquery Scan "*SELECT* 1"  (cost=0.14..0.24 rows=6 width=66)
                                                                                      ->  XN HashAggregate  (cost=0.14..0.18 rows=6 width=66)
                                                                                            ->  XN Seq Scan on volt_tt_6193968ce0c87  (cost=0.00..0.06 rows=6 width=66)
                                                                                ->  XN Subquery Scan "*SELECT* 2"  (cost=7.29..12.89 rows=320 width=75)
                                                                                      ->  XN HashAggregate  (cost=7.29..9.69 rows=320 width=75)
                                                                                            ->  XN Seq Scan on volt_tt_6193968cdb3d2  (cost=0.00..3.24 rows=324 width=75)
                                                                                ->  XN Subquery Scan "*SELECT* 3"  (cost=0.34..0.60 rows=15 width=67)
                                                                                      ->  XN HashAggregate  (cost=0.34..0.45 rows=15 width=67)
                                                                                            ->  XN Seq Scan on volt_tt_6193968ce6f75  (cost=0.00..0.15 rows=15 width=67)
                                      ->  XN Subquery Scan "*SELECT* 2"  (cost=1000000000007.10..1000000000007.13 rows=3 width=56)
                                            ->  XN Limit  (cost=1000000000007.10..1000000000007.10 rows=3 width=56)
                                                  ->  XN Sort  (cost=1000000000007.10..1000000000007.10 rows=3 width=56)
                                                        Sort Key: derived_col1, NULL::character varying
                                                        ->  XN Unique  (cost=7.01..7.07 rows=3 width=56)
                                                              ->  XN HashAggregate  (cost=7.01..7.04 rows=3 width=56)
                                                                    ->  XN Subquery Scan x  (cost=0.12..6.98 rows=3 width=56)
                                                                          ->  XN Append  (cost=0.12..6.95 rows=3 width=43)
                                                                                ->  XN Subquery Scan "*SELECT* 1"  (cost=0.12..0.14 rows=1 width=41)
                                                                                      ->  XN HashAggregate  (cost=0.12..0.13 rows=1 width=41)
                                                                                            ->  XN Seq Scan on volt_tt_6193968ce0c87  (cost=0.00..0.06 rows=6 width=41)
                                                                                ->  XN Subquery Scan "*SELECT* 2"  (cost=6.48..6.50 rows=1 width=43)
                                                                                      ->  XN HashAggregate  (cost=6.48..6.49 rows=1 width=43)
                                                                                            ->  XN Seq Scan on volt_tt_6193968cdb3d2  (cost=0.00..3.24 rows=324 width=43)
                                                                                ->  XN Subquery Scan "*SELECT* 3"  (cost=0.30..0.32 rows=1 width=39)
                                                                                      ->  XN HashAggregate  (cost=0.30..0.31 rows=1 width=39)
                                                                                            ->  XN Seq Scan on volt_tt_6193968ce6f75  (cost=0.00..0.15 rows=15 width=39)
                                      ->  XN Network  (cost=6.15..6.16 rows=1 width=24)
                                            Distribute Round Robin
                                            ->  XN Subquery Scan "*SELECT* 3"  (cost=6.15..6.16 rows=1 width=24)
                                                  ->  XN Aggregate  (cost=6.15..6.15 rows=1 width=24)
                                                        ->  XN Subquery Scan x  (cost=0.11..6.12 rows=3 width=24)
                                                              ->  XN Append  (cost=0.11..6.09 rows=3 width=24)
                                                                    ->  XN Subquery Scan "*SELECT* 1"  (cost=0.11..0.12 rows=1 width=24)
                                                                          ->  XN Aggregate  (cost=0.11..0.11 rows=1 width=24)
                                                                                ->  XN Seq Scan on volt_tt_6193968ce0c87  (cost=0.00..0.06 rows=6 width=24)
                                                                    ->  XN Subquery Scan "*SELECT* 2"  (cost=5.68..5.69 rows=1 width=24)
                                                                          ->  XN Aggregate  (cost=5.68..5.68 rows=1 width=24)
                                                                                ->  XN Seq Scan on volt_tt_6193968cdb3d2  (cost=0.00..3.24 rows=324 width=24)
                                                                    ->  XN Subquery Scan "*SELECT* 3"  (cost=0.27..0.28 rows=1 width=24)
                                                                          ->  XN Aggregate  (cost=0.27..0.27 rows=1 width=24)
                                                                                ->  XN Seq Scan on volt_tt_6193968ce6f75  (cost=0.00..0.15 rows=15 width=24)