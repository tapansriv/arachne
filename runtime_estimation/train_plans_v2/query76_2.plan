XN Limit  (cost=1004684755618.90..1004684755619.15 rows=100 width=132)
  ->  XN Merge  (cost=1004684755618.90..1004684755654.91 rows=14407 width=132)
        Merge Key: count(*), item.i_item_desc, warehouse.w_warehouse_name, d1.d_week_seq
        ->  XN Network  (cost=1004684755618.90..1004684755654.91 rows=14407 width=132)
              Send to leader
              ->  XN Sort  (cost=1004684755618.90..1004684755654.91 rows=14407 width=132)
                    Sort Key: count(*), item.i_item_desc, warehouse.w_warehouse_name, d1.d_week_seq
                    ->  XN HashAggregate  (cost=4684754515.72..4684754623.77 rows=14407 width=132)
                          ->  XN Hash Right Join DS_DIST_INNER  (cost=962549257.26..4684754299.61 rows=14407 width=132)
                                Inner Dist Key: catalog_sales.cs_item_sk
                                Hash Cond: (("outer".cr_order_number = "inner".cs_order_number) AND ("outer".cr_item_sk = "inner".cs_item_sk))
                                ->  XN Seq Scan on catalog_returns  (cost=0.00..1440.67 rows=144067 width=8)
                                ->  XN Hash  (cost=962549244.68..962549244.68 rows=2515 width=140)
                                      ->  XN Hash Left Join DS_BCAST_INNER  (cost=763946212.18..962549244.68 rows=2515 width=140)
                                            Hash Cond: ("outer".cs_promo_sk = "inner".p_promo_sk)
                                            ->  XN Hash Join DS_BCAST_INNER  (cost=763946208.43..926549184.98 rows=2515 width=140)
                                                  Hash Cond: ("outer".inv_warehouse_sk = "inner".w_warehouse_sk)
                                                  ->  XN Hash Join DS_BCAST_INNER  (cost=763946208.37..924749128.33 rows=2515 width=123)
                                                        Hash Cond: (("outer".inv_date_sk = "inner".d_date_sk) AND ("outer".inv_item_sk = "inner".cs_item_sk))
                                                        Join Filter: ("inner".cs_quantity > "outer".inv_quantity_on_hand)
                                                        ->  XN Hash Join DS_DIST_NONE  (cost=225.00..502282.47 rows=12034497 width=123)
                                                              Hash Cond: ("outer".inv_item_sk = "inner".i_item_sk)
                                                              ->  XN Seq Scan on inventory  (cost=0.00..117450.00 rows=11745000 width=16)
                                                              ->  XN Hash  (cost=180.00..180.00 rows=18000 width=107)
                                                                    ->  XN Seq Scan on item  (cost=0.00..180.00 rows=18000 width=107)
                                                        ->  XN Hash  (cost=763945980.87..763945980.87 rows=500 width=24)
                                                              ->  XN Hash Join DS_BCAST_INNER  (cost=744343601.78..763945980.87 rows=500 width=24)
                                                                    Hash Cond: ("outer".d_week_seq = "inner".d_week_seq)
                                                                    ->  XN Seq Scan on date_dim d2  (cost=0.00..730.49 rows=73049 width=8)
                                                                    ->  XN Hash  (cost=744343601.60..744343601.60 rows=70 width=20)
                                                                          ->  XN Hash Join DS_BCAST_INNER  (cost=668381954.85..744343601.60 rows=70 width=20)
                                                                                Hash Cond: ("outer".d_date_sk = "inner".cs_ship_date_sk)
                                                                                Join Filter: ("outer".d_date > ("inner".d_date + 5))
                                                                                ->  XN Seq Scan on date_dim d3  (cost=0.00..730.49 rows=73049 width=8)
                                                                                ->  XN Hash  (cost=668381954.32..668381954.32 rows=211 width=28)
                                                                                      ->  XN Hash Join DS_BCAST_INNER  (cost=213153341.06..668381954.32 rows=211 width=28)
                                                                                            Hash Cond: ("outer".cd_demo_sk = "inner".cs_bill_cdemo_sk)
                                                                                            ->  XN Seq Scan on customer_demographics  (cost=0.00..24010.00 rows=368092 width=4)
                                                                                                  Filter: ((cd_marital_status)::text = 'D'::text)
                                                                                            ->  XN Hash  (cost=213153338.22..213153338.22 rows=1138 width=32)
                                                                                                  ->  XN Hash Join DS_BCAST_INNER  (cost=1006.98..213153338.22 rows=1138 width=32)
                                                                                                        Hash Cond: ("outer".cs_bill_hdemo_sk = "inner".hd_demo_sk)
                                                                                                        ->  XN Hash Join DS_BCAST_INNER  (cost=913.98..69033084.28 rows=6647 width=36)
                                                                                                              Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                                                                                                              ->  XN Seq Scan on catalog_sales  (cost=0.00..14415.48 rows=1415068 width=32)
                                                                                                                    Filter: ((cs_bill_hdemo_sk IS NOT NULL) AND (cs_sold_date_sk IS NOT NULL) AND (cs_bill_cdemo_sk IS NOT NULL) AND (cs_ship_date_sk IS NOT NULL))
                                                                                                              ->  XN Hash  (cost=913.11..913.11 rows=345 width=12)
                                                                                                                    ->  XN Seq Scan on date_dim d1  (cost=0.00..913.11 rows=345 width=12)
                                                                                                                          Filter: (d_year = 2002)
                                                                                                        ->  XN Hash  (cost=90.00..90.00 rows=1201 width=4)
                                                                                                              ->  XN Seq Scan on household_demographics  (cost=0.00..90.00 rows=1201 width=4)
                                                                                                                    Filter: ((hd_buy_potential)::text = '1001-5000'::text)
                                                  ->  XN Hash  (cost=0.05..0.05 rows=5 width=25)
                                                        ->  XN Seq Scan on warehouse  (cost=0.00..0.05 rows=5 width=25)
                                            ->  XN Hash  (cost=3.00..3.00 rows=300 width=4)
                                                  ->  XN Seq Scan on promotion  (cost=0.00..3.00 rows=300 width=4)