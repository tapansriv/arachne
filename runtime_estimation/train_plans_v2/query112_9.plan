XN Window  (cost=1000052545277.06..1000052545453.47 rows=11761 width=16)
  Partition: store_sales.ss_item_sk
  Order: date_dim.d_date
  ->  XN Sort  (cost=1000052545277.06..1000052545306.46 rows=11761 width=16)
        Sort Key: store_sales.ss_item_sk, date_dim.d_date
        ->  XN HashAggregate  (cost=52544452.51..52544481.92 rows=11761 width=16)
              ->  XN Hash Join DS_BCAST_INNER  (cost=1096.55..52544364.30 rows=11761 width=16)
                    Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                    ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2747688 width=16)
                          Filter: (ss_sold_date_sk IS NOT NULL)
                    ->  XN Hash  (cost=1095.73..1095.73 rows=328 width=8)
                          ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=328 width=8)
                                Filter: ((d_month_seq <= 1193) AND (d_month_seq >= 1182))

XN Window  (cost=1000052497535.39..1000052497583.81 rows=3228 width=16)
  Partition: web_sales.ws_item_sk
  Order: date_dim.d_date
  ->  XN Sort  (cost=1000052497535.39..1000052497543.46 rows=3228 width=16)
        Sort Key: web_sales.ws_item_sk, date_dim.d_date
        ->  XN Network  (cost=52497339.19..52497347.26 rows=3228 width=16)
              Distribute
              ->  XN HashAggregate  (cost=52497339.19..52497347.26 rows=3228 width=16)
                    ->  XN Hash Join DS_BCAST_INNER  (cost=1096.55..52497314.98 rows=3228 width=16)
                          Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                          ->  XN Seq Scan on web_sales  (cost=0.00..7193.84 rows=719384 width=16)
                          ->  XN Hash  (cost=1095.73..1095.73 rows=328 width=8)
                                ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=328 width=8)
                                      Filter: ((d_month_seq <= 1193) AND (d_month_seq >= 1182))

XN HashAggregate  (cost=465529.46..465654.41 rows=49979 width=24)
  ->  XN Merge Join DS_DIST_NONE  (cost=0.00..370153.72 rows=9537574 width=24)
        Merge Cond: ("outer".ss_item_sk = "inner".ss_item_sk)
        Join Filter: ("outer".col3 >= "inner".col3)
        ->  XN Seq Scan on volt_tt_61938be32137f  (cost=0.00..4997.89 rows=499789 width=24)
        ->  XN Seq Scan on volt_tt_61938be32137f  (cost=0.00..4997.89 rows=499789 width=20)

XN HashAggregate  (cost=39122.56..39172.96 rows=20158 width=24)
  ->  XN Merge Join DS_DIST_NONE  (cost=0.00..31623.81 rows=749875 width=24)
        Merge Cond: ("outer".ws_item_sk = "inner".ws_item_sk)
        Join Filter: ("outer".col3 >= "inner".col3)
        ->  XN Seq Scan on volt_tt_61938be3235b7  (cost=0.00..1401.40 rows=140140 width=24)
        ->  XN Seq Scan on volt_tt_61938be3235b7  (cost=0.00..1401.40 rows=140140 width=20)

XN Window  (cost=1153583187061.16..1153583200805.36 rows=499789 width=32)
  Partition: CASE WHEN (volt_tt_61938be325997.item_sk IS NOT NULL) THEN volt_tt_61938be325997.item_sk ELSE volt_tt_61938be324f7f.item_sk END
  Order: CASE WHEN (volt_tt_61938be325997.d_date IS NOT NULL) THEN volt_tt_61938be325997.d_date ELSE volt_tt_61938be324f7f.d_date END
  ->  XN Sort  (cost=1153583187061.16..1153583188310.63 rows=499789 width=32)
        Sort Key: CASE WHEN (volt_tt_61938be325997.item_sk IS NOT NULL) THEN volt_tt_61938be325997.item_sk ELSE volt_tt_61938be324f7f.item_sk END, CASE WHEN (volt_tt_61938be325997.d_date IS NOT NULL) THEN volt_tt_61938be325997.d_date ELSE volt_tt_61938be324f7f.d_date END
        ->  XN Network  (cost=2102.10..153583139753.73 rows=499789 width=32)
              Distribute
              ->  XN Hash Full Join DS_DIST_BOTH  (cost=2102.10..153583139753.73 rows=499789 width=32)
                    Outer Dist Key: volt_tt_61938be324f7f.item_sk
                    Inner Dist Key: volt_tt_61938be325997.item_sk
                    Hash Cond: (("outer".item_sk = "inner".item_sk) AND ("outer".d_date = "inner".d_date))
                    ->  XN Seq Scan on volt_tt_61938be324f7f  (cost=0.00..4997.89 rows=499789 width=16)
                    ->  XN Hash  (cost=1401.40..1401.40 rows=140140 width=16)
                          ->  XN Seq Scan on volt_tt_61938be325997  (cost=0.00..1401.40 rows=140140 width=16)

XN Limit  (cost=1000001298593.36..1000001298650.70 rows=100 width=40)
  ->  XN Merge  (cost=1000001298593.36..1000001299166.71 rows=1000 width=40)
        Merge Key: volt_tt_61938be327b52.col0, volt_tt_61938be327b52.col1
        ->  XN Network  (cost=1000001298593.36..1000001299166.71 rows=229341 width=40)
              Send to leader
              ->  XN Sort  (cost=1000001298593.36..1000001299166.71 rows=229341 width=40)
                    Sort Key: volt_tt_61938be327b52.col0, volt_tt_61938be327b52.col1
                    ->  XN HashAggregate  (cost=1275307.07..1278173.83 rows=229341 width=40)
                          Filter: ("max"(cume_sales) > "max"(cume_sales1))
                          ->  XN Hash Join DS_DIST_NONE  (cost=7661.60..988418.37 rows=14344435 width=40)
                                Hash Cond: ("outer".col0 = "inner".col0)
                                Join Filter: ("outer".col4 >= "inner".col4)
                                ->  XN Seq Scan on volt_tt_61938be327b52  (cost=0.00..6129.28 rows=612928 width=32)
                                ->  XN Hash  (cost=6129.28..6129.28 rows=612928 width=28)
                                      ->  XN Seq Scan on volt_tt_61938be327b52 volt_dt_0  (cost=0.00..6129.28 rows=612928 width=28)