XN Limit  (cost=1005894922442.20..1005894922442.45 rows=100 width=159)
  ->  XN Merge  (cost=1005894922442.20..1005894946802.41 rows=9744087 width=159)
        Merge Key: customer.c_last_name, customer.c_first_name, current_addr.ca_city, dn.bought_city, dn.ss_ticket_number
        ->  XN Network  (cost=1005894922442.20..1005894946802.41 rows=9744087 width=159)
              Send to leader
              ->  XN Sort  (cost=1005894922442.20..1005894946802.41 rows=9744087 width=159)
                    Sort Key: customer.c_last_name, customer.c_first_name, current_addr.ca_city, dn.bought_city, dn.ss_ticket_number
                    ->  XN Hash Join DS_BCAST_INNER  (cost=3191390197.17..5893791343.92 rows=9744087 width=159)
                          Hash Cond: ("outer".ca_address_sk = "inner".c_current_addr_sk)
                          Join Filter: (("outer".ca_city)::text <> ("inner".bought_city)::text)
                          ->  XN Seq Scan on customer_address current_addr  (cost=0.00..500.00 rows=50000 width=16)
                          ->  XN Hash  (cost=3191390192.95..3191390192.95 rows=1689 width=151)
                                ->  XN Hash Join DS_BCAST_INNER  (cost=860221926.06..3191390192.95 rows=1689 width=151)
                                      Hash Cond: ("outer".c_customer_sk = "inner".ss_customer_sk)
                                      ->  XN Seq Scan on customer  (cost=0.00..1000.00 rows=100000 width=27)
                                      ->  XN Hash  (cost=860221921.89..860221921.89 rows=1665 width=132)
                                            ->  XN Subquery Scan dn  (cost=860221896.92..860221921.89 rows=1665 width=132)
                                                  ->  XN HashAggregate  (cost=860221896.92..860221905.25 rows=1665 width=40)
                                                        ->  XN Hash Join DS_BCAST_INNER  (cost=250740730.29..860221871.94 rows=1665 width=40)
                                                              Hash Cond: ("outer".ca_address_sk = "inner".ss_addr_sk)
                                                              ->  XN Seq Scan on customer_address  (cost=0.00..500.00 rows=50000 width=16)
                                                              ->  XN Hash  (cost=250740726.06..250740726.06 rows=1693 width=28)
                                                                    ->  XN Hash Join DS_BCAST_INNER  (cost=1757.01..250740726.06 rows=1693 width=28)
                                                                          Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                                                          ->  XN Hash Join DS_BCAST_INNER  (cost=1756.80..249540682.37 rows=2125 width=32)
                                                                                Hash Cond: ("outer".ss_hdemo_sk = "inner".hd_demo_sk)
                                                                                ->  XN Hash Join DS_BCAST_INNER  (cost=1644.30..33420353.88 rows=8655 width=36)
                                                                                      Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                                      ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2385519 width=40)
                                                                                            Filter: ((ss_hdemo_sk IS NOT NULL) AND (ss_sold_date_sk IS NOT NULL) AND (ss_addr_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                                                      ->  XN Hash  (cost=1643.60..1643.60 rows=278 width=4)
                                                                                            ->  XN Seq Scan on date_dim  (cost=0.00..1643.60 rows=278 width=4)
                                                                                                  Filter: (((d_year = 2001) OR (d_year = 2002) OR (d_year = 2000)) AND ((d_dow = 6) OR (d_dow = 0)))
                                                                                ->  XN Hash  (cost=108.00..108.00 rows=1801 width=4)
                                                                                      ->  XN Seq Scan on household_demographics  (cost=0.00..108.00 rows=1801 width=4)
                                                                                            Filter: ((hd_vehicle_count = 0) OR (hd_dep_count = 1))
                                                                          ->  XN Hash  (cost=0.18..0.18 rows=10 width=4)
                                                                                ->  XN Seq Scan on store  (cost=0.00..0.18 rows=10 width=4)
                                                                                      Filter: (((s_city)::text = 'Midway'::text) OR ((s_city)::text = 'Fairview'::text))