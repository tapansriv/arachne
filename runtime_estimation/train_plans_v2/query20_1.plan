XN Limit  (cost=1000031024884.20..1000031024884.25 rows=19 width=51)
  ->  XN Merge  (cost=1000031024884.20..1000031024884.25 rows=19 width=51)
        Merge Key: sum(store_sales.ss_ext_sales_price), item.i_brand, item.i_brand_id, item.i_manufact_id, item.i_manufact
        ->  XN Network  (cost=1000031024884.20..1000031024884.25 rows=19 width=51)
              Send to leader
              ->  XN Sort  (cost=1000031024884.20..1000031024884.25 rows=19 width=51)
                    Sort Key: sum(store_sales.ss_ext_sales_price), item.i_brand, item.i_brand_id, item.i_manufact_id, item.i_manufact
                    ->  XN HashAggregate  (cost=31024883.75..31024883.80 rows=19 width=51)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=15903757.75..31024883.51 rows=19 width=51)
                                Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                Join Filter: ("substring"(("outer".ca_zip)::text, 1, 5) <> "substring"(("inner".s_zip)::text, 1, 5))
                                ->  XN Hash Join DS_BCAST_INNER  (cost=15903757.60..28144882.79 rows=19 width=64)
                                      Hash Cond: ("outer".ca_address_sk = "inner".c_current_addr_sk)
                                      ->  XN Seq Scan on customer_address  (cost=0.00..500.00 rows=50000 width=13)
                                      ->  XN Hash  (cost=15903757.56..15903757.56 rows=18 width=59)
                                            ->  XN Hash Join DS_BCAST_INNER  (cost=3661507.38..15903757.56 rows=18 width=59)
                                                  Hash Cond: ("outer".c_customer_sk = "inner".ss_customer_sk)
                                                  ->  XN Seq Scan on customer  (cost=0.00..1000.00 rows=100000 width=8)
                                                  ->  XN Hash  (cost=3661507.33..3661507.33 rows=18 width=59)
                                                        ->  XN Hash Join DS_DIST_NONE  (cost=1321.61..3661507.33 rows=18 width=59)
                                                              Hash Cond: ("outer".ss_item_sk = "inner".i_item_sk)
                                                              ->  XN Hash Join DS_BCAST_INNER  (cost=1095.81..3661259.26 rows=982 width=20)
                                                                    Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                    ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2507967 width=24)
                                                                          Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_customer_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                                    ->  XN Hash  (cost=1095.73..1095.73 rows=30 width=4)
                                                                          ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=30 width=4)
                                                                                Filter: ((d_year = 1998) AND (d_moy = 11))
                                                              ->  XN Hash  (cost=225.00..225.00 rows=320 width=47)
                                                                    ->  XN Seq Scan on item  (cost=0.00..225.00 rows=320 width=47)
                                                                          Filter: (i_manager_id = 25)
                                ->  XN Hash  (cost=0.12..0.12 rows=12 width=13)
                                      ->  XN Seq Scan on store  (cost=0.00..0.12 rows=12 width=13)