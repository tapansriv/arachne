XN Limit  (cost=2000128710903.08..2000128710903.33 rows=100 width=80)
  ->  XN Merge  (cost=2000128710903.08..2000128710905.61 rows=1011 width=80)
        Merge Key: lochierarchy, CASE WHEN (lochierarchy = 0) THEN i_category ELSE NULL::character varying END, pg_catalog.rank()
        ->  XN Network  (cost=2000128710903.08..2000128710905.61 rows=1011 width=80)
              Send to leader
              ->  XN Sort  (cost=2000128710903.08..2000128710905.61 rows=1011 width=80)
                    Sort Key: lochierarchy, CASE WHEN (lochierarchy = 0) THEN i_category ELSE NULL::character varying END, pg_catalog.rank()
                    ->  XN Window  (cost=1000128710827.35..1000128710852.63 rows=1011 width=80)
                          Partition: lochierarchy, CASE WHEN (t_class = 0) THEN i_category ELSE NULL::character varying END
                          Order: gross_margin
                          ->  XN Sort  (cost=1000128710827.35..1000128710829.88 rows=1011 width=80)
                                Sort Key: lochierarchy, CASE WHEN (t_class = 0) THEN i_category ELSE NULL::character varying END, gross_margin
                                ->  XN Network  (cost=42903591.58..128710776.90 rows=1011 width=80)
                                      Distribute
                                      ->  XN Subquery Scan results_rollup  (cost=42903591.58..128710776.90 rows=1011 width=80)
                                            ->  XN Unique  (cost=42903591.58..128710766.79 rows=1011 width=36)
                                                  ->  XN Append  (cost=42903591.58..128710751.62 rows=1011 width=36)
                                                        ->  XN Subquery Scan "*SELECT* 1"  (cost=42903591.58..42903609.08 rows=1000 width=36)
                                                              ->  XN HashAggregate  (cost=42903591.58..42903599.08 rows=1000 width=36)
                                                                    ->  XN Hash Join DS_DIST_NONE  (cost=42902954.95..42903475.77 rows=11581 width=36)
                                                                          Hash Cond: ("outer".i_item_sk = "inner".ss_item_sk)
                                                                          ->  XN Seq Scan on item  (cost=0.00..180.00 rows=18000 width=24)
                                                                          ->  XN Hash  (cost=42902926.69..42902926.69 rows=11303 width=20)
                                                                                ->  XN Hash Join DS_BCAST_INNER  (cost=914.15..42902926.69 rows=11303 width=20)
                                                                                      Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                                                                      ->  XN Hash Join DS_BCAST_INNER  (cost=913.98..41462665.66 rows=11825 width=24)
                                                                                            Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                                            ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2626352 width=28)
                                                                                                  Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                                                            ->  XN Hash  (cost=913.11..913.11 rows=345 width=4)
                                                                                                  ->  XN Seq Scan on date_dim d1  (cost=0.00..913.11 rows=345 width=4)
                                                                                                        Filter: (d_year = 2001)
                                                                                      ->  XN Hash  (cost=0.15..0.15 rows=12 width=4)
                                                                                            ->  XN Seq Scan on store  (cost=0.00..0.15 rows=12 width=4)
                                                                                                  Filter: ((s_state)::text = 'TN'::text)
                                                        ->  XN Subquery Scan "*SELECT* 2"  (cost=42903562.62..42903562.80 rows=10 width=25)
                                                              ->  XN HashAggregate  (cost=42903562.62..42903562.70 rows=10 width=25)
                                                                    ->  XN Hash Join DS_DIST_NONE  (cost=42902954.95..42903475.77 rows=11581 width=25)
                                                                          Hash Cond: ("outer".i_item_sk = "inner".ss_item_sk)
                                                                          ->  XN Seq Scan on item  (cost=0.00..180.00 rows=18000 width=13)
                                                                          ->  XN Hash  (cost=42902926.69..42902926.69 rows=11303 width=20)
                                                                                ->  XN Hash Join DS_BCAST_INNER  (cost=914.15..42902926.69 rows=11303 width=20)
                                                                                      Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                                                                      ->  XN Hash Join DS_BCAST_INNER  (cost=913.98..41462665.66 rows=11825 width=24)
                                                                                            Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                                            ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2626352 width=28)
                                                                                                  Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                                                            ->  XN Hash  (cost=913.11..913.11 rows=345 width=4)
                                                                                                  ->  XN Seq Scan on date_dim d1  (cost=0.00..913.11 rows=345 width=4)
                                                                                                        Filter: (d_year = 2001)
                                                                                      ->  XN Hash  (cost=0.15..0.15 rows=12 width=4)
                                                                                            ->  XN Seq Scan on store  (cost=0.00..0.15 rows=12 width=4)
                                                                                                  Filter: ((s_state)::text = 'TN'::text)
                                                        ->  XN Network  (cost=42903579.73..42903579.75 rows=1 width=16)
                                                              Distribute Round Robin
                                                              ->  XN Subquery Scan "*SELECT* 3"  (cost=42903579.73..42903579.75 rows=1 width=16)
                                                                    ->  XN Aggregate  (cost=42903579.73..42903579.74 rows=1 width=16)
                                                                          ->  XN Hash Join DS_DIST_NONE  (cost=1139.15..42903521.83 rows=11581 width=16)
                                                                                Hash Cond: ("outer".ss_item_sk = "inner".i_item_sk)
                                                                                ->  XN Hash Join DS_BCAST_INNER  (cost=914.15..42902926.69 rows=11303 width=20)
                                                                                      Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                                                                      ->  XN Hash Join DS_BCAST_INNER  (cost=913.98..41462665.66 rows=11825 width=24)
                                                                                            Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                                            ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2626352 width=28)
                                                                                                  Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                                                            ->  XN Hash  (cost=913.11..913.11 rows=345 width=4)
                                                                                                  ->  XN Seq Scan on date_dim d1  (cost=0.00..913.11 rows=345 width=4)
                                                                                                        Filter: (d_year = 2001)
                                                                                      ->  XN Hash  (cost=0.15..0.15 rows=12 width=4)
                                                                                            ->  XN Seq Scan on store  (cost=0.00..0.15 rows=12 width=4)
                                                                                                  Filter: ((s_state)::text = 'TN'::text)
                                                                                ->  XN Hash  (cost=180.00..180.00 rows=18000 width=4)
                                                                                      ->  XN Seq Scan on item  (cost=0.00..180.00 rows=18000 width=4)