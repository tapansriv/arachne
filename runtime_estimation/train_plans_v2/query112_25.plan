XN Window  (cost=1000050145226.19..1000050145394.55 rows=11224 width=16)
  Partition: store_sales.ss_item_sk
  Order: date_dim.d_date
  ->  XN Sort  (cost=1000050145226.19..1000050145254.25 rows=11224 width=16)
        Sort Key: store_sales.ss_item_sk, date_dim.d_date
        ->  XN HashAggregate  (cost=50144443.08..50144471.14 rows=11224 width=16)
              ->  XN Hash Join DS_BCAST_INNER  (cost=1096.52..50144358.90 rows=11224 width=16)
                    Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                    ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2747688 width=16)
                          Filter: (ss_sold_date_sk IS NOT NULL)
                    ->  XN Hash  (cost=1095.73..1095.73 rows=313 width=8)
                          ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=313 width=8)
                                Filter: ((d_month_seq >= 1194) AND (d_month_seq <= 1205))

XN Window  (cost=1000050097522.72..1000050097568.92 rows=3080 width=16)
  Partition: web_sales.ws_item_sk
  Order: date_dim.d_date
  ->  XN Sort  (cost=1000050097522.72..1000050097530.42 rows=3080 width=16)
        Sort Key: web_sales.ws_item_sk, date_dim.d_date
        ->  XN Network  (cost=50097336.56..50097344.26 rows=3080 width=16)
              Distribute
              ->  XN HashAggregate  (cost=50097336.56..50097344.26 rows=3080 width=16)
                    ->  XN Hash Join DS_BCAST_INNER  (cost=1096.52..50097313.46 rows=3080 width=16)
                          Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                          ->  XN Seq Scan on web_sales  (cost=0.00..7193.84 rows=719384 width=16)
                          ->  XN Hash  (cost=1095.73..1095.73 rows=313 width=8)
                                ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=313 width=8)
                                      Filter: ((d_month_seq >= 1194) AND (d_month_seq <= 1205))

XN HashAggregate  (cost=335531.83..335654.68 rows=49143 width=24)
  ->  XN Merge Join DS_DIST_NONE  (cost=0.00..267479.98 rows=6805185 width=24)
        Merge Cond: ("outer".ss_item_sk = "inner".ss_item_sk)
        Join Filter: ("outer".col3 >= "inner".col3)
        ->  XN Seq Scan on volt_tt_619391c817a8d  (cost=0.00..4914.22 rows=491422 width=24)
        ->  XN Seq Scan on volt_tt_619391c817a8d  (cost=0.00..4914.22 rows=491422 width=20)

XN HashAggregate  (cost=29478.08..29528.21 rows=20051 width=24)
  ->  XN Merge Join DS_DIST_NONE  (cost=0.00..24005.56 rows=547252 width=24)
        Merge Cond: ("outer".ws_item_sk = "inner".ws_item_sk)
        Join Filter: ("outer".col3 >= "inner".col3)
        ->  XN Seq Scan on volt_tt_619391c819c41  (cost=0.00..1393.45 rows=139345 width=24)
        ->  XN Seq Scan on volt_tt_619391c819c41  (cost=0.00..1393.45 rows=139345 width=20)

XN Window  (cost=1151384254021.29..1151384267535.39 rows=491422 width=32)
  Partition: CASE WHEN (volt_tt_619391c81cb27.item_sk IS NOT NULL) THEN volt_tt_619391c81cb27.item_sk ELSE volt_tt_619391c81ba01.item_sk END
  Order: CASE WHEN (volt_tt_619391c81cb27.d_date IS NOT NULL) THEN volt_tt_619391c81cb27.d_date ELSE volt_tt_619391c81ba01.d_date END
  ->  XN Sort  (cost=1151384254021.29..1151384255249.84 rows=491422 width=32)
        Sort Key: CASE WHEN (volt_tt_619391c81cb27.item_sk IS NOT NULL) THEN volt_tt_619391c81cb27.item_sk ELSE volt_tt_619391c81ba01.item_sk END, CASE WHEN (volt_tt_619391c81cb27.d_date IS NOT NULL) THEN volt_tt_619391c81cb27.d_date ELSE volt_tt_619391c81ba01.d_date END
        ->  XN Network  (cost=2090.18..151384207565.68 rows=491422 width=32)
              Distribute
              ->  XN Hash Full Join DS_DIST_BOTH  (cost=2090.18..151384207565.68 rows=491422 width=32)
                    Outer Dist Key: volt_tt_619391c81ba01.item_sk
                    Inner Dist Key: volt_tt_619391c81cb27.item_sk
                    Hash Cond: (("outer".item_sk = "inner".item_sk) AND ("outer".d_date = "inner".d_date))
                    ->  XN Seq Scan on volt_tt_619391c81ba01  (cost=0.00..4914.22 rows=491422 width=16)
                    ->  XN Hash  (cost=1393.45..1393.45 rows=139345 width=16)
                          ->  XN Seq Scan on volt_tt_619391c81cb27  (cost=0.00..1393.45 rows=139345 width=16)

XN Limit  (cost=1000000942719.57..1000000942772.95 rows=100 width=40)
  ->  XN Merge  (cost=1000000942719.57..1000000943253.38 rows=1000 width=40)
        Merge Key: volt_tt_619391c81fc58.col0, volt_tt_619391c81fc58.col1
        ->  XN Network  (cost=1000000942719.57..1000000943253.38 rows=213526 width=40)
              Send to leader
              ->  XN Sort  (cost=1000000942719.57..1000000943253.38 rows=213526 width=40)
                    Sort Key: volt_tt_619391c81fc58.col0, volt_tt_619391c81fc58.col1
                    ->  XN HashAggregate  (cost=921149.12..923818.19 rows=213526 width=40)
                          Filter: ("max"(cume_sales) > "max"(cume_sales1))
                          ->  XN Hash Join DS_DIST_NONE  (cost=7554.26..715311.46 rows=10291883 width=40)
                                Hash Cond: ("outer".col0 = "inner".col0)
                                Join Filter: ("outer".col4 >= "inner".col4)
                                ->  XN Seq Scan on volt_tt_619391c81fc58  (cost=0.00..6043.41 rows=604341 width=32)
                                ->  XN Hash  (cost=6043.41..6043.41 rows=604341 width=28)
                                      ->  XN Seq Scan on volt_tt_619391c81fc58 volt_dt_0  (cost=0.00..6043.41 rows=604341 width=28)