XN Limit  (cost=1001392205750.08..1001392205750.15 rows=30 width=49)
  ->  XN Merge  (cost=1001392205750.08..1001392205750.15 rows=30 width=49)
        Merge Key: customer_demographics.cd_gender, customer_demographics.cd_marital_status, customer_demographics.cd_education_status, customer_demographics.cd_purchase_estimate, customer_demographics.cd_credit_rating, customer_demographics.cd_dep_count, customer_demographics.cd_dep_employed_count, customer_demographics.cd_dep_college_count
        ->  XN Network  (cost=1001392205750.08..1001392205750.15 rows=30 width=49)
              Send to leader
              ->  XN Sort  (cost=1001392205750.08..1001392205750.15 rows=30 width=49)
                    Sort Key: customer_demographics.cd_gender, customer_demographics.cd_marital_status, customer_demographics.cd_education_status, customer_demographics.cd_purchase_estimate, customer_demographics.cd_credit_rating, customer_demographics.cd_dep_count, customer_demographics.cd_dep_employed_count, customer_demographics.cd_dep_college_count
                    ->  XN HashAggregate  (cost=1392205748.89..1392205749.34 rows=30 width=49)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=752525696.44..1392205747.84 rows=30 width=49)
                                Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                ->  XN HashAggregate  (cost=13744479.88..13744479.88 rows=4088 width=4)
                                      ->  XN Hash Join DS_BCAST_INNER  (cost=1278.64..13744469.66 rows=4088 width=4)
                                            Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                            ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2747688 width=8)
                                                  Filter: (ss_sold_date_sk IS NOT NULL)
                                            ->  XN Hash  (cost=1278.36..1278.36 rows=114 width=4)
                                                  ->  XN Seq Scan on date_dim  (cost=0.00..1278.36 rows=114 width=4)
                                                        Filter: ((d_year = 1999) AND (d_moy <= 4) AND (d_moy >= 1))
                                ->  XN Hash  (cost=738781214.70..738781214.70 rows=744 width=53)
                                      ->  XN Hash Left Join DS_BCAST_INNER  (cost=75535485.44..738781214.70 rows=744 width=53)
                                            Hash Cond: ("outer".c_customer_sk = "inner".rhs_col_1)
                                            Filter: (("outer".witness IS NOT NULL) OR ("inner".witness_1 IS NOT NULL))
                                            ->  XN Hash Left Join DS_BCAST_INNER  (cost=61837989.80..545562876.39 rows=744 width=57)
                                                  Hash Cond: ("outer".c_customer_sk = "inner".rhs_col)
                                                  ->  XN Hash Join DS_BCAST_INNER  (cost=48124302.16..175527527.60 rows=744 width=53)
                                                        Hash Cond: ("outer".cd_demo_sk = "inner".c_current_cdemo_sk)
                                                        ->  XN Seq Scan on customer_demographics  (cost=0.00..19208.00 rows=1920800 width=53)
                                                        ->  XN Hash  (cost=48124300.17..48124300.17 rows=796 width=8)
                                                              ->  XN Hash Join DS_BCAST_INNER  (cost=1126.00..48124300.17 rows=796 width=8)
                                                                    Hash Cond: ("outer".c_current_addr_sk = "inner".ca_address_sk)
                                                                    ->  XN Seq Scan on customer c  (cost=0.00..1000.00 rows=96276 width=12)
                                                                          Filter: (c_current_cdemo_sk IS NOT NULL)
                                                                    ->  XN Hash  (cost=1125.00..1125.00 rows=401 width=4)
                                                                          ->  XN Seq Scan on customer_address ca  (cost=0.00..1125.00 rows=401 width=4)
                                                                                Filter: (((ca_county)::text = 'Clay County'::text) OR ((ca_county)::text = 'Caldwell County'::text) OR ((ca_county)::text = 'Nicholas County'::text) OR ((ca_county)::text = 'Oneida County'::text) OR ((ca_county)::text = 'Wright County'::text))
                                                  ->  XN Hash  (cost=13713682.07..13713682.07 rows=2227 width=8)
                                                        ->  XN Subquery Scan derived_table1  (cost=1278.64..13713682.07 rows=2227 width=8)
                                                              ->  XN Unique  (cost=1278.64..13713659.80 rows=2227 width=4)
                                                                    ->  XN Hash Join DS_BCAST_INNER  (cost=1278.64..13713648.67 rows=2227 width=4)
                                                                          Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                                                                          ->  XN Seq Scan on catalog_sales  (cost=0.00..14415.48 rows=1434582 width=8)
                                                                                Filter: (cs_sold_date_sk IS NOT NULL)
                                                                          ->  XN Hash  (cost=1278.36..1278.36 rows=114 width=4)
                                                                                ->  XN Seq Scan on date_dim  (cost=0.00..1278.36 rows=114 width=4)
                                                                                      Filter: ((d_year = 1999) AND (d_moy <= 4) AND (d_moy >= 1))
                                            ->  XN Hash  (cost=13697492.83..13697492.83 rows=1122 width=8)
                                                  ->  XN Subquery Scan derived_table2  (cost=1278.64..13697492.83 rows=1122 width=8)
                                                        ->  XN Unique  (cost=1278.64..13697481.61 rows=1122 width=4)
                                                              ->  XN Hash Join DS_BCAST_INNER  (cost=1278.64..13697476.00 rows=1122 width=4)
                                                                    Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                                                                    ->  XN Seq Scan on web_sales  (cost=0.00..7193.84 rows=719384 width=8)
                                                                    ->  XN Hash  (cost=1278.36..1278.36 rows=114 width=4)
                                                                          ->  XN Seq Scan on date_dim  (cost=0.00..1278.36 rows=114 width=4)
                                                                                Filter: ((d_year = 1999) AND (d_moy <= 4) AND (d_moy >= 1))