XN Aggregate  (cost=258235678.27..258235678.27 rows=1 width=16)
  ->  XN Subquery Scan x  (cost=86104633.32..258235678.26 rows=3 width=16)
        ->  XN Append  (cost=86104633.32..258235678.23 rows=3 width=12)
              ->  XN Subquery Scan "*SELECT* 1"  (cost=86104633.32..86104633.34 rows=1 width=12)
                    ->  XN Aggregate  (cost=86104633.32..86104633.33 rows=1 width=12)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=1097.53..86104504.77 rows=25710 width=12)
                                Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2747688 width=16)
                                      Filter: (ss_sold_date_sk IS NOT NULL)
                                ->  XN Hash  (cost=1095.73..1095.73 rows=717 width=4)
                                      ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=717 width=4)
                                            Filter: ((d_year >= 1999) AND (d_year <= 2001))
              ->  XN Subquery Scan "*SELECT* 2"  (cost=86073655.35..86073655.37 rows=1 width=12)
                    ->  XN Aggregate  (cost=86073655.35..86073655.36 rows=1 width=12)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=1097.53..86073585.32 rows=14004 width=12)
                                Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                                ->  XN Seq Scan on catalog_sales  (cost=0.00..14415.48 rows=1434582 width=16)
                                      Filter: (cs_sold_date_sk IS NOT NULL)
                                ->  XN Hash  (cost=1095.73..1095.73 rows=717 width=4)
                                      ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=717 width=4)
                                            Filter: ((d_year >= 2000) AND (d_year <= 2002))
              ->  XN Subquery Scan "*SELECT* 3"  (cost=86057389.50..86057389.52 rows=1 width=12)
                    ->  XN Aggregate  (cost=86057389.50..86057389.51 rows=1 width=12)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=1097.53..86057354.22 rows=7055 width=12)
                                Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                                ->  XN Seq Scan on web_sales  (cost=0.00..7193.84 rows=719384 width=16)
                                ->  XN Hash  (cost=1095.73..1095.73 rows=717 width=4)
                                      ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=717 width=4)
                                            Filter: ((d_year >= 2000) AND (d_year <= 2002))

XN Hash Join DS_BCAST_INNER  (cost=126.51..1446188301.24 rows=16291 width=4)
  Hash Cond: (("outer".i_brand_id = "inner".brand_id) AND ("outer".i_category_id = "inner".category_id) AND ("outer".i_class_id = "inner".class_id))
  ->  XN Seq Scan on item  (cost=0.00..180.00 rows=17882 width=16)
        Filter: ((i_brand_id IS NOT NULL) AND (i_category_id IS NOT NULL) AND (i_class_id IS NOT NULL))
  ->  XN Hash  (cost=72.29..72.29 rows=7229 width=12)
        ->  XN Subquery Scan x  (cost=0.00..72.29 rows=7229 width=12)
              ->  XN Hash Intersect Distinct DS_DIST_NONE  (cost=0.00..0.00 rows=7229 width=12)
                    Hash Cond: (("outer".brand_id = "inner".brand_id) AND ("outer".class_id = "inner".class_id) AND ("outer".category_id = "inner".category_id))
                    Join Filter: ((("outer".brand_id = "inner".brand_id) OR (("inner".brand_id IS NULL) AND ("outer".brand_id IS NULL))) AND (("outer".class_id = "inner".class_id) OR (("inner".class_id IS NULL) AND ("outer".class_id IS NULL))) AND (("outer".category_id = "inner".category_id) OR (("inner".category_id IS NULL) AND ("outer".category_id IS NULL))))
                    ->  XN Network  (cost=0.00..0.00 rows=14350 width=12)
                          Distribute
                          ->  XN Hash Intersect Distinct DS_DIST_NONE  (cost=0.00..0.00 rows=14350 width=12)
                                Hash Cond: (("outer".brand_id = "inner".brand_id) AND ("outer".class_id = "inner".class_id) AND ("outer".category_id = "inner".category_id))
                                Join Filter: ((("outer".brand_id = "inner".brand_id) OR (("inner".brand_id IS NULL) AND ("outer".brand_id IS NULL))) AND (("outer".class_id = "inner".class_id) OR (("inner".class_id IS NULL) AND ("outer".class_id IS NULL))) AND (("outer".category_id = "inner".category_id) OR (("inner".category_id IS NULL) AND ("outer".category_id IS NULL))))
                                ->  XN Network  (cost=86104569.04..86105680.92 rows=26344 width=12)
                                      Distribute
                                      ->  XN Subquery Scan "*SELECT* 1"  (cost=86104569.04..86105680.92 rows=26344 width=12)
                                            ->  XN Hash Join DS_DIST_NONE  (cost=86104569.04..86105417.48 rows=26344 width=12)
                                                  Hash Cond: ("outer".i_item_sk = "inner".ss_item_sk)
                                                  ->  XN Seq Scan on item iss  (cost=0.00..180.00 rows=18000 width=16)
                                                  ->  XN Hash  (cost=86104504.77..86104504.77 rows=25710 width=4)
                                                        ->  XN Hash Join DS_BCAST_INNER  (cost=1097.53..86104504.77 rows=25710 width=4)
                                                              Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                              ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2747688 width=8)
                                                                    Filter: (ss_sold_date_sk IS NOT NULL)
                                                              ->  XN Hash  (cost=1095.73..1095.73 rows=717 width=4)
                                                                    ->  XN Seq Scan on date_dim d1  (cost=0.00..1095.73 rows=717 width=4)
                                                                          Filter: ((d_year >= 1999) AND (d_year <= 2001))
                                ->  XN Hash  (cost=86074312.33..86074312.33 rows=14350 width=12)
                                      ->  XN Network  (cost=86073620.33..86074312.33 rows=14350 width=12)
                                            Distribute
                                            ->  XN Subquery Scan "*SELECT* 2"  (cost=86073620.33..86074312.33 rows=14350 width=12)
                                                  ->  XN Hash Join DS_DIST_NONE  (cost=86073620.33..86074168.83 rows=14350 width=12)
                                                        Hash Cond: ("outer".i_item_sk = "inner".cs_item_sk)
                                                        ->  XN Seq Scan on item ics  (cost=0.00..180.00 rows=18000 width=16)
                                                        ->  XN Hash  (cost=86073585.32..86073585.32 rows=14004 width=4)
                                                              ->  XN Hash Join DS_BCAST_INNER  (cost=1097.53..86073585.32 rows=14004 width=4)
                                                                    Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                                                                    ->  XN Seq Scan on catalog_sales  (cost=0.00..14415.48 rows=1434582 width=8)
                                                                          Filter: (cs_sold_date_sk IS NOT NULL)
                                                                    ->  XN Hash  (cost=1095.73..1095.73 rows=717 width=4)
                                                                          ->  XN Seq Scan on date_dim d2  (cost=0.00..1095.73 rows=717 width=4)
                                                                                Filter: ((d_year >= 1999) AND (d_year <= 2001))
                    ->  XN Hash  (cost=932657921.43..932657921.43 rows=7229 width=12)
                          ->  XN Network  (cost=86057371.86..932657921.43 rows=7229 width=12)
                                Distribute
                                ->  XN Subquery Scan "*SELECT* 3"  (cost=86057371.86..932657921.43 rows=7229 width=12)
                                      ->  XN Hash Join DS_BCAST_INNER  (cost=86057371.86..932657849.14 rows=7229 width=12)
                                            Hash Cond: ("outer".i_item_sk = "inner".ws_item_sk)
                                            ->  XN Seq Scan on item iws  (cost=0.00..180.00 rows=18000 width=16)
                                            ->  XN Hash  (cost=86057354.22..86057354.22 rows=7055 width=4)
                                                  ->  XN Hash Join DS_BCAST_INNER  (cost=1097.53..86057354.22 rows=7055 width=4)
                                                        Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                                                        ->  XN Seq Scan on web_sales  (cost=0.00..7193.84 rows=719384 width=8)
                                                        ->  XN Hash  (cost=1095.73..1095.73 rows=717 width=4)
                                                              ->  XN Seq Scan on date_dim d3  (cost=0.00..1095.73 rows=717 width=4)
                                                                    Filter: ((d_year >= 1999) AND (d_year <= 2001))

XN HashAggregate  (cost=3677080.57..3677091.47 rows=545 width=24)
  Filter: ($0 < sum(((cs_quantity)::double precision * cs_list_price)))
  InitPlan
    ->  XN Seq Scan on volt_tt_6193982e48202  (cost=0.00..0.01 rows=1 width=8)
  ->  XN Hash Join DS_DIST_NONE  (cost=3676661.93..3677072.38 rows=545 width=24)
        Hash Cond: ("outer".i_item_sk = "inner".cs_item_sk)
        ->  XN Seq Scan on item  (cost=0.00..180.00 rows=18000 width=16)
        ->  XN Hash  (cost=3676660.60..3676660.60 rows=531 width=20)
              ->  XN Hash Join DS_BCAST_INNER  (cost=1298.22..3676660.60 rows=531 width=20)
                    Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                    ->  XN Hash IN Join DS_DIST_NONE  (cost=202.41..59338.05 rows=1297715 width=24)
                          Hash Cond: ("outer".cs_item_sk = "inner".ss_item_sk)
                          ->  XN Seq Scan on catalog_sales  (cost=0.00..14415.48 rows=1434582 width=20)
                                Filter: (cs_sold_date_sk IS NOT NULL)
                          ->  XN Hash  (cost=161.93..161.93 rows=16193 width=4)
                                ->  XN Seq Scan on volt_tt_6193982e4f6d4  (cost=0.00..161.93 rows=16193 width=4)
                    ->  XN Hash  (cost=1095.73..1095.73 rows=30 width=4)
                          ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=30 width=4)
                                Filter: ((2002 = d_year) AND (11 = d_moy))

XN HashAggregate  (cost=3747267.20..3747287.18 rows=999 width=24)
  Filter: ($0 < sum(((ss_quantity)::double precision * ss_list_price)))
  InitPlan
    ->  XN Seq Scan on volt_tt_6193982e48202  (cost=0.00..0.01 rows=1 width=8)
  ->  XN Hash Join DS_DIST_NONE  (cost=3746837.21..3747252.20 rows=999 width=24)
        Hash Cond: ("outer".i_item_sk = "inner".ss_item_sk)
        ->  XN Seq Scan on item  (cost=0.00..180.00 rows=18000 width=16)
        ->  XN Hash  (cost=3746834.78..3746834.78 rows=974 width=20)
              ->  XN Hash Join DS_BCAST_INNER  (cost=1298.22..3746834.78 rows=974 width=20)
                    Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                    ->  XN Hash IN Join DS_DIST_NONE  (cost=202.41..114659.95 rows=2485542 width=24)
                          Hash Cond: ("outer".ss_item_sk = "inner".ss_item_sk)
                          ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2747688 width=20)
                                Filter: (ss_sold_date_sk IS NOT NULL)
                          ->  XN Hash  (cost=161.93..161.93 rows=16193 width=4)
                                ->  XN Seq Scan on volt_tt_6193982e4f6d4  (cost=0.00..161.93 rows=16193 width=4)
                    ->  XN Hash  (cost=1095.73..1095.73 rows=30 width=4)
                          ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=30 width=4)
                                Filter: ((2002 = d_year) AND (11 = d_moy))

XN HashAggregate  (cost=710298306.04..710298311.54 rows=275 width=24)
  Filter: ($0 < sum(((ws_quantity)::double precision * ws_list_price)))
  InitPlan
    ->  XN Seq Scan on volt_tt_6193982e48202  (cost=0.00..0.01 rows=1 width=8)
  ->  XN Hash Join DS_BCAST_INNER  (cost=639257527.79..710298301.91 rows=275 width=24)
        Hash Cond: ("outer".i_item_sk = "inner".ws_item_sk)
        ->  XN Hash Join DS_DIST_NONE  (cost=635640242.14..635640809.97 rows=16283 width=20)
              Hash Cond: ("outer".i_item_sk = "inner".ss_item_sk)
              ->  XN Seq Scan on item  (cost=0.00..180.00 rows=18000 width=16)
              ->  XN Hash  (cost=202.41..202.41 rows=15891 width=4)
                    ->  XN HashAggregate  (cost=202.41..202.41 rows=15891 width=4)
                          ->  XN Seq Scan on volt_tt_6193982e4f6d4  (cost=0.00..161.93 rows=16193 width=4)
        ->  XN Hash  (cost=3617284.91..3617284.91 rows=296 width=16)
              ->  XN Hash Join DS_BCAST_INNER  (cost=1095.81..3617284.91 rows=296 width=16)
                    Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                    ->  XN Seq Scan on web_sales  (cost=0.00..7193.84 rows=719384 width=20)
                    ->  XN Hash  (cost=1095.73..1095.73 rows=30 width=4)
                          ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=30 width=4)
                                Filter: ((2002 = d_year) AND (11 = d_moy))

XN Subquery Scan z  (cost=5000000001021.18..5000000001022.43 rows=100 width=60)
  ->  XN Limit  (cost=5000000001021.18..5000000001021.43 rows=100 width=60)
        ->  XN Merge  (cost=5000000001021.18..5000000001021.94 rows=304 width=60)
              Merge Key: channel, i_brand_id, i_class_id, i_category_id
              ->  XN Network  (cost=5000000001021.18..5000000001021.94 rows=304 width=60)
                    Send to leader
                    ->  XN Sort  (cost=5000000001021.18..5000000001021.94 rows=304 width=60)
                          Sort Key: channel, i_brand_id, i_class_id, i_category_id
                          ->  XN Unique  (cost=1000000000282.78..4000000001008.64 rows=304 width=60)
                                ->  XN Append  (cost=1000000000282.78..4000000001004.08 rows=304 width=60)
                                      ->  XN Subquery Scan "*SELECT* 1"  (cost=1000000000282.78..1000000000284.03 rows=100 width=60)
                                            ->  XN Limit  (cost=1000000000282.78..1000000000283.03 rows=100 width=60)
                                                  ->  XN Sort  (cost=1000000000282.78..1000000000283.39 rows=246 width=60)
                                                        Sort Key: derived_col1, derived_col2, derived_col3, derived_col4
                                                        ->  XN Unique  (cost=268.09..273.01 rows=246 width=60)
                                                              ->  XN HashAggregate  (cost=268.09..269.32 rows=246 width=60)
                                                                    ->  XN Subquery Scan y  (cost=60.32..231.32 rows=2451 width=60)
                                                                          ->  XN Append  (cost=60.32..206.81 rows=2451 width=39)
                                                                                ->  XN Subquery Scan "*SELECT* 1"  (cost=60.32..72.79 rows=831 width=37)
                                                                                      ->  XN HashAggregate  (cost=60.32..64.48 rows=831 width=37)
                                                                                            ->  XN Seq Scan on volt_tt_6193982e61d62  (cost=0.00..24.13 rows=2413 width=37)
                                                                                ->  XN Subquery Scan "*SELECT* 2"  (cost=58.88..71.30 rows=828 width=39)
                                                                                      ->  XN HashAggregate  (cost=58.88..63.02 rows=828 width=39)
                                                                                            ->  XN Seq Scan on volt_tt_6193982e5d86b  (cost=0.00..23.55 rows=2355 width=39)
                                                                                ->  XN Subquery Scan "*SELECT* 3"  (cost=50.85..62.73 rows=792 width=35)
                                                                                      ->  XN HashAggregate  (cost=50.85..54.81 rows=792 width=35)
                                                                                            ->  XN Seq Scan on volt_tt_6193982e662f5  (cost=0.00..20.34 rows=2034 width=35)
                                      ->  XN Subquery Scan "*SELECT* 2"  (cost=1000000000259.65..1000000000260.90 rows=100 width=56)
                                            ->  XN Limit  (cost=1000000000259.65..1000000000259.90 rows=100 width=56)
                                                  ->  XN Sort  (cost=1000000000259.65..1000000000260.26 rows=246 width=56)
                                                        Sort Key: derived_col1, derived_col2, derived_col3, NULL::integer
                                                        ->  XN Unique  (cost=244.96..249.88 rows=246 width=56)
                                                              ->  XN HashAggregate  (cost=244.96..246.19 rows=246 width=56)
                                                                    ->  XN Subquery Scan y  (cost=54.29..214.32 rows=2451 width=56)
                                                                          ->  XN Append  (cost=54.29..189.81 rows=2451 width=35)
                                                                                ->  XN Subquery Scan "*SELECT* 1"  (cost=54.29..66.76 rows=831 width=33)
                                                                                      ->  XN HashAggregate  (cost=54.29..58.45 rows=831 width=33)
                                                                                            ->  XN Seq Scan on volt_tt_6193982e61d62  (cost=0.00..24.13 rows=2413 width=33)
                                                                                ->  XN Subquery Scan "*SELECT* 2"  (cost=52.99..65.41 rows=828 width=35)
                                                                                      ->  XN HashAggregate  (cost=52.99..57.13 rows=828 width=35)
                                                                                            ->  XN Seq Scan on volt_tt_6193982e5d86b  (cost=0.00..23.55 rows=2355 width=35)
                                                                                ->  XN Subquery Scan "*SELECT* 3"  (cost=45.77..57.65 rows=792 width=31)
                                                                                      ->  XN HashAggregate  (cost=45.77..49.73 rows=792 width=31)
                                                                                            ->  XN Seq Scan on volt_tt_6193982e662f5  (cost=0.00..20.34 rows=2034 width=31)
                                      ->  XN Subquery Scan "*SELECT* 3"  (cost=1000000000236.51..1000000000237.76 rows=100 width=52)
                                            ->  XN Limit  (cost=1000000000236.51..1000000000236.76 rows=100 width=52)
                                                  ->  XN Sort  (cost=1000000000236.51..1000000000237.13 rows=246 width=52)
                                                        Sort Key: derived_col1, derived_col2, NULL::integer, NULL::integer
                                                        ->  XN Unique  (cost=221.82..226.74 rows=246 width=52)
                                                              ->  XN HashAggregate  (cost=221.82..223.05 rows=246 width=52)
                                                                    ->  XN Subquery Scan y  (cost=48.26..197.31 rows=2451 width=52)
                                                                          ->  XN Append  (cost=48.26..172.81 rows=2451 width=31)
                                                                                ->  XN Subquery Scan "*SELECT* 1"  (cost=48.26..60.73 rows=831 width=29)
                                                                                      ->  XN HashAggregate  (cost=48.26..52.41 rows=831 width=29)
                                                                                            ->  XN Seq Scan on volt_tt_6193982e61d62  (cost=0.00..24.13 rows=2413 width=29)
                                                                                ->  XN Subquery Scan "*SELECT* 2"  (cost=47.10..59.52 rows=828 width=31)
                                                                                      ->  XN HashAggregate  (cost=47.10..51.24 rows=828 width=31)
                                                                                            ->  XN Seq Scan on volt_tt_6193982e5d86b  (cost=0.00..23.55 rows=2355 width=31)
                                                                                ->  XN Subquery Scan "*SELECT* 3"  (cost=40.68..52.56 rows=792 width=27)
                                                                                      ->  XN HashAggregate  (cost=40.68..44.64 rows=792 width=27)
                                                                                            ->  XN Seq Scan on volt_tt_6193982e662f5  (cost=0.00..20.34 rows=2034 width=27)
                                      ->  XN Subquery Scan "*SELECT* 4"  (cost=1000000000119.22..1000000000119.25 rows=3 width=48)
                                            ->  XN Limit  (cost=1000000000119.22..1000000000119.22 rows=3 width=48)
                                                  ->  XN Sort  (cost=1000000000119.22..1000000000119.22 rows=3 width=48)
                                                        Sort Key: derived_col1, NULL::integer, NULL::integer, NULL::integer
                                                        ->  XN Unique  (cost=119.13..119.19 rows=3 width=48)
                                                              ->  XN HashAggregate  (cost=119.13..119.15 rows=3 width=48)
                                                                    ->  XN Subquery Scan y  (cost=42.23..119.11 rows=3 width=48)
                                                                          ->  XN Append  (cost=42.23..119.08 rows=3 width=27)
                                                                                ->  XN Subquery Scan "*SELECT* 1"  (cost=42.23..42.24 rows=1 width=25)
                                                                                      ->  XN HashAggregate  (cost=42.23..42.23 rows=1 width=25)
                                                                                            ->  XN Seq Scan on volt_tt_6193982e61d62  (cost=0.00..24.13 rows=2413 width=25)
                                                                                ->  XN Subquery Scan "*SELECT* 2"  (cost=41.21..41.23 rows=1 width=27)
                                                                                      ->  XN HashAggregate  (cost=41.21..41.22 rows=1 width=27)
                                                                                            ->  XN Seq Scan on volt_tt_6193982e5d86b  (cost=0.00..23.55 rows=2355 width=27)
                                                                                ->  XN Subquery Scan "*SELECT* 3"  (cost=35.59..35.61 rows=1 width=23)
                                                                                      ->  XN HashAggregate  (cost=35.59..35.60 rows=1 width=23)
                                                                                            ->  XN Seq Scan on volt_tt_6193982e662f5  (cost=0.00..20.34 rows=2034 width=23)
                                      ->  XN Network  (cost=102.12..102.14 rows=1 width=16)
                                            Distribute Round Robin
                                            ->  XN Subquery Scan "*SELECT* 5"  (cost=102.12..102.14 rows=1 width=16)
                                                  ->  XN Aggregate  (cost=102.12..102.12 rows=1 width=16)
                                                        ->  XN Subquery Scan y  (cost=36.20..102.11 rows=3 width=16)
                                                              ->  XN Append  (cost=36.20..102.08 rows=3 width=16)
                                                                    ->  XN Subquery Scan "*SELECT* 1"  (cost=36.20..36.21 rows=1 width=16)
                                                                          ->  XN Aggregate  (cost=36.20..36.20 rows=1 width=16)
                                                                                ->  XN Seq Scan on volt_tt_6193982e61d62  (cost=0.00..24.13 rows=2413 width=16)
                                                                    ->  XN Subquery Scan "*SELECT* 2"  (cost=35.33..35.34 rows=1 width=16)
                                                                          ->  XN Aggregate  (cost=35.33..35.33 rows=1 width=16)
                                                                                ->  XN Seq Scan on volt_tt_6193982e5d86b  (cost=0.00..23.55 rows=2355 width=16)
                                                                    ->  XN Subquery Scan "*SELECT* 3"  (cost=30.52..30.53 rows=1 width=16)
                                                                          ->  XN Aggregate  (cost=30.52..30.52 rows=1 width=16)
                                                                                ->  XN Seq Scan on volt_tt_6193982e662f5  (cost=0.00..20.34 rows=2034 width=16)