XN Limit  (cost=1000677093511.17..1000677093511.42 rows=100 width=39)
  ->  XN Merge  (cost=1000677093511.17..1000677093511.86 rows=279 width=39)
        Merge Key: customer.c_customer_id
        ->  XN Network  (cost=1000677093511.17..1000677093511.86 rows=279 width=39)
              Send to leader
              ->  XN Sort  (cost=1000677093511.17..1000677093511.86 rows=279 width=39)
                    Sort Key: customer.c_customer_id
                    ->  XN Hash Join DS_BCAST_INNER  (cost=517487151.75..677093499.83 rows=279 width=39)
                          Hash Cond: ("outer".sr_cdemo_sk = "inner".c_current_cdemo_sk)
                          ->  XN Seq Scan on store_returns  (cost=0.00..2875.14 rows=277501 width=4)
                                Filter: (sr_cdemo_sk IS NOT NULL)
                          ->  XN Hash  (cost=517487151.03..517487151.03 rows=285 width=47)
                                ->  XN Hash Join DS_BCAST_INNER  (cost=358323930.17..517487151.03 rows=285 width=47)
                                      Hash Cond: ("outer".cd_demo_sk = "inner".c_current_cdemo_sk)
                                      ->  XN Seq Scan on customer_demographics  (cost=0.00..19208.00 rows=1920800 width=4)
                                      ->  XN Hash  (cost=358323929.41..358323929.41 rows=306 width=43)
                                            ->  XN Hash Join DS_BCAST_INNER  (cost=840819.96..358323929.41 rows=306 width=43)
                                                  Hash Cond: ("outer".c_current_hdemo_sk = "inner".hd_demo_sk)
                                                  ->  XN Hash Join DS_BCAST_INNER  (cost=626.15..55083721.55 rows=878 width=47)
                                                        Hash Cond: ("outer".c_current_addr_sk = "inner".ca_address_sk)
                                                        ->  XN Seq Scan on customer  (cost=0.00..1000.00 rows=92739 width=51)
                                                              Filter: ((c_current_cdemo_sk IS NOT NULL) AND (c_current_hdemo_sk IS NOT NULL))
                                                        ->  XN Hash  (cost=625.00..625.00 rows=459 width=4)
                                                              ->  XN Seq Scan on customer_address  (cost=0.00..625.00 rows=459 width=4)
                                                                    Filter: ((ca_city)::text = 'Deerfield'::text)
                                                  ->  XN Hash  (cost=840187.52..840187.52 rows=2520 width=4)
                                                        ->  XN Hash Join DS_BCAST_INNER  (cost=0.32..840187.52 rows=2520 width=4)
                                                              Hash Cond: ("outer".hd_income_band_sk = "inner".ib_income_band_sk)
                                                              ->  XN Seq Scan on household_demographics  (cost=0.00..72.00 rows=7200 width=8)
                                                              ->  XN Hash  (cost=0.30..0.30 rows=7 width=4)
                                                                    ->  XN Seq Scan on income_band  (cost=0.00..0.30 rows=7 width=4)
                                                                          Filter: ((ib_upper_bound <= 86160) AND (ib_lower_bound >= 36160))