XN Window  (cost=1000052225270.32..1000052225445.67 rows=11690 width=16)
  Partition: store_sales.ss_item_sk
  Order: date_dim.d_date
  ->  XN Sort  (cost=1000052225270.32..1000052225299.55 rows=11690 width=16)
        Sort Key: store_sales.ss_item_sk, date_dim.d_date
        ->  XN HashAggregate  (cost=52224451.27..52224480.49 rows=11690 width=16)
              ->  XN Hash Join DS_BCAST_INNER  (cost=1096.55..52224363.59 rows=11690 width=16)
                    Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                    ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2747688 width=16)
                          Filter: (ss_sold_date_sk IS NOT NULL)
                    ->  XN Hash  (cost=1095.73..1095.73 rows=326 width=8)
                          ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=326 width=8)
                                Filter: ((d_month_seq <= 1194) AND (d_month_seq >= 1183))

XN Window  (cost=1000052177533.68..1000052177581.80 rows=3208 width=16)
  Partition: web_sales.ws_item_sk
  Order: date_dim.d_date
  ->  XN Sort  (cost=1000052177533.68..1000052177541.70 rows=3208 width=16)
        Sort Key: web_sales.ws_item_sk, date_dim.d_date
        ->  XN Network  (cost=52177338.83..52177346.85 rows=3208 width=16)
              Distribute
              ->  XN HashAggregate  (cost=52177338.83..52177346.85 rows=3208 width=16)
                    ->  XN Hash Join DS_BCAST_INNER  (cost=1096.55..52177314.77 rows=3208 width=16)
                          Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                          ->  XN Seq Scan on web_sales  (cost=0.00..7193.84 rows=719384 width=16)
                          ->  XN Hash  (cost=1095.73..1095.73 rows=326 width=8)
                                ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=326 width=8)
                                      Filter: ((d_month_seq <= 1194) AND (d_month_seq >= 1183))

XN HashAggregate  (cost=461822.46..461946.90 rows=49777 width=24)
  ->  XN Merge Join DS_DIST_NONE  (cost=0.00..367216.51 rows=9460595 width=24)
        Merge Cond: ("outer".ss_item_sk = "inner".ss_item_sk)
        Join Filter: ("outer".col3 >= "inner".col3)
        ->  XN Seq Scan on volt_tt_6193925bfe233  (cost=0.00..4977.68 rows=497768 width=24)
        ->  XN Seq Scan on volt_tt_6193925bfe233  (cost=0.00..4977.68 rows=497768 width=20)

XN HashAggregate  (cost=39107.64..39157.94 rows=20120 width=24)
  ->  XN Merge Join DS_DIST_NONE  (cost=0.00..31611.88 rows=749576 width=24)
        Merge Cond: ("outer".ws_item_sk = "inner".ws_item_sk)
        Join Filter: ("outer".col3 >= "inner".col3)
        ->  XN Seq Scan on volt_tt_6193925c00413  (cost=0.00..1401.12 rows=140112 width=24)
        ->  XN Seq Scan on volt_tt_6193925c00413  (cost=0.00..1401.12 rows=140112 width=20)

XN Window  (cost=1153091426138.58..1153091439827.20 rows=497768 width=32)
  Partition: CASE WHEN (volt_tt_6193925c02819.item_sk IS NOT NULL) THEN volt_tt_6193925c02819.item_sk ELSE volt_tt_6193925c01de9.item_sk END
  Order: CASE WHEN (volt_tt_6193925c02819.d_date IS NOT NULL) THEN volt_tt_6193925c02819.d_date ELSE volt_tt_6193925c01de9.d_date END
  ->  XN Sort  (cost=1153091426138.58..1153091427383.00 rows=497768 width=32)
        Sort Key: CASE WHEN (volt_tt_6193925c02819.item_sk IS NOT NULL) THEN volt_tt_6193925c02819.item_sk ELSE volt_tt_6193925c01de9.item_sk END, CASE WHEN (volt_tt_6193925c02819.d_date IS NOT NULL) THEN volt_tt_6193925c02819.d_date ELSE volt_tt_6193925c01de9.d_date END
        ->  XN Network  (cost=2101.68..153091379037.00 rows=497768 width=32)
              Distribute
              ->  XN Hash Full Join DS_DIST_BOTH  (cost=2101.68..153091379037.00 rows=497768 width=32)
                    Outer Dist Key: volt_tt_6193925c01de9.item_sk
                    Inner Dist Key: volt_tt_6193925c02819.item_sk
                    Hash Cond: (("outer".item_sk = "inner".item_sk) AND ("outer".d_date = "inner".d_date))
                    ->  XN Seq Scan on volt_tt_6193925c01de9  (cost=0.00..4977.68 rows=497768 width=16)
                    ->  XN Hash  (cost=1401.12..1401.12 rows=140112 width=16)
                          ->  XN Seq Scan on volt_tt_6193925c02819  (cost=0.00..1401.12 rows=140112 width=16)

XN Limit  (cost=1000001284833.05..1000001284888.31 rows=100 width=40)
  ->  XN Merge  (cost=1000001284833.05..1000001285385.63 rows=1000 width=40)
        Merge Key: volt_tt_6193925c04a25.col0, volt_tt_6193925c04a25.col1
        ->  XN Network  (cost=1000001284833.05..1000001285385.63 rows=221032 width=40)
              Send to leader
              ->  XN Sort  (cost=1000001284833.05..1000001285385.63 rows=221032 width=40)
                    Sort Key: volt_tt_6193925c04a25.col0, volt_tt_6193925c04a25.col1
                    ->  XN HashAggregate  (cost=1262449.26..1265212.16 rows=221032 width=40)
                          Filter: ("max"(cume_sales) > "max"(cume_sales1))
                          ->  XN Hash Join DS_DIST_NONE  (cost=7636.95..977403.64 rows=14252281 width=40)
                                Hash Cond: ("outer".col0 = "inner".col0)
                                Join Filter: ("outer".col4 >= "inner".col4)
                                ->  XN Seq Scan on volt_tt_6193925c04a25  (cost=0.00..6109.56 rows=610956 width=32)
                                ->  XN Hash  (cost=6109.56..6109.56 rows=610956 width=28)
                                      ->  XN Seq Scan on volt_tt_6193925c04a25 volt_dt_0  (cost=0.00..6109.56 rows=610956 width=28)