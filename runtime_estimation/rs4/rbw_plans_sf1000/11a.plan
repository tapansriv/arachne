XN CTE Scan on friend_shortest  (cost=77806877816712.06..77806877817048.33 rows=134506 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..77806877816712.06 rows=134506 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..150000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=88725865046.44..77806877666712.05 rows=134505 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=88725865046.44..77806877665367.00 rows=134505 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=88725865046.44..88731669509.27 rows=485602083 width=8)
                            ->  XN Hash Join DS_BCAST_INNER  (cost=36883027471.01..80954797674.36 rows=485602083 width=8)
                                  Hash Cond: ("outer".cs_bill_customer_sk = "inner".c_customer_sk)
                                  ->  XN Nested Loop DS_BCAST_INNER  (cost=36882876703.01..43846611770.63 rows=19124727975 width=8)
                                        Join Filter: (("outer".cs_sales_price < ("inner".cs_sales_price + 5::double precision)) OR ("outer".cs_sales_price > ("inner".cs_sales_price - 5::double precision)))
                                        ->  XN Seq Scan on catalog_sales  (cost=0.00..17999755.20 rows=1164367 width=12)
                                              Filter: (cs_item_sk < 250)
                                        ->  XN Materialize  (cost=36882876703.01..36882876998.66 rows=29565 width=12)
                                              ->  XN Hash Join DS_BCAST_INNER  (cost=150768.00..36882285373.44 rows=29565 width=12)
                                                    Hash Cond: ("outer".cs_bill_customer_sk = "inner".c_customer_sk)
                                                    ->  XN Seq Scan on catalog_sales  (cost=0.00..17999755.20 rows=1164367 width=12)
                                                          Filter: (cs_item_sk < 250)
                                                    ->  XN Hash  (cost=150000.00..150000.00 rows=307201 width=4)
                                                          ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=307201 width=4)
                                                                Filter: ((c_birth_country)::text ~~ '%STAN'::text)
                                  ->  XN Hash  (cost=150000.00..150000.00 rows=307201 width=4)
                                        ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=307201 width=4)
                                              Filter: ((c_birth_country)::text ~~ '%STAN'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----