XN CTE Scan on friend_shortest  (cost=2432738042377.00..2432738042385.86 rows=3543 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..2432738042377.00 rows=3543 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..150000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=386621081591.37..2432737892377.00 rows=3542 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=386621081591.37..2432737892341.58 rows=3542 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=386621081591.37..386621209440.37 rows=12784900 width=8)
                            ->  XN Hash Join DS_DIST_BOTH  (cost=115894350218.99..386416510406.47 rows=12784900 width=8)
                                  Outer Dist Key: "outer".ws_item_sk
                                  Inner Dist Key: public.web_sales.ws_item_sk
                                  Hash Cond: ("outer".ws_item_sk = "inner".ws_item_sk)
                                  ->  XN Hash Join DS_BCAST_INNER  (cost=152414.27..115894192972.72 rows=1932802 width=8)
                                        Hash Cond: ("outer".ws_bill_customer_sk = "inner".c_customer_sk)
                                        ->  XN Seq Scan on web_sales  (cost=0.00..9000004.80 rows=24098051 width=8)
                                              Filter: (ws_item_sk < 10000)
                                        ->  XN Hash  (cost=150000.00..150000.00 rows=965706 width=4)
                                              ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=965706 width=4)
                                                    Filter: ((c_last_name)::text ~~ 'M%'::text)
                                  ->  XN Hash  (cost=115894192972.72..115894192972.72 rows=1932802 width=8)
                                        ->  XN Hash Join DS_BCAST_INNER  (cost=152414.27..115894192972.72 rows=1932802 width=8)
                                              Hash Cond: ("outer".ws_bill_customer_sk = "inner".c_customer_sk)
                                              ->  XN Seq Scan on web_sales  (cost=0.00..9000004.80 rows=24098051 width=8)
                                                    Filter: (ws_item_sk < 10000)
                                              ->  XN Hash  (cost=150000.00..150000.00 rows=965706 width=4)
                                                    ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=965706 width=4)
                                                          Filter: ((c_last_name)::text ~~ 'M%'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----