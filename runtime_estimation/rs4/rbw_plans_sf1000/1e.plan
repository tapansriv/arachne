XN CTE Scan on friend_shortest  (cost=314233910901.66..314233910902.50 rows=335 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..314233910901.66 rows=335 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..150000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=121269592824.05..314233760901.65 rows=334 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=121269592824.05..314233760898.31 rows=334 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=121269592824.05..121269604881.17 rows=1205712 width=8)
                            ->  XN Hash Join DS_DIST_BOTH  (cost=36882720912.94..121250300226.34 rows=1205712 width=8)
                                  Outer Dist Key: "outer".cs_item_sk
                                  Inner Dist Key: public.catalog_sales.cs_item_sk
                                  Hash Cond: ("outer".cs_item_sk = "inner".cs_item_sk)
                                  ->  XN Hash Join DS_BCAST_INNER  (cost=150768.00..36882568661.05 rows=593555 width=8)
                                        Hash Cond: ("outer".cs_bill_customer_sk = "inner".c_customer_sk)
                                        ->  XN Seq Scan on catalog_sales  (cost=0.00..17999755.20 rows=23376184 width=8)
                                              Filter: (cs_item_sk < 5000)
                                        ->  XN Hash  (cost=150000.00..150000.00 rows=307201 width=4)
                                              ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=307201 width=4)
                                                    Filter: ((c_birth_country)::text ~~ '%STAN'::text)
                                  ->  XN Hash  (cost=36882568661.05..36882568661.05 rows=593555 width=8)
                                        ->  XN Hash Join DS_BCAST_INNER  (cost=150768.00..36882568661.05 rows=593555 width=8)
                                              Hash Cond: ("outer".cs_bill_customer_sk = "inner".c_customer_sk)
                                              ->  XN Seq Scan on catalog_sales  (cost=0.00..17999755.20 rows=23376184 width=8)
                                                    Filter: (cs_item_sk < 5000)
                                              ->  XN Hash  (cost=150000.00..150000.00 rows=307201 width=4)
                                                    ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=307201 width=4)
                                                          Filter: ((c_birth_country)::text ~~ '%STAN'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----