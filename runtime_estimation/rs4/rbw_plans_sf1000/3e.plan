XN CTE Scan on friend_shortest  (cost=3097974341601.73..3097974341611.49 rows=3901 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..3097974341601.73 rows=3901 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..150000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=845048007458.92..3097974191601.72 rows=3900 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=845048007458.92..3097974191562.72 rows=3900 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=845048007458.92..845048148230.14 rows=14077122 width=8)
                            ->  XN Hash Join DS_DIST_BOTH  (cost=341234265650.62..844822759429.80 rows=14077122 width=8)
                                  Outer Dist Key: "inner".ss_item_sk
                                  Inner Dist Key: public.store_sales.ss_item_sk
                                  Hash Cond: ("outer".ss_item_sk = "inner".ss_item_sk)
                                  ->  XN Hash Join DS_BCAST_INNER  (cost=43205149.50..341191055430.79 rows=2028129 width=8)
                                        Hash Cond: ("outer".c_customer_sk = "inner".ss_customer_sk)
                                        ->  XN Seq Scan on customer  (cost=0.00..120000.00 rows=12000000 width=4)
                                        ->  XN Hash  (cost=43199819.52..43199819.52 rows=2131993 width=8)
                                              ->  XN Seq Scan on store_sales  (cost=0.00..43199819.52 rows=2131993 width=8)
                                                    Filter: ((ss_item_sk < 3500) AND (ss_sales_price < 200::double precision))
                                  ->  XN Hash  (cost=341191055430.79..341191055430.79 rows=2028129 width=8)
                                        ->  XN Hash Join DS_BCAST_INNER  (cost=43205149.50..341191055430.79 rows=2028129 width=8)
                                              Hash Cond: ("outer".c_customer_sk = "inner".ss_customer_sk)
                                              ->  XN Seq Scan on customer  (cost=0.00..120000.00 rows=12000000 width=4)
                                              ->  XN Hash  (cost=43199819.52..43199819.52 rows=2131993 width=8)
                                                    ->  XN Seq Scan on store_sales  (cost=0.00..43199819.52 rows=2131993 width=8)
                                                          Filter: ((ss_item_sk < 3500) AND (ss_sales_price < 200::double precision))
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----