XN CTE Scan on friend_shortest  (cost=19189480425557408.00..19189480425640424.00 rows=33206430 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..19189480425557408.00 rows=33206430 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..150000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=2413807631037.04..19189480425407408.00 rows=33206429 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=2413807631037.04..19189480425075344.00 rows=33206429 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=2413807631037.04..2415240637408.71 rows=119885500367 width=8)
                            ->  XN Hash Join DS_BCAST_INNER  (cost=36909955675.15..495285588296.67 rows=119885500367 width=8)
                                  Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                  ->  XN Nested Loop DS_BCAST_INNER  (cost=36909804907.15..395686886133.95 rows=4922845950460 width=8)
                                        Join Filter: (("outer".ss_sales_price < ("inner".ss_sales_price + 25::double precision)) OR ("outer".ss_sales_price > ("inner".ss_sales_price - 25::double precision)))
                                        ->  XN Seq Scan on store_sales  (cost=0.00..35999849.60 rows=19075171 width=12)
                                              Filter: (ss_item_sk < 2000)
                                        ->  XN Materialize  (cost=36909804907.15..36909809552.52 rows=464537 width=12)
                                              ->  XN Hash Join DS_BCAST_INNER  (cost=150768.00..36900513702.61 rows=464537 width=12)
                                                    Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                                    ->  XN Seq Scan on store_sales  (cost=0.00..35999849.60 rows=19075171 width=12)
                                                          Filter: (ss_item_sk < 2000)
                                                    ->  XN Hash  (cost=150000.00..150000.00 rows=307201 width=4)
                                                          ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=307201 width=4)
                                                                Filter: ((c_birth_country)::text ~~ '%STAN'::text)
                                  ->  XN Hash  (cost=150000.00..150000.00 rows=307201 width=4)
                                        ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=307201 width=4)
                                              Filter: ((c_birth_country)::text ~~ '%STAN'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----