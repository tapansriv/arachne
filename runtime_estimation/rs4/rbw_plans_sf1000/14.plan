XN Aggregate  (cost=370477442.61..370477442.62 rows=1 width=16)
  ->  XN Subquery Scan x  (cost=149583259.70..370477442.60 rows=3 width=16)
        ->  XN Append  (cost=149583259.70..370477442.57 rows=3 width=12)
              ->  XN Subquery Scan "*SELECT* 1"  (cost=149583259.70..149583259.72 rows=1 width=12)
                    ->  XN Aggregate  (cost=149583259.70..149583259.71 rows=1 width=12)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=1097.53..149454618.15 rows=25728310 width=12)
                                Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                ->  XN Seq Scan on store_sales  (cost=0.00..28799879.68 rows=2748508627 width=16)
                                      Filter: (ss_sold_date_sk IS NOT NULL)
                                ->  XN Hash  (cost=1095.73..1095.73 rows=717 width=4)
                                      ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=717 width=4)
                                            Filter: ((d_year >= 1999) AND (d_year <= 2001))
              ->  XN Subquery Scan "*SELECT* 2"  (cost=118547175.11..118547175.13 rows=1 width=12)
                    ->  XN Aggregate  (cost=118547175.11..118547175.12 rows=1 width=12)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=1097.53..118477359.40 rows=13963142 width=12)
                                Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                                ->  XN Seq Scan on catalog_sales  (cost=0.00..14399804.16 rows=1431746103 width=16)
                                      Filter: (cs_sold_date_sk IS NOT NULL)
                                ->  XN Hash  (cost=1095.73..1095.73 rows=717 width=4)
                                      ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=717 width=4)
                                            Filter: ((d_year >= 1999) AND (d_year <= 2001))
              ->  XN Subquery Scan "*SELECT* 3"  (cost=102347007.70..102347007.72 rows=1 width=12)
                    ->  XN Aggregate  (cost=102347007.70..102347007.71 rows=1 width=12)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=1097.53..102311707.19 rows=7060102 width=12)
                                Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                                ->  XN Seq Scan on web_sales  (cost=0.00..7200003.84 rows=720000384 width=16)
                                ->  XN Hash  (cost=1095.73..1095.73 rows=717 width=4)
                                      ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=717 width=4)
                                            Filter: ((d_year >= 1999) AND (d_year <= 2001))

XN Hash Join DS_BCAST_INNER  (cost=5233.55..72585220241.68 rows=270561462 width=4)
  Hash Cond: (("outer".brand_id = "inner".i_brand_id) AND ("outer".category_id = "inner".i_category_id) AND ("outer".class_id = "inner".i_class_id))
  ->  XN Subquery Scan x  (cost=0.00..72486.15 rows=7248615 width=12)
        ->  XN Hash Intersect Distinct DS_DIST_NONE  (cost=0.00..0.00 rows=7248615 width=12)
              Hash Cond: (("outer".brand_id = "inner".brand_id) AND ("outer".class_id = "inner".class_id) AND ("outer".category_id = "inner".category_id))
              Join Filter: ((("outer".brand_id = "inner".brand_id) OR (("inner".brand_id IS NULL) AND ("outer".brand_id IS NULL))) AND (("outer".class_id = "inner".class_id) OR (("inner".class_id IS NULL) AND ("outer".class_id IS NULL))) AND (("outer".category_id = "inner".category_id) OR (("inner".category_id IS NULL) AND ("outer".category_id IS NULL))))
              ->  XN Network  (cost=0.00..0.00 rows=14335973 width=12)
                    Distribute
                    ->  XN Hash Intersect Distinct DS_DIST_NONE  (cost=0.00..0.00 rows=14335973 width=12)
                          Hash Cond: (("outer".brand_id = "inner".brand_id) AND ("outer".class_id = "inner".class_id) AND ("outer".category_id = "inner".category_id))
                          Join Filter: ((("outer".brand_id = "inner".brand_id) OR (("inner".brand_id IS NULL) AND ("outer".brand_id IS NULL))) AND (("outer".class_id = "inner".class_id) OR (("inner".class_id IS NULL) AND ("outer".class_id IS NULL))) AND (("outer".category_id = "inner".category_id) OR (("inner".category_id IS NULL) AND ("outer".category_id IS NULL))))
                          ->  XN Network  (cost=4847.53..72150565560.80 rows=26415284 width=12)
                                Distribute
                                ->  XN Subquery Scan "*SELECT* 1"  (cost=4847.53..72150565560.80 rows=26415284 width=12)
                                      ->  XN Hash Join DS_BCAST_INNER  (cost=4847.53..72150301407.96 rows=26415284 width=12)
                                            Hash Cond: ("outer".ss_item_sk = "inner".i_item_sk)
                                            ->  XN Hash Join DS_BCAST_INNER  (cost=1097.53..149454618.15 rows=25728310 width=4)
                                                  Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                  ->  XN Seq Scan on store_sales  (cost=0.00..28799879.68 rows=2748508627 width=8)
                                                        Filter: (ss_sold_date_sk IS NOT NULL)
                                                  ->  XN Hash  (cost=1095.73..1095.73 rows=717 width=4)
                                                        ->  XN Seq Scan on date_dim d1  (cost=0.00..1095.73 rows=717 width=4)
                                                              Filter: ((d_year >= 1999) AND (d_year <= 2001))
                                            ->  XN Hash  (cost=3000.00..3000.00 rows=300000 width=16)
                                                  ->  XN Seq Scan on item iss  (cost=0.00..3000.00 rows=300000 width=16)
                          ->  XN Hash  (cost=72119081999.55..72119081999.55 rows=14335973 width=12)
                                ->  XN Network  (cost=4847.53..72119081999.55 rows=14335973 width=12)
                                      Distribute
                                      ->  XN Subquery Scan "*SELECT* 2"  (cost=4847.53..72119081999.55 rows=14335973 width=12)
                                            ->  XN Hash Join DS_BCAST_INNER  (cost=4847.53..72118938639.82 rows=14335973 width=12)
                                                  Hash Cond: ("outer".cs_item_sk = "inner".i_item_sk)
                                                  ->  XN Hash Join DS_BCAST_INNER  (cost=1097.53..118477359.40 rows=13963142 width=4)
                                                        Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                                                        ->  XN Seq Scan on catalog_sales  (cost=0.00..14399804.16 rows=1431746103 width=8)
                                                              Filter: (cs_sold_date_sk IS NOT NULL)
                                                        ->  XN Hash  (cost=1095.73..1095.73 rows=717 width=4)
                                                              ->  XN Seq Scan on date_dim d2  (cost=0.00..1095.73 rows=717 width=4)
                                                                    Filter: ((d_year >= 1999) AND (d_year <= 2001))
                                                  ->  XN Hash  (cost=3000.00..3000.00 rows=300000 width=16)
                                                        ->  XN Seq Scan on item ics  (cost=0.00..3000.00 rows=300000 width=16)
              ->  XN Hash  (cost=72102619281.78..72102619281.78 rows=7248615 width=12)
                    ->  XN Network  (cost=4847.53..72102619281.78 rows=7248615 width=12)
                          Distribute
                          ->  XN Subquery Scan "*SELECT* 3"  (cost=4847.53..72102619281.78 rows=7248615 width=12)
                                ->  XN Hash Join DS_BCAST_INNER  (cost=4847.53..72102546795.63 rows=7248615 width=12)
                                      Hash Cond: ("outer".ws_item_sk = "inner".i_item_sk)
                                      ->  XN Hash Join DS_BCAST_INNER  (cost=1097.53..102311707.19 rows=7060102 width=4)
                                            Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                                            ->  XN Seq Scan on web_sales  (cost=0.00..7200003.84 rows=720000384 width=8)
                                            ->  XN Hash  (cost=1095.73..1095.73 rows=717 width=4)
                                                  ->  XN Seq Scan on date_dim d3  (cost=0.00..1095.73 rows=717 width=4)
                                                        Filter: ((d_year >= 1999) AND (d_year <= 2001))
                                      ->  XN Hash  (cost=3000.00..3000.00 rows=300000 width=16)
                                            ->  XN Seq Scan on item iws  (cost=0.00..3000.00 rows=300000 width=16)
  ->  XN Hash  (cost=3000.00..3000.00 rows=297806 width=16)
        ->  XN Seq Scan on item  (cost=0.00..3000.00 rows=297806 width=16)
              Filter: ((i_brand_id IS NOT NULL) AND (i_category_id IS NOT NULL) AND (i_class_id IS NOT NULL))

XN HashAggregate  (cost=61376237226.46..61376237826.46 rows=1000 width=24)
  Filter: ($0 < sum(((cs_quantity)::double precision * cs_list_price)))
  InitPlan
    ->  XN Seq Scan on volt_tt_619026ce431ae  (cost=0.00..0.01 rows=1 width=8)
  ->  XN Hash IN Join DS_DIST_INNER  (cost=8298.46..61376228838.18 rows=559218 width=24)
        Inner Dist Key: volt_tt_619026ce4a7f3.ss_item_sk
        Hash Cond: ("outer".cs_item_sk = "inner".ss_item_sk)
        ->  XN Hash Join DS_DIST_BOTH  (cost=4845.81..53089846462.12 rows=599832 width=32)
              Outer Dist Key: "outer".cs_item_sk
              Inner Dist Key: item.i_item_sk
              Hash Cond: ("outer".cs_item_sk = "inner".i_item_sk)
              ->  XN Hash Join DS_BCAST_INNER  (cost=1095.81..35903568.58 rows=584232 width=16)
                    Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                    ->  XN Seq Scan on catalog_sales  (cost=0.00..14399804.16 rows=1431746103 width=20)
                          Filter: (cs_sold_date_sk IS NOT NULL)
                    ->  XN Hash  (cost=1095.73..1095.73 rows=30 width=4)
                          ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=30 width=4)
                                Filter: ((2001 = d_year) AND (11 = d_moy))
              ->  XN Hash  (cost=3000.00..3000.00 rows=300000 width=16)
                    ->  XN Seq Scan on item  (cost=0.00..3000.00 rows=300000 width=16)
        ->  XN Hash  (cost=2762.12..2762.12 rows=276212 width=4)
              ->  XN Seq Scan on volt_tt_619026ce4a7f3  (cost=0.00..2762.12 rows=276212 width=4)

XN HashAggregate  (cost=101725671694.51..101725672294.51 rows=1000 width=24)
  Filter: ($0 < sum(((ss_quantity)::double precision * ss_list_price)))
  InitPlan
    ->  XN Seq Scan on volt_tt_619026ce431ae  (cost=0.00..0.01 rows=1 width=8)
  ->  XN Hash Join DS_DIST_OUTER  (cost=37068925475.58..101725656238.39 rows=1030407 width=24)
        Outer Dist Key: "outer".ss_item_sk
        Hash Cond: ("outer".ss_item_sk = "inner".i_item_sk)
        ->  XN Hash Join DS_BCAST_INNER  (cost=1095.81..66768098.32 rows=1076499 width=16)
              Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
              ->  XN Seq Scan on store_sales  (cost=0.00..28799879.68 rows=2748508627 width=20)
                    Filter: (ss_sold_date_sk IS NOT NULL)
              ->  XN Hash  (cost=1095.73..1095.73 rows=30 width=4)
                    ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=30 width=4)
                          Filter: ((2001 = d_year) AND (11 = d_moy))
        ->  XN Hash  (cost=37068923680.55..37068923680.55 rows=279687 width=20)
              ->  XN Hash Join DS_DIST_BOTH  (cost=10896524133.68..37068923680.55 rows=279687 width=20)
                    Outer Dist Key: item.i_item_sk
                    Inner Dist Key: volt_tt_619026ce4a7f3.ss_item_sk
                    Hash Cond: ("outer".i_item_sk = "inner".ss_item_sk)
                    ->  XN Seq Scan on item  (cost=0.00..3000.00 rows=300000 width=16)
                    ->  XN Hash  (cost=3452.65..3452.65 rows=272413 width=4)
                          ->  XN HashAggregate  (cost=3452.65..3452.65 rows=272413 width=4)
                                ->  XN Seq Scan on volt_tt_619026ce4a7f3  (cost=0.00..2762.12 rows=276212 width=4)

XN HashAggregate  (cost=44030313845.84..44030314445.84 rows=1000 width=24)
  Filter: ($0 < sum(((ws_quantity)::double precision * ws_list_price)))
  InitPlan
    ->  XN Seq Scan on volt_tt_619026ce431ae  (cost=0.00..0.01 rows=1 width=8)
  ->  XN Hash Join DS_DIST_INNER  (cost=8298.46..44030309604.50 rows=282755 width=24)
        Inner Dist Key: item.i_item_sk
        Hash Cond: ("outer".ws_item_sk = "inner".i_item_sk)
        ->  XN Hash IN Join DS_DIST_BOTH  (cost=4548.46..26030296830.43 rows=275401 width=20)
              Outer Dist Key: "outer".ws_item_sk
              Inner Dist Key: volt_tt_619026ce4a7f3.ss_item_sk
              Hash Cond: ("outer".ws_item_sk = "inner".ss_item_sk)
              ->  XN Hash Join DS_BCAST_INNER  (cost=1095.81..19804058.47 rows=295402 width=16)
                    Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                    ->  XN Seq Scan on web_sales  (cost=0.00..7200003.84 rows=720000384 width=20)
                    ->  XN Hash  (cost=1095.73..1095.73 rows=30 width=4)
                          ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=30 width=4)
                                Filter: ((2001 = d_year) AND (11 = d_moy))
              ->  XN Hash  (cost=2762.12..2762.12 rows=276212 width=4)
                    ->  XN Seq Scan on volt_tt_619026ce4a7f3  (cost=0.00..2762.12 rows=276212 width=4)
        ->  XN Hash  (cost=3000.00..3000.00 rows=300000 width=16)
              ->  XN Seq Scan on item  (cost=0.00..3000.00 rows=300000 width=16)

XN Subquery Scan z  (cost=5000000007092.81..5000000007094.06 rows=100 width=60)
  ->  XN Limit  (cost=5000000007092.81..5000000007093.06 rows=100 width=60)
        ->  XN Merge  (cost=5000000007092.81..5000000007093.57 rows=304 width=60)
              Merge Key: channel, i_brand_id, i_class_id, i_category_id
              ->  XN Network  (cost=5000000007092.81..5000000007093.57 rows=304 width=60)
                    Send to leader
                    ->  XN Sort  (cost=5000000007092.81..5000000007093.57 rows=304 width=60)
                          Sort Key: channel, i_brand_id, i_class_id, i_category_id
                          ->  XN Unique  (cost=1000000001892.52..4000000007080.27 rows=304 width=60)
                                ->  XN Append  (cost=1000000001892.52..4000000007075.71 rows=304 width=60)
                                      ->  XN Subquery Scan "*SELECT* 1"  (cost=1000000001892.52..1000000001893.77 rows=100 width=60)
                                            ->  XN Limit  (cost=1000000001892.52..1000000001892.77 rows=100 width=60)
                                                  ->  XN Sort  (cost=1000000001892.52..1000000001894.12 rows=639 width=60)
                                                        Sort Key: derived_col1, derived_col2, derived_col3, derived_col4
                                                        ->  XN Unique  (cost=1849.96..1862.74 rows=639 width=60)
                                                              ->  XN HashAggregate  (cost=1849.96..1853.16 rows=639 width=60)
                                                                    ->  XN Subquery Scan y  (cost=531.58..1754.25 rows=6381 width=60)
                                                                          ->  XN Append  (cost=531.58..1690.44 rows=6381 width=39)
                                                                                ->  XN Subquery Scan "*SELECT* 1"  (cost=531.58..563.48 rows=2127 width=37)
                                                                                      ->  XN HashAggregate  (cost=531.58..542.21 rows=2127 width=37)
                                                                                            ->  XN Seq Scan on volt_tt_619026ce5c4c5  (cost=0.00..212.63 rows=21263 width=37)
                                                                                ->  XN Subquery Scan "*SELECT* 2"  (cost=531.58..563.48 rows=2127 width=39)
                                                                                      ->  XN HashAggregate  (cost=531.58..542.21 rows=2127 width=39)
                                                                                            ->  XN Seq Scan on volt_tt_619026ce579d2  (cost=0.00..212.63 rows=21263 width=39)
                                                                                ->  XN Subquery Scan "*SELECT* 3"  (cost=531.58..563.48 rows=2127 width=35)
                                                                                      ->  XN HashAggregate  (cost=531.58..542.21 rows=2127 width=35)
                                                                                            ->  XN Seq Scan on volt_tt_619026ce60fd9  (cost=0.00..212.63 rows=21263 width=35)
                                      ->  XN Subquery Scan "*SELECT* 2"  (cost=1000000001717.10..1000000001718.35 rows=100 width=56)
                                            ->  XN Limit  (cost=1000000001717.10..1000000001717.35 rows=100 width=56)
                                                  ->  XN Sort  (cost=1000000001717.10..1000000001718.69 rows=639 width=56)
                                                        Sort Key: derived_col1, derived_col2, derived_col3, NULL::integer
                                                        ->  XN Unique  (cost=1674.54..1687.32 rows=639 width=56)
                                                              ->  XN HashAggregate  (cost=1674.54..1677.73 rows=639 width=56)
                                                                    ->  XN Subquery Scan y  (cost=478.42..1594.78 rows=6381 width=56)
                                                                          ->  XN Append  (cost=478.42..1530.97 rows=6381 width=35)
                                                                                ->  XN Subquery Scan "*SELECT* 1"  (cost=478.42..510.32 rows=2127 width=33)
                                                                                      ->  XN HashAggregate  (cost=478.42..489.05 rows=2127 width=33)
                                                                                            ->  XN Seq Scan on volt_tt_619026ce5c4c5  (cost=0.00..212.63 rows=21263 width=33)
                                                                                ->  XN Subquery Scan "*SELECT* 2"  (cost=478.42..510.32 rows=2127 width=35)
                                                                                      ->  XN HashAggregate  (cost=478.42..489.05 rows=2127 width=35)
                                                                                            ->  XN Seq Scan on volt_tt_619026ce579d2  (cost=0.00..212.63 rows=21263 width=35)
                                                                                ->  XN Subquery Scan "*SELECT* 3"  (cost=478.42..510.32 rows=2127 width=31)
                                                                                      ->  XN HashAggregate  (cost=478.42..489.05 rows=2127 width=31)
                                                                                            ->  XN Seq Scan on volt_tt_619026ce60fd9  (cost=0.00..212.63 rows=21263 width=31)
                                      ->  XN Subquery Scan "*SELECT* 3"  (cost=1000000001388.88..1000000001390.13 rows=100 width=52)
                                            ->  XN Limit  (cost=1000000001388.88..1000000001389.13 rows=100 width=52)
                                                  ->  XN Sort  (cost=1000000001388.88..1000000001389.57 rows=276 width=52)
                                                        Sort Key: derived_col1, derived_col2, NULL::integer, NULL::integer
                                                        ->  XN Unique  (cost=1372.17..1377.69 rows=276 width=52)
                                                              ->  XN HashAggregate  (cost=1372.17..1373.55 rows=276 width=52)
                                                                    ->  XN Subquery Scan y  (cost=425.26..1344.63 rows=2754 width=52)
                                                                          ->  XN Append  (cost=425.26..1317.09 rows=2754 width=31)
                                                                                ->  XN Subquery Scan "*SELECT* 1"  (cost=425.26..439.03 rows=918 width=29)
                                                                                      ->  XN HashAggregate  (cost=425.26..429.85 rows=918 width=29)
                                                                                            ->  XN Seq Scan on volt_tt_619026ce5c4c5  (cost=0.00..212.63 rows=21263 width=29)
                                                                                ->  XN Subquery Scan "*SELECT* 2"  (cost=425.26..439.03 rows=918 width=31)
                                                                                      ->  XN HashAggregate  (cost=425.26..429.85 rows=918 width=31)
                                                                                            ->  XN Seq Scan on volt_tt_619026ce579d2  (cost=0.00..212.63 rows=21263 width=31)
                                                                                ->  XN Subquery Scan "*SELECT* 3"  (cost=425.26..439.03 rows=918 width=27)
                                                                                      ->  XN HashAggregate  (cost=425.26..429.85 rows=918 width=27)
                                                                                            ->  XN Seq Scan on volt_tt_619026ce60fd9  (cost=0.00..212.63 rows=21263 width=27)
                                      ->  XN Subquery Scan "*SELECT* 4"  (cost=1000000001116.49..1000000001116.53 rows=3 width=48)
                                            ->  XN Limit  (cost=1000000001116.49..1000000001116.50 rows=3 width=48)
                                                  ->  XN Sort  (cost=1000000001116.49..1000000001116.50 rows=3 width=48)
                                                        Sort Key: derived_col1, NULL::integer, NULL::integer, NULL::integer
                                                        ->  XN Unique  (cost=1116.40..1116.47 rows=3 width=48)
                                                              ->  XN HashAggregate  (cost=1116.40..1116.42 rows=3 width=48)
                                                                    ->  XN Subquery Scan y  (cost=372.10..1116.38 rows=3 width=48)
                                                                          ->  XN Append  (cost=372.10..1116.35 rows=3 width=27)
                                                                                ->  XN Subquery Scan "*SELECT* 1"  (cost=372.10..372.12 rows=1 width=25)
                                                                                      ->  XN HashAggregate  (cost=372.10..372.11 rows=1 width=25)
                                                                                            ->  XN Seq Scan on volt_tt_619026ce5c4c5  (cost=0.00..212.63 rows=21263 width=25)
                                                                                ->  XN Subquery Scan "*SELECT* 2"  (cost=372.10..372.12 rows=1 width=27)
                                                                                      ->  XN HashAggregate  (cost=372.10..372.11 rows=1 width=27)
                                                                                            ->  XN Seq Scan on volt_tt_619026ce579d2  (cost=0.00..212.63 rows=21263 width=27)
                                                                                ->  XN Subquery Scan "*SELECT* 3"  (cost=372.10..372.12 rows=1 width=23)
                                                                                      ->  XN HashAggregate  (cost=372.10..372.11 rows=1 width=23)
                                                                                            ->  XN Seq Scan on volt_tt_619026ce60fd9  (cost=0.00..212.63 rows=21263 width=23)
                                      ->  XN Network  (cost=956.93..956.94 rows=1 width=16)
                                            Distribute Round Robin
                                            ->  XN Subquery Scan "*SELECT* 5"  (cost=956.93..956.94 rows=1 width=16)
                                                  ->  XN Aggregate  (cost=956.93..956.93 rows=1 width=16)
                                                        ->  XN Subquery Scan y  (cost=318.95..956.91 rows=3 width=16)
                                                              ->  XN Append  (cost=318.95..956.88 rows=3 width=16)
                                                                    ->  XN Subquery Scan "*SELECT* 1"  (cost=318.95..318.96 rows=1 width=16)
                                                                          ->  XN Aggregate  (cost=318.95..318.95 rows=1 width=16)
                                                                                ->  XN Seq Scan on volt_tt_619026ce5c4c5  (cost=0.00..212.63 rows=21263 width=16)
                                                                    ->  XN Subquery Scan "*SELECT* 2"  (cost=318.95..318.96 rows=1 width=16)
                                                                          ->  XN Aggregate  (cost=318.95..318.95 rows=1 width=16)
                                                                                ->  XN Seq Scan on volt_tt_619026ce579d2  (cost=0.00..212.63 rows=21263 width=16)
                                                                    ->  XN Subquery Scan "*SELECT* 3"  (cost=318.95..318.96 rows=1 width=16)
                                                                          ->  XN Aggregate  (cost=318.95..318.95 rows=1 width=16)
                                                                                ->  XN Seq Scan on volt_tt_619026ce60fd9  (cost=0.00..212.63 rows=21263 width=16)