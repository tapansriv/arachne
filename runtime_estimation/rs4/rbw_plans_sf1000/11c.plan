XN CTE Scan on friend_shortest  (cost=1251235464739623.75..1251235464745036.50 rows=2165053 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..1251235464739623.75 rows=2165053 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..150000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=243126975066.91..1251235464589623.75 rows=2165052 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=243126975066.91..1251235464567973.25 rows=2165052 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=243126975066.91..243220406753.86 rows=7816507095 width=8)
                            ->  XN Hash Join DS_BCAST_INNER  (cost=36884853309.68..118039778423.81 rows=7816507095 width=8)
                                  Hash Cond: ("outer".cs_bill_customer_sk = "inner".c_customer_sk)
                                  ->  XN Nested Loop DS_BCAST_INNER  (cost=36884702541.68..77249327400.07 rows=307841205298 width=8)
                                        Join Filter: (("outer".cs_sales_price < ("inner".cs_sales_price + 5::double precision)) OR ("outer".cs_sales_price > ("inner".cs_sales_price - 5::double precision)))
                                        ->  XN Seq Scan on catalog_sales  (cost=0.00..17999755.20 rows=4671496 width=12)
                                              Filter: (cs_item_sk < 1000)
                                        ->  XN Materialize  (cost=36884702541.68..36884703727.84 rows=118616 width=12)
                                              ->  XN Hash Join DS_BCAST_INNER  (cost=150768.00..36882330103.06 rows=118616 width=12)
                                                    Hash Cond: ("outer".cs_bill_customer_sk = "inner".c_customer_sk)
                                                    ->  XN Seq Scan on catalog_sales  (cost=0.00..17999755.20 rows=4671496 width=12)
                                                          Filter: (cs_item_sk < 1000)
                                                    ->  XN Hash  (cost=150000.00..150000.00 rows=307201 width=4)
                                                          ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=307201 width=4)
                                                                Filter: ((c_birth_country)::text ~~ '%STAN'::text)
                                  ->  XN Hash  (cost=150000.00..150000.00 rows=307201 width=4)
                                        ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=307201 width=4)
                                              Filter: ((c_birth_country)::text ~~ '%STAN'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----