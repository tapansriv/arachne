XN CTE Scan on friend_shortest  (cost=288712254259911744.00..288712254261160768.00 rows=499610904 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..288712254259911744.00 rows=499610904 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..150000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=31173188274500.11..288712254259761728.00 rows=499610903 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=31173188274500.11..288712254254765632.00 rows=499610903 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=31173188274500.11..31194748726484.61 rows=1803750231350 width=8)
                            ->  XN Hash Join DS_BCAST_INNER  (cost=406479931091.85..2307857872997.75 rows=1803750231350 width=8)
                                  Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                  ->  XN Nested Loop DS_BCAST_INNER  (cost=406479757091.85..894879145447.70 rows=2370155342709 width=8)
                                        Join Filter: (("outer".ss_sales_price < ("inner".ss_sales_price + 5::double precision)) OR ("outer".ss_sales_price > ("inner".ss_sales_price - 5::double precision)))
                                        ->  XN Seq Scan on store_sales  (cost=0.00..35999849.60 rows=2367689 width=12)
                                              Filter: (ss_item_sk < 250)
                                        ->  XN Materialize  (cost=406479757091.85..406479775110.60 rows=1801875 width=12)
                                              ->  XN Hash Join DS_DIST_BOTH  (cost=36005768.82..406443717789.97 rows=1801875 width=12)
                                                    Outer Dist Key: public.customer.c_customer_sk
                                                    Inner Dist Key: public.store_sales.ss_customer_sk
                                                    Hash Cond: ("outer".c_customer_sk = "inner".ss_customer_sk)
                                                    ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=9600001 width=4)
                                                          Filter: ((c_first_name)::text ~~ '%ro%'::text)
                                                    ->  XN Hash  (cost=35999849.60..35999849.60 rows=2367689 width=12)
                                                          ->  XN Seq Scan on store_sales  (cost=0.00..35999849.60 rows=2367689 width=12)
                                                                Filter: (ss_item_sk < 250)
                                  ->  XN Hash  (cost=150000.00..150000.00 rows=9600001 width=4)
                                        ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=9600001 width=4)
                                              Filter: ((c_first_name)::text ~~ '%ro%'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----