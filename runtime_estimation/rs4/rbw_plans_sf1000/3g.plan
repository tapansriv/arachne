XN CTE Scan on friend_shortest  (cost=5795784004873.15..5795784004893.06 rows=7962 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..5795784004873.15 rows=7962 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..150000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=1196400250989.68..5795783854873.14 rows=7961 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=1196400250989.68..5795783854793.53 rows=7961 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=1196400250989.68..1196400538376.30 rows=28738662 width=8)
                            ->  XN Hash Join DS_DIST_BOTH  (cost=481964441092.97..1195940403659.02 rows=28738662 width=8)
                                  Outer Dist Key: "inner".ss_item_sk
                                  Inner Dist Key: public.store_sales.ss_item_sk
                                  Hash Cond: ("outer".ss_item_sk = "inner".ss_item_sk)
                                  ->  XN Hash Join DS_DIST_BOTH  (cost=43207435.08..481921226413.33 rows=2897824 width=8)
                                        Outer Dist Key: public.customer.c_customer_sk
                                        Inner Dist Key: public.store_sales.ss_customer_sk
                                        Hash Cond: ("outer".c_customer_sk = "inner".ss_customer_sk)
                                        ->  XN Seq Scan on customer  (cost=0.00..120000.00 rows=12000000 width=4)
                                        ->  XN Hash  (cost=43199819.52..43199819.52 rows=3046226 width=8)
                                              ->  XN Seq Scan on store_sales  (cost=0.00..43199819.52 rows=3046226 width=8)
                                                    Filter: ((ss_item_sk < 5000) AND (ss_sales_price < 200::double precision))
                                  ->  XN Hash  (cost=481921226413.33..481921226413.33 rows=2897824 width=8)
                                        ->  XN Hash Join DS_DIST_BOTH  (cost=43207435.08..481921226413.33 rows=2897824 width=8)
                                              Outer Dist Key: public.customer.c_customer_sk
                                              Inner Dist Key: public.store_sales.ss_customer_sk
                                              Hash Cond: ("outer".c_customer_sk = "inner".ss_customer_sk)
                                              ->  XN Seq Scan on customer  (cost=0.00..120000.00 rows=12000000 width=4)
                                              ->  XN Hash  (cost=43199819.52..43199819.52 rows=3046226 width=8)
                                                    ->  XN Seq Scan on store_sales  (cost=0.00..43199819.52 rows=3046226 width=8)
                                                          Filter: ((ss_item_sk < 5000) AND (ss_sales_price < 200::double precision))
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----