XN CTE Scan on friend_shortest  (cost=18739155659026558976.00..18739155659107627008.00 rows=32427948439 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..18739155659026558976.00 rows=32427948439 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..150000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=1903999010703605.00..18739155659026407424.00 rows=32427948438 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=1903999010703605.00..18739155658702127104.00 rows=32427948438 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=1903999010703605.00..1905398422169124.25 rows=117074946134926 width=8)
                            ->  XN Hash Join DS_BCAST_INNER  (cost=1152328916978.46..30454135594484.13 rows=117074946134926 width=8)
                                  Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                  ->  XN Nested Loop DS_BCAST_INNER  (cost=1152328742978.46..12362970057795.99 rows=153838202087640 width=8)
                                        Join Filter: (("outer".ss_sales_price < ("inner".ss_sales_price + 25::double precision)) OR ("outer".ss_sales_price > ("inner".ss_sales_price - 25::double precision)))
                                        ->  XN Seq Scan on store_sales  (cost=0.00..35999849.60 rows=19075171 width=12)
                                              Filter: (ss_item_sk < 2000)
                                        ->  XN Materialize  (cost=1152328742978.46..1152328888145.58 rows=14516712 width=12)
                                              ->  XN Hash Join DS_BCAST_INNER  (cost=174000.00..1152038394221.75 rows=14516712 width=12)
                                                    Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                                    ->  XN Seq Scan on store_sales  (cost=0.00..35999849.60 rows=19075171 width=12)
                                                          Filter: (ss_item_sk < 2000)
                                                    ->  XN Hash  (cost=150000.00..150000.00 rows=9600001 width=4)
                                                          ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=9600001 width=4)
                                                                Filter: ((c_first_name)::text ~~ '%ro%'::text)
                                  ->  XN Hash  (cost=150000.00..150000.00 rows=9600001 width=4)
                                        ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=9600001 width=4)
                                              Filter: ((c_first_name)::text ~~ '%ro%'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----