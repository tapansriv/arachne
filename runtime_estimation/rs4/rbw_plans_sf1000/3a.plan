XN CTE Scan on friend_shortest  (cost=47210577648340.52..47210577648535.22 rows=77878 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..47210577648340.52 rows=77878 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..150000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=2212779097541.54..47210577498340.52 rows=77877 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=2212779097541.54..47210577497561.74 rows=77877 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=2212779097541.54..2212782458250.40 rows=281157286 width=8)
                            ->  XN Hash Join DS_DIST_BOTH  (cost=741159140332.66..2208279750672.25 rows=281157286 width=8)
                                  Outer Dist Key: "outer".ss_item_sk
                                  Inner Dist Key: public.store_sales.ss_item_sk
                                  Hash Cond: ("outer".ss_item_sk = "inner".ss_item_sk)
                                  ->  XN Hash Join DS_DIST_BOTH  (cost=150000.00..741158967673.01 rows=9063863 width=8)
                                        Outer Dist Key: public.store_sales.ss_customer_sk
                                        Inner Dist Key: public.customer.c_customer_sk
                                        Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                        ->  XN Seq Scan on store_sales  (cost=0.00..35999849.60 rows=9528039 width=8)
                                              Filter: (ss_item_sk < 1000)
                                        ->  XN Hash  (cost=120000.00..120000.00 rows=12000000 width=4)
                                              ->  XN Seq Scan on customer  (cost=0.00..120000.00 rows=12000000 width=4)
                                  ->  XN Hash  (cost=741158967673.01..741158967673.01 rows=9063863 width=8)
                                        ->  XN Hash Join DS_DIST_BOTH  (cost=150000.00..741158967673.01 rows=9063863 width=8)
                                              Outer Dist Key: public.store_sales.ss_customer_sk
                                              Inner Dist Key: public.customer.c_customer_sk
                                              Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                              ->  XN Seq Scan on store_sales  (cost=0.00..35999849.60 rows=9528039 width=8)
                                                    Filter: (ss_item_sk < 1000)
                                              ->  XN Hash  (cost=120000.00..120000.00 rows=12000000 width=4)
                                                    ->  XN Seq Scan on customer  (cost=0.00..120000.00 rows=12000000 width=4)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----