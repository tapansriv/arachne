XN Subquery Scan foo  (cost=3017512529622.17..3017512529623.42 rows=100 width=100)
  ->  XN Limit  (cost=3017512529622.17..3017512529622.42 rows=100 width=54)
        ->  XN Merge  (cost=3017512529622.17..3017512529622.67 rows=201 width=54)
              Merge Key: i_item_id, s_state
              ->  XN Network  (cost=3017512529622.17..3017512529622.67 rows=201 width=54)
                    Send to leader
                    ->  XN Sort  (cost=3017512529622.17..3017512529622.67 rows=201 width=54)
                          Sort Key: i_item_id, s_state
                          ->  XN Append  (cost=1006131323353.39..2017512529614.48 rows=201 width=54)
                                ->  XN Subquery Scan "*SELECT* 1"  (cost=1006131323353.39..1006131323354.64 rows=100 width=54)
                                      ->  XN Limit  (cost=1006131323353.39..1006131323353.64 rows=100 width=54)
                                            ->  XN Sort  (cost=1006131323353.39..1006131323367.43 rows=5618 width=54)
                                                  Sort Key: item.i_item_id, store.s_state
                                                  ->  XN HashAggregate  (cost=6131322947.32..6131323003.50 rows=5618 width=54)
                                                        ->  XN Hash Join DS_BCAST_INNER  (cost=3504756056.86..6131322863.05 rows=5618 width=54)
                                                              Hash Cond: ("outer".i_item_sk = "inner".ss_item_sk)
                                                              ->  XN Seq Scan on item  (cost=0.00..3000.00 rows=300000 width=24)
                                                              ->  XN Hash  (cost=3504756043.18..3504756043.18 rows=5472 width=38)
                                                                    ->  XN Hash Join DS_BCAST_INNER  (cost=34611.33..3504756043.18 rows=5472 width=38)
                                                                          Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                                                          ->  XN Hash Join DS_BCAST_INNER  (cost=34598.71..3497352507.24 rows=154160 width=36)
                                                                                Hash Cond: ("outer".ss_cdemo_sk = "inner".cd_demo_sk)
                                                                                ->  XN Hash Join DS_BCAST_INNER  (cost=913.98..101656109.72 rows=11293695 width=40)
                                                                                      Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                                      ->  XN Seq Scan on store_sales  (cost=0.00..28799879.68 rows=2507390329 width=44)
                                                                                            Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_cdemo_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                                                      ->  XN Hash  (cost=913.11..913.11 rows=345 width=4)
                                                                                            ->  XN Seq Scan on date_dim  (cost=0.00..913.11 rows=345 width=4)
                                                                                                  Filter: (d_year = 2002)
                                                                                ->  XN Hash  (cost=33614.00..33614.00 rows=28296 width=4)
                                                                                      ->  XN Seq Scan on customer_demographics  (cost=0.00..33614.00 rows=28296 width=4)
                                                                                            Filter: (((cd_education_status)::text = 'College'::text) AND ((cd_marital_status)::text = 'S'::text) AND ((cd_gender)::text = 'M'::text))
                                                                          ->  XN Hash  (cost=12.53..12.53 rows=37 width=10)
                                                                                ->  XN Seq Scan on store  (cost=0.00..12.53 rows=37 width=10)
                                                                                      Filter: ((s_state)::text = 'TN'::text)
                                ->  XN Subquery Scan "*SELECT* 2"  (cost=1005690603339.34..1005690603340.59 rows=100 width=48)
                                      ->  XN Limit  (cost=1005690603339.34..1005690603339.59 rows=100 width=48)
                                            ->  XN Sort  (cost=1005690603339.34..1005690603353.39 rows=5618 width=48)
                                                  Sort Key: item.i_item_id
                                                  ->  XN HashAggregate  (cost=5690602933.28..5690602989.46 rows=5618 width=48)
                                                        ->  XN Hash Join DS_BCAST_INNER  (cost=3501796056.86..5690602863.05 rows=5618 width=48)
                                                              Hash Cond: ("outer".i_item_sk = "inner".ss_item_sk)
                                                              ->  XN Seq Scan on item  (cost=0.00..3000.00 rows=300000 width=24)
                                                              ->  XN Hash  (cost=3501796043.18..3501796043.18 rows=5472 width=32)
                                                                    ->  XN Hash Join DS_BCAST_INNER  (cost=34611.33..3501796043.18 rows=5472 width=32)
                                                                          Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                                                          ->  XN Hash Join DS_BCAST_INNER  (cost=34598.71..3497352507.24 rows=154160 width=36)
                                                                                Hash Cond: ("outer".ss_cdemo_sk = "inner".cd_demo_sk)
                                                                                ->  XN Hash Join DS_BCAST_INNER  (cost=913.98..101656109.72 rows=11293695 width=40)
                                                                                      Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                                      ->  XN Seq Scan on store_sales  (cost=0.00..28799879.68 rows=2507390329 width=44)
                                                                                            Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_cdemo_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                                                      ->  XN Hash  (cost=913.11..913.11 rows=345 width=4)
                                                                                            ->  XN Seq Scan on date_dim  (cost=0.00..913.11 rows=345 width=4)
                                                                                                  Filter: (d_year = 2002)
                                                                                ->  XN Hash  (cost=33614.00..33614.00 rows=28296 width=4)
                                                                                      ->  XN Seq Scan on customer_demographics  (cost=0.00..33614.00 rows=28296 width=4)
                                                                                            Filter: (((cd_education_status)::text = 'College'::text) AND ((cd_marital_status)::text = 'S'::text) AND ((cd_gender)::text = 'M'::text))
                                                                          ->  XN Hash  (cost=12.53..12.53 rows=37 width=4)
                                                                                ->  XN Seq Scan on store  (cost=0.00..12.53 rows=37 width=4)
                                                                                      Filter: ((s_state)::text = 'TN'::text)
                                ->  XN Network  (cost=5690602919.24..5690602919.25 rows=1 width=28)
                                      Distribute Round Robin
                                      ->  XN Subquery Scan "*SELECT* 3"  (cost=5690602919.24..5690602919.25 rows=1 width=28)
                                            ->  XN Aggregate  (cost=5690602919.24..5690602919.24 rows=1 width=28)
                                                  ->  XN Hash Join DS_BCAST_INNER  (cost=3501796056.86..5690602863.05 rows=5618 width=28)
                                                        Hash Cond: ("outer".i_item_sk = "inner".ss_item_sk)
                                                        ->  XN Seq Scan on item  (cost=0.00..3000.00 rows=300000 width=4)
                                                        ->  XN Hash  (cost=3501796043.18..3501796043.18 rows=5472 width=32)
                                                              ->  XN Hash Join DS_BCAST_INNER  (cost=34611.33..3501796043.18 rows=5472 width=32)
                                                                    Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                                                    ->  XN Hash Join DS_BCAST_INNER  (cost=34598.71..3497352507.24 rows=154160 width=36)
                                                                          Hash Cond: ("outer".ss_cdemo_sk = "inner".cd_demo_sk)
                                                                          ->  XN Hash Join DS_BCAST_INNER  (cost=913.98..101656109.72 rows=11293695 width=40)
                                                                                Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                                ->  XN Seq Scan on store_sales  (cost=0.00..28799879.68 rows=2507390329 width=44)
                                                                                      Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_cdemo_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                                                ->  XN Hash  (cost=913.11..913.11 rows=345 width=4)
                                                                                      ->  XN Seq Scan on date_dim  (cost=0.00..913.11 rows=345 width=4)
                                                                                            Filter: (d_year = 2002)
                                                                          ->  XN Hash  (cost=33614.00..33614.00 rows=28296 width=4)
                                                                                ->  XN Seq Scan on customer_demographics  (cost=0.00..33614.00 rows=28296 width=4)
                                                                                      Filter: (((cd_education_status)::text = 'College'::text) AND ((cd_marital_status)::text = 'S'::text) AND ((cd_gender)::text = 'M'::text))
                                                                    ->  XN Hash  (cost=12.53..12.53 rows=37 width=4)
                                                                          ->  XN Seq Scan on store  (cost=0.00..12.53 rows=37 width=4)
                                                                                Filter: ((s_state)::text = 'TN'::text)