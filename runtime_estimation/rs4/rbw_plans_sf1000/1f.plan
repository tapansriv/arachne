XN CTE Scan on friend_shortest  (cost=2598762746804.78..2598762746812.82 rows=3215 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..2598762746804.78 rows=3215 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..150000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=741724302244.26..2598762596804.77 rows=3214 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=741724302244.26..2598762596772.63 rows=3214 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=741724302244.26..741724418278.93 rows=11603467 width=8)
                            ->  XN Hash Join DS_DIST_BOTH  (cost=297092501711.49..741538635168.80 rows=11603467 width=8)
                                  Outer Dist Key: "inner".cs_item_sk
                                  Inner Dist Key: public.catalog_sales.cs_item_sk
                                  Hash Cond: ("outer".cs_item_sk = "inner".cs_item_sk)
                                  ->  XN Hash Join DS_BCAST_INNER  (cost=21604347.41..297070892760.75 rows=1841334 width=8)
                                        Hash Cond: ("outer".c_customer_sk = "inner".cs_bill_customer_sk)
                                        ->  XN Seq Scan on customer  (cost=0.00..120000.00 rows=12000000 width=4)
                                        ->  XN Hash  (cost=21599706.24..21599706.24 rows=1856467 width=8)
                                              ->  XN Seq Scan on catalog_sales  (cost=0.00..21599706.24 rows=1856467 width=8)
                                                    Filter: ((cs_item_sk < 6000) AND (cs_sales_price < 250::double precision))
                                  ->  XN Hash  (cost=297070892760.75..297070892760.75 rows=1841334 width=8)
                                        ->  XN Hash Join DS_BCAST_INNER  (cost=21604347.41..297070892760.75 rows=1841334 width=8)
                                              Hash Cond: ("outer".c_customer_sk = "inner".cs_bill_customer_sk)
                                              ->  XN Seq Scan on customer  (cost=0.00..120000.00 rows=12000000 width=4)
                                              ->  XN Hash  (cost=21599706.24..21599706.24 rows=1856467 width=8)
                                                    ->  XN Seq Scan on catalog_sales  (cost=0.00..21599706.24 rows=1856467 width=8)
                                                          Filter: ((cs_item_sk < 6000) AND (cs_sales_price < 250::double precision))
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----