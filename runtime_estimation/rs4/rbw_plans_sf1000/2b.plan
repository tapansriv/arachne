XN CTE Scan on friend_shortest  (cost=330011208474.77..330011208475.67 rows=360 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..330011208474.77 rows=360 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..150000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=122955861079.72..330011058474.76 rows=359 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=122955861079.72..330011058471.17 rows=359 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=122955861079.72..122955874017.30 rows=1293758 width=8)
                            ->  XN Hash Join DS_DIST_BOTH  (cost=36873730452.01..122935159657.96 rows=1293758 width=8)
                                  Outer Dist Key: "outer".ws_item_sk
                                  Inner Dist Key: public.web_sales.ws_item_sk
                                  Hash Cond: ("outer".ws_item_sk = "inner".ws_item_sk)
                                  ->  XN Hash Join DS_BCAST_INNER  (cost=150768.00..36873578146.89 rows=614845 width=8)
                                        Hash Cond: ("outer".ws_bill_customer_sk = "inner".c_customer_sk)
                                        ->  XN Seq Scan on web_sales  (cost=0.00..9000004.80 rows=24098051 width=8)
                                              Filter: (ws_item_sk < 10000)
                                        ->  XN Hash  (cost=150000.00..150000.00 rows=307201 width=4)
                                              ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=307201 width=4)
                                                    Filter: ((c_birth_country)::text ~~ '%STAN'::text)
                                  ->  XN Hash  (cost=36873578146.89..36873578146.89 rows=614845 width=8)
                                        ->  XN Hash Join DS_BCAST_INNER  (cost=150768.00..36873578146.89 rows=614845 width=8)
                                              Hash Cond: ("outer".ws_bill_customer_sk = "inner".c_customer_sk)
                                              ->  XN Seq Scan on web_sales  (cost=0.00..9000004.80 rows=24098051 width=8)
                                                    Filter: (ws_item_sk < 10000)
                                              ->  XN Hash  (cost=150000.00..150000.00 rows=307201 width=4)
                                                    ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=307201 width=4)
                                                          Filter: ((c_birth_country)::text ~~ '%STAN'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----