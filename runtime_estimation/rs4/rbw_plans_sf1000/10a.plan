XN CTE Scan on friend_shortest  (cost=768312890546708.12..768312890550031.00 rows=1329172 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..768312890546708.12 rows=1329172 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..150000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=302540051437.82..768312890396708.12 rows=1329171 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=302540051437.82..768312890383416.38 rows=1329171 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=302540051437.82..302597411104.06 rows=4798717124 width=8)
                            ->  XN Hash Join DS_BCAST_INNER  (cost=87209708960.66..225746406241.70 rows=4798717124 width=8)
                                  Hash Cond: ("outer".cs_bill_customer_sk = "inner".c_customer_sk)
                                  ->  XN Nested Loop DS_BCAST_INNER  (cost=87209556546.39..109062044363.89 rows=60120149434 width=8)
                                        Join Filter: (("outer".cs_sales_price < ("inner".cs_sales_price + 5::double precision)) OR ("outer".cs_sales_price > ("inner".cs_sales_price - 5::double precision)))
                                        ->  XN Seq Scan on catalog_sales  (cost=0.00..17999755.20 rows=1164367 width=12)
                                              Filter: (cs_item_sk < 250)
                                        ->  XN Materialize  (cost=87209556546.39..87209557475.79 rows=92940 width=12)
                                              ->  XN Hash Join DS_DIST_BOTH  (cost=152414.27..87207697653.45 rows=92940 width=12)
                                                    Outer Dist Key: public.catalog_sales.cs_bill_customer_sk
                                                    Inner Dist Key: public.customer.c_customer_sk
                                                    Hash Cond: ("outer".cs_bill_customer_sk = "inner".c_customer_sk)
                                                    ->  XN Seq Scan on catalog_sales  (cost=0.00..17999755.20 rows=1164367 width=12)
                                                          Filter: (cs_item_sk < 250)
                                                    ->  XN Hash  (cost=150000.00..150000.00 rows=965706 width=4)
                                                          ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=965706 width=4)
                                                                Filter: ((c_last_name)::text ~~ 'M%'::text)
                                  ->  XN Hash  (cost=150000.00..150000.00 rows=965706 width=4)
                                        ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=965706 width=4)
                                              Filter: ((c_last_name)::text ~~ 'M%'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----