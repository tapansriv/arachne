XN CTE Scan on friend_shortest  (cost=2288144235957.58..2288144235965.83 rows=3302 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..2288144235957.58 rows=3302 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..150000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=381274575301.13..2288144085957.57 rows=3301 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=381274575301.13..2288144085924.56 rows=3301 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=381274575301.13..381274694449.44 rows=11914831 width=8)
                            ->  XN Hash Join DS_DIST_BOTH  (cost=115903340109.48..381083926090.30 rows=11914831 width=8)
                                  Outer Dist Key: "outer".cs_item_sk
                                  Inner Dist Key: public.catalog_sales.cs_item_sk
                                  Hash Cond: ("outer".cs_item_sk = "inner".cs_item_sk)
                                  ->  XN Hash Join DS_BCAST_INNER  (cost=152414.27..115903183030.52 rows=1865876 width=8)
                                        Hash Cond: ("outer".cs_bill_customer_sk = "inner".c_customer_sk)
                                        ->  XN Seq Scan on catalog_sales  (cost=0.00..17999755.20 rows=23376184 width=8)
                                              Filter: (cs_item_sk < 5000)
                                        ->  XN Hash  (cost=150000.00..150000.00 rows=965706 width=4)
                                              ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=965706 width=4)
                                                    Filter: ((c_last_name)::text ~~ 'M%'::text)
                                  ->  XN Hash  (cost=115903183030.52..115903183030.52 rows=1865876 width=8)
                                        ->  XN Hash Join DS_BCAST_INNER  (cost=152414.27..115903183030.52 rows=1865876 width=8)
                                              Hash Cond: ("outer".cs_bill_customer_sk = "inner".c_customer_sk)
                                              ->  XN Seq Scan on catalog_sales  (cost=0.00..17999755.20 rows=23376184 width=8)
                                                    Filter: (cs_item_sk < 5000)
                                              ->  XN Hash  (cost=150000.00..150000.00 rows=965706 width=4)
                                                    ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=965706 width=4)
                                                          Filter: ((c_last_name)::text ~~ 'M%'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----