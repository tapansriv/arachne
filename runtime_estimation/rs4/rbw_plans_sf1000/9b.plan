XN CTE Scan on friend_shortest  (cost=304837810502558016.00..304837810503876800.00 rows=527516062 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..304837810502558016.00 rows=527516062 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..150000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=32799300483317.28..304837810502408000.00 rows=527516061 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=32799300483317.28..304837810497132864.00 rows=527516061 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=32799300483317.28..32822065168084.37 rows=1904496503309 width=8)
                            ->  XN Hash Join DS_BCAST_INNER  (cost=404737454196.56..2321732214135.97 rows=1904496503309 width=8)
                                  Hash Cond: ("outer".cs_bill_customer_sk = "inner".c_customer_sk)
                                  ->  XN Nested Loop DS_BCAST_INNER  (cost=404737280196.56..904667778417.97 rows=2400187008845 width=8)
                                        Join Filter: (("outer".cs_sales_price < ("inner".cs_sales_price + 5::double precision)) OR ("outer".cs_sales_price > ("inner".cs_sales_price - 5::double precision)))
                                        ->  XN Seq Scan on catalog_sales  (cost=0.00..17999755.20 rows=2333410 width=12)
                                              Filter: (cs_item_sk < 500)
                                        ->  XN Materialize  (cost=404737280196.56..404737298711.68 rows=1851512 width=12)
                                              ->  XN Hash Join DS_DIST_BOTH  (cost=18005588.72..404700248105.05 rows=1851512 width=12)
                                                    Outer Dist Key: public.customer.c_customer_sk
                                                    Inner Dist Key: public.catalog_sales.cs_bill_customer_sk
                                                    Hash Cond: ("outer".c_customer_sk = "inner".cs_bill_customer_sk)
                                                    ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=9600001 width=4)
                                                          Filter: ((c_first_name)::text ~~ '%ro%'::text)
                                                    ->  XN Hash  (cost=17999755.20..17999755.20 rows=2333410 width=12)
                                                          ->  XN Seq Scan on catalog_sales  (cost=0.00..17999755.20 rows=2333410 width=12)
                                                                Filter: (cs_item_sk < 500)
                                  ->  XN Hash  (cost=150000.00..150000.00 rows=9600001 width=4)
                                        ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=9600001 width=4)
                                              Filter: ((c_first_name)::text ~~ '%ro%'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----