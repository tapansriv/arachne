XN CTE Scan on friend_shortest  (cost=581643976297.85..581643976299.11 rows=506 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..581643976297.85 rows=506 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..150000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=290230181883.11..581643826297.84 rows=505 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=290230181883.11..581643826292.79 rows=505 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=290230181883.11..290230200091.72 rows=1820861 width=8)
                            ->  XN Hash Join DS_DIST_BOTH  (cost=115921152896.35..290201046286.25 rows=1820861 width=8)
                                  Outer Dist Key: "outer".ss_item_sk
                                  Inner Dist Key: public.store_sales.ss_item_sk
                                  Hash Cond: ("outer".ss_item_sk = "inner".ss_item_sk)
                                  ->  XN Hash Join DS_BCAST_INNER  (cost=152414.27..115920998658.54 rows=729419 width=8)
                                        Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                        ->  XN Seq Scan on store_sales  (cost=0.00..35999849.60 rows=9528039 width=8)
                                              Filter: (ss_item_sk < 1000)
                                        ->  XN Hash  (cost=150000.00..150000.00 rows=965706 width=4)
                                              ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=965706 width=4)
                                                    Filter: ((c_last_name)::text ~~ 'M%'::text)
                                  ->  XN Hash  (cost=115920998658.54..115920998658.54 rows=729419 width=8)
                                        ->  XN Hash Join DS_BCAST_INNER  (cost=152414.27..115920998658.54 rows=729419 width=8)
                                              Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                              ->  XN Seq Scan on store_sales  (cost=0.00..35999849.60 rows=9528039 width=8)
                                                    Filter: (ss_item_sk < 1000)
                                              ->  XN Hash  (cost=150000.00..150000.00 rows=965706 width=4)
                                                    ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=965706 width=4)
                                                          Filter: ((c_last_name)::text ~~ 'M%'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----