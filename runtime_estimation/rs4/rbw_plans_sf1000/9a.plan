XN CTE Scan on friend_shortest  (cost=75905411098407504.00..75905411098735888.00 rows=131350993 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..75905411098407504.00 rows=131350993 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..150000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=9256878745560.98..75905411098257504.00 rows=131350992 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=9256878745560.98..75905411096944000.00 rows=131350992 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=9256878745560.98..9262547130142.26 rows=474217795028 width=8)
                            ->  XN Hash Join DS_BCAST_INNER  (cost=232921758850.23..1667993600686.96 rows=474217795028 width=8)
                                  Hash Cond: ("outer".cs_bill_customer_sk = "inner".c_customer_sk)
                                  ->  XN Nested Loop DS_BCAST_INNER  (cost=232921584850.23..449992579686.81 rows=597644353149 width=8)
                                        Join Filter: (("outer".cs_sales_price < ("inner".cs_sales_price + 5::double precision)) OR ("outer".cs_sales_price > ("inner".cs_sales_price - 5::double precision)))
                                        ->  XN Seq Scan on catalog_sales  (cost=0.00..17999755.20 rows=1164367 width=12)
                                              Filter: (cs_item_sk < 250)
                                        ->  XN Materialize  (cost=232921584850.23..232921594089.24 rows=923901 width=12)
                                              ->  XN Hash Join DS_BCAST_INNER  (cost=18002666.12..232903105906.33 rows=923901 width=12)
                                                    Hash Cond: ("outer".c_customer_sk = "inner".cs_bill_customer_sk)
                                                    ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=9600001 width=4)
                                                          Filter: ((c_first_name)::text ~~ '%ro%'::text)
                                                    ->  XN Hash  (cost=17999755.20..17999755.20 rows=1164367 width=12)
                                                          ->  XN Seq Scan on catalog_sales  (cost=0.00..17999755.20 rows=1164367 width=12)
                                                                Filter: (cs_item_sk < 250)
                                  ->  XN Hash  (cost=150000.00..150000.00 rows=9600001 width=4)
                                        ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=9600001 width=4)
                                              Filter: ((c_first_name)::text ~~ '%ro%'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----