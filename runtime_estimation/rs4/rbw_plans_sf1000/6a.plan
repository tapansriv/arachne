XN CTE Scan on friend_shortest  (cost=13224774050532.16..13224774050583.04 rows=20352 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..13224774050532.16 rows=20352 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..150000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=1465861192929.83..13224773900532.15 rows=20351 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=1465861192929.83..13224773900328.64 rows=20351 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=1465861192929.83..1465862071157.55 rows=73472572 width=8)
                            ->  XN Hash Join DS_DIST_BOTH  (cost=546910470785.58..1464685414803.26 rows=73472572 width=8)
                                  Outer Dist Key: "inner".cs_item_sk
                                  Inner Dist Key: public.catalog_sales.cs_item_sk
                                  Hash Cond: ("outer".cs_item_sk = "inner".cs_item_sk)
                                  ->  XN Hash Join DS_DIST_BOTH  (cost=18011433.94..546892447768.10 rows=4633416 width=8)
                                        Outer Dist Key: public.customer.c_customer_sk
                                        Inner Dist Key: public.catalog_sales.cs_bill_customer_sk
                                        Hash Cond: ("outer".c_customer_sk = "inner".cs_bill_customer_sk)
                                        ->  XN Seq Scan on customer  (cost=0.00..120000.00 rows=12000000 width=4)
                                        ->  XN Hash  (cost=17999755.20..17999755.20 rows=4671496 width=8)
                                              ->  XN Seq Scan on catalog_sales  (cost=0.00..17999755.20 rows=4671496 width=8)
                                                    Filter: (cs_item_sk < 1000)
                                  ->  XN Hash  (cost=546892447768.10..546892447768.10 rows=4633416 width=8)
                                        ->  XN Hash Join DS_DIST_BOTH  (cost=18011433.94..546892447768.10 rows=4633416 width=8)
                                              Outer Dist Key: public.customer.c_customer_sk
                                              Inner Dist Key: public.catalog_sales.cs_bill_customer_sk
                                              Hash Cond: ("outer".c_customer_sk = "inner".cs_bill_customer_sk)
                                              ->  XN Seq Scan on customer  (cost=0.00..120000.00 rows=12000000 width=4)
                                              ->  XN Hash  (cost=17999755.20..17999755.20 rows=4671496 width=8)
                                                    ->  XN Seq Scan on catalog_sales  (cost=0.00..17999755.20 rows=4671496 width=8)
                                                          Filter: (cs_item_sk < 1000)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----