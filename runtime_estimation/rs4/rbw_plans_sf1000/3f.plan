XN CTE Scan on friend_shortest  (cost=51312672932742.62..51312672932954.84 rows=84888 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..51312672932742.62 rows=84888 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..150000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=2264396455291.50..51312672782742.61 rows=84887 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=2264396455291.50..51312672781893.74 rows=84887 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=2264396455291.50..2264400118514.16 rows=306465666 width=8)
                            ->  XN Hash Join DS_DIST_BOTH  (cost=750992672376.98..2259492099603.83 rows=306465666 width=8)
                                  Outer Dist Key: "outer".ss_item_sk
                                  Inner Dist Key: public.store_sales.ss_item_sk
                                  Hash Cond: ("outer".ss_item_sk = "inner".ss_item_sk)
                                  ->  XN Hash Join DS_BCAST_INNER  (cost=165644.89..750992483074.55 rows=9463016 width=8)
                                        Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                        ->  XN Seq Scan on store_sales  (cost=0.00..35999849.60 rows=19075171 width=8)
                                              Filter: (ss_item_sk < 2000)
                                        ->  XN Hash  (cost=150000.00..150000.00 rows=6257957 width=4)
                                              ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=6257957 width=4)
                                                    Filter: ((c_salutation)::text ~~ 'M%s%'::text)
                                  ->  XN Hash  (cost=750992483074.55..750992483074.55 rows=9463016 width=8)
                                        ->  XN Hash Join DS_BCAST_INNER  (cost=165644.89..750992483074.55 rows=9463016 width=8)
                                              Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                              ->  XN Seq Scan on store_sales  (cost=0.00..35999849.60 rows=19075171 width=8)
                                                    Filter: (ss_item_sk < 2000)
                                              ->  XN Hash  (cost=150000.00..150000.00 rows=6257957 width=4)
                                                    ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=6257957 width=4)
                                                          Filter: ((c_salutation)::text ~~ 'M%s%'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----