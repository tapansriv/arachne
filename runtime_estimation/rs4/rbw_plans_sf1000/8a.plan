XN CTE Scan on friend_shortest  (cost=45084302625341920.00..45084302625536960.00 rows=78015459 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..45084302625341920.00 rows=78015459 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..150000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=6049769395067.28..45084302625191920.00 rows=78015458 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=6049769395067.28..45084302624411768.00 rows=78015458 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=6049769395067.28..6053136112078.12 rows=281659985184 width=8)
                            ->  XN Hash Join DS_BCAST_INNER  (cost=187197438643.39..1542377854979.10 rows=281659985184 width=8)
                                  Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                  ->  XN Nested Loop DS_BCAST_INNER  (cost=187197264643.39..349625156456.38 rows=370105406772 width=8)
                                        Join Filter: (("outer".ss_sales_price < ("inner".ss_sales_price + 5::double precision)) OR ("outer".ss_sales_price > ("inner".ss_sales_price - 5::double precision)))
                                        ->  XN Seq Scan on store_sales  (cost=0.00..35999849.60 rows=935619 width=12)
                                              Filter: (ss_item_sk < 100)
                                        ->  XN Materialize  (cost=187197264643.39..187197271763.70 rows=712031 width=12)
                                              ->  XN Hash Join DS_BCAST_INNER  (cost=36002188.65..187183023311.36 rows=712031 width=12)
                                                    Hash Cond: ("outer".c_customer_sk = "inner".ss_customer_sk)
                                                    ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=9600001 width=4)
                                                          Filter: ((c_first_name)::text ~~ '%ro%'::text)
                                                    ->  XN Hash  (cost=35999849.60..35999849.60 rows=935619 width=12)
                                                          ->  XN Seq Scan on store_sales  (cost=0.00..35999849.60 rows=935619 width=12)
                                                                Filter: (ss_item_sk < 100)
                                  ->  XN Hash  (cost=150000.00..150000.00 rows=9600001 width=4)
                                        ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=9600001 width=4)
                                              Filter: ((c_first_name)::text ~~ '%ro%'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----