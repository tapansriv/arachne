XN CTE Scan on friend_shortest  (cost=165752760938.37..165752760938.58 rows=83 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..165752760938.37 rows=83 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..150000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=118434209156.60..165752610938.36 rows=82 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=118434209156.60..165752610937.54 rows=82 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=118434209156.60..118434212113.23 rows=295663 width=8)
                            ->  XN Hash Join DS_DIST_BOTH  (cost=47472154568.24..118429478252.93 rows=295663 width=8)
                                  Outer Dist Key: "inner".cs_item_sk
                                  Inner Dist Key: public.catalog_sales.cs_item_sk
                                  Hash Cond: ("outer".cs_item_sk = "inner".cs_item_sk)
                                  ->  XN Hash Join DS_BCAST_INNER  (cost=21600447.09..47450553386.34 rows=293925 width=8)
                                        Hash Cond: ("outer".c_customer_sk = "inner".cs_bill_customer_sk)
                                        ->  XN Seq Scan on customer  (cost=0.00..120000.00 rows=12000000 width=4)
                                        ->  XN Hash  (cost=21599706.24..21599706.24 rows=296340 width=8)
                                              ->  XN Seq Scan on catalog_sales  (cost=0.00..21599706.24 rows=296340 width=8)
                                                    Filter: ((cs_item_sk < 2000) AND (cs_sales_price < 100::double precision))
                                  ->  XN Hash  (cost=47450553386.34..47450553386.34 rows=293925 width=8)
                                        ->  XN Hash Join DS_BCAST_INNER  (cost=21600447.09..47450553386.34 rows=293925 width=8)
                                              Hash Cond: ("outer".c_customer_sk = "inner".cs_bill_customer_sk)
                                              ->  XN Seq Scan on customer  (cost=0.00..120000.00 rows=12000000 width=4)
                                              ->  XN Hash  (cost=21599706.24..21599706.24 rows=296340 width=8)
                                                    ->  XN Seq Scan on catalog_sales  (cost=0.00..21599706.24 rows=296340 width=8)
                                                          Filter: ((cs_item_sk < 2000) AND (cs_sales_price < 100::double precision))
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----