XN CTE Scan on friend_shortest  (cost=192251580207924.78..192251580208740.12 rows=326136 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..192251580207924.78 rows=326136 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..150000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=3807502044401.90..192251580057924.78 rows=326135 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=3807502044401.90..192251580054663.44 rows=326135 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=3807502044401.90..3807516118547.30 rows=1177444840 width=8)
                            ->  XN Hash Join DS_DIST_BOTH  (cost=1152021095670.38..3788659449820.06 rows=1177444840 width=8)
                                  Outer Dist Key: "outer".cs_item_sk
                                  Inner Dist Key: public.catalog_sales.cs_item_sk
                                  Hash Cond: ("outer".cs_item_sk = "inner".cs_item_sk)
                                  ->  XN Hash Join DS_BCAST_INNER  (cost=174000.00..1152020875299.11 rows=18548505 width=8)
                                        Hash Cond: ("outer".cs_bill_customer_sk = "inner".c_customer_sk)
                                        ->  XN Seq Scan on catalog_sales  (cost=0.00..17999755.20 rows=23376184 width=8)
                                              Filter: (cs_item_sk < 5000)
                                        ->  XN Hash  (cost=150000.00..150000.00 rows=9600001 width=4)
                                              ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=9600001 width=4)
                                                    Filter: ((c_first_name)::text ~~ '%ro%'::text)
                                  ->  XN Hash  (cost=1152020875299.11..1152020875299.11 rows=18548505 width=8)
                                        ->  XN Hash Join DS_BCAST_INNER  (cost=174000.00..1152020875299.11 rows=18548505 width=8)
                                              Hash Cond: ("outer".cs_bill_customer_sk = "inner".c_customer_sk)
                                              ->  XN Seq Scan on catalog_sales  (cost=0.00..17999755.20 rows=23376184 width=8)
                                                    Filter: (cs_item_sk < 5000)
                                              ->  XN Hash  (cost=150000.00..150000.00 rows=9600001 width=4)
                                                    ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=9600001 width=4)
                                                          Filter: ((c_first_name)::text ~~ '%ro%'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----