XN CTE Scan on friend_shortest  (cost=189627011124626656.00..189627011125447008.00 rows=328145746 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..189627011124626656.00 rows=328145746 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..150000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=20523707571978.38..189627011124476640.00 rows=328145745 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=20523707571978.38..189627011121195168.00 rows=328145745 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=20523707571978.38..20537868533108.24 rows=1184707859186 width=8)
                            ->  XN Hash Join DS_BCAST_INNER  (cost=115950485181.07..1564883234605.20 rows=1184707859186 width=8)
                                  Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                  ->  XN Nested Loop DS_BCAST_INNER  (cost=115950332766.80..1243710498955.40 rows=15475262339612 width=8)
                                        Join Filter: (("outer".ss_sales_price < ("inner".ss_sales_price + 5::double precision)) OR ("outer".ss_sales_price > ("inner".ss_sales_price - 5::double precision)))
                                        ->  XN Seq Scan on store_sales  (cost=0.00..35999849.60 rows=19075171 width=12)
                                              Filter: (ss_item_sk < 2000)
                                        ->  XN Materialize  (cost=115950332766.80..115950347369.80 rows=1460300 width=12)
                                              ->  XN Hash Join DS_BCAST_INNER  (cost=152414.27..115921125306.50 rows=1460300 width=12)
                                                    Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                                    ->  XN Seq Scan on store_sales  (cost=0.00..35999849.60 rows=19075171 width=12)
                                                          Filter: (ss_item_sk < 2000)
                                                    ->  XN Hash  (cost=150000.00..150000.00 rows=965706 width=4)
                                                          ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=965706 width=4)
                                                                Filter: ((c_last_name)::text ~~ 'M%'::text)
                                  ->  XN Hash  (cost=150000.00..150000.00 rows=965706 width=4)
                                        ->  XN Seq Scan on customer  (cost=0.00..150000.00 rows=965706 width=4)
                                              Filter: ((c_last_name)::text ~~ 'M%'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----