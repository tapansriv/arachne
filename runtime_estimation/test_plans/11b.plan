XN CTE Scan on friend_shortest  (cost=6395640643163.81..6395640643325.75 rows=64776 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..6395640643163.81 rows=64776 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..25000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=14731662581.38..6395640618163.80 rows=64775 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=14731662581.38..6395640617516.05 rows=64775 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=14731662581.38..14732061284.34 rows=39870296 width=8)
                            ->  XN Hash Join DS_BCAST_INNER  (cost=6146144019.27..14093697975.08 rows=39870296 width=8)
                                  Hash Cond: ("outer".cs_bill_customer_sk = "inner".c_customer_sk)
                                  ->  XN Nested Loop DS_BCAST_INNER  (cost=6146118891.27..7929072304.20 rows=1606545360 width=8)
                                        Join Filter: (("outer".cs_sales_price < ("inner".cs_sales_price + 5::double precision)) OR ("outer".cs_sales_price > ("inner".cs_sales_price - 5::double precision)))
                                        ->  XN Seq Scan on catalog_sales  (cost=0.00..1799963.40 rows=341334 width=12)
                                              Filter: (cs_item_sk < 500)
                                        ->  XN Materialize  (cost=6146118891.27..6146118975.99 rows=8472 width=12)
                                              ->  XN Hash Join DS_BCAST_INNER  (cost=25128.00..6145949442.80 rows=8472 width=12)
                                                    Hash Cond: ("outer".cs_bill_customer_sk = "inner".c_customer_sk)
                                                    ->  XN Seq Scan on catalog_sales  (cost=0.00..1799963.40 rows=341334 width=12)
                                                          Filter: (cs_item_sk < 500)
                                                    ->  XN Hash  (cost=25000.00..25000.00 rows=51201 width=4)
                                                          ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=51201 width=4)
                                                                Filter: ((c_birth_country)::text ~~ '%STAN'::text)
                                  ->  XN Hash  (cost=25000.00..25000.00 rows=51201 width=4)
                                        ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=51201 width=4)
                                              Filter: ((c_birth_country)::text ~~ '%STAN'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----