XN CTE Scan on friend_shortest  (cost=16347155922470.90..16347155922884.63 rows=165493 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..16347155922470.90 rows=165493 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..25000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=44276320108.91..16347155897470.89 rows=165492 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=44276320108.91..16347155895815.97 rows=165492 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=44276320108.91..44277537706.83 rows=101864392 width=8)
                            ->  XN Hash Join DS_BCAST_INNER  (cost=19926563865.59..42646189018.52 rows=101864392 width=8)
                                  Hash Cond: ("outer".cs_bill_customer_sk = "inner".c_customer_sk)
                                  ->  XN Nested Loop DS_BCAST_INNER  (cost=19926538450.49..22704884173.99 rows=1265662225 width=8)
                                        Join Filter: (("outer".cs_sales_price < ("inner".cs_sales_price + 5::double precision)) OR ("outer".cs_sales_price > ("inner".cs_sales_price - 5::double precision)))
                                        ->  XN Seq Scan on catalog_sales  (cost=0.00..1799963.40 rows=168244 width=12)
                                              Filter: (cs_item_sk < 250)
                                        ->  XN Materialize  (cost=19926538450.49..19926538585.90 rows=13541 width=12)
                                              ->  XN Hash Join DS_BCAST_INNER  (cost=25415.09..19926267616.95 rows=13541 width=12)
                                                    Hash Cond: ("outer".cs_bill_customer_sk = "inner".c_customer_sk)
                                                    ->  XN Seq Scan on catalog_sales  (cost=0.00..1799963.40 rows=168244 width=12)
                                                          Filter: (cs_item_sk < 250)
                                                    ->  XN Hash  (cost=25000.00..25000.00 rows=166037 width=4)
                                                          ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=166037 width=4)
                                                                Filter: ((c_last_name)::text ~~ 'M%'::text)
                                  ->  XN Hash  (cost=25000.00..25000.00 rows=166037 width=4)
                                        ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=166037 width=4)
                                              Filter: ((c_last_name)::text ~~ 'M%'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----