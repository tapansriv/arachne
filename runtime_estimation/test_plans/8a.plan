XN CTE Scan on friend_shortest  (cost=595945526806455.12..595945526821571.50 rows=6046529 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..595945526806455.12 rows=6046529 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..25000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=290319341936.09..595945526781455.12 rows=6046528 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=290319341936.09..595945526720989.88 rows=6046528 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=290319341936.09..290363829076.07 rows=3721799898 width=8)
                            ->  XN Hash Join DS_BCAST_INNER  (cost=21970353529.23..230759552627.19 rows=3721799898 width=8)
                                  Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                  ->  XN Nested Loop DS_BCAST_INNER  (cost=21970324529.23..38609815083.35 rows=4994244094 width=8)
                                        Join Filter: (("outer".ss_sales_price < ("inner".ss_sales_price + 5::double precision)) OR ("outer".ss_sales_price > ("inner".ss_sales_price - 5::double precision)))
                                        ->  XN Seq Scan on store_sales  (cost=0.00..1372.90 rows=109832 width=12)
                                              Filter: (ss_item_sk < 100)
                                        ->  XN Materialize  (cost=21970324529.23..21970325347.72 rows=81849 width=12)
                                              ->  XN Hash Join DS_BCAST_INNER  (cost=1647.48..21968687467.38 rows=81849 width=12)
                                                    Hash Cond: ("outer".c_customer_sk = "inner".ss_customer_sk)
                                                    ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=1600001 width=4)
                                                          Filter: ((c_first_name)::text ~~ '%ro%'::text)
                                                    ->  XN Hash  (cost=1372.90..1372.90 rows=109832 width=12)
                                                          ->  XN Seq Scan on store_sales  (cost=0.00..1372.90 rows=109832 width=12)
                                                                Filter: (ss_item_sk < 100)
                                  ->  XN Hash  (cost=25000.00..25000.00 rows=1600001 width=4)
                                        ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=1600001 width=4)
                                              Filter: ((c_first_name)::text ~~ '%ro%'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----