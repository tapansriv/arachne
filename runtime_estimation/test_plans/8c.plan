XN CTE Scan on friend_shortest  (cost=41162613485907.06..41162613486946.45 rows=415752 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..41162613485907.06 rows=415752 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..25000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=206179543449.73..41162613460907.05 rows=415751 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=206179543449.73..41162613456749.55 rows=415751 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=206179543449.73..206182602325.22 rows=255905849 width=8)
                            ->  XN Hash Join DS_BCAST_INNER  (cost=5762743929.50..202084294142.88 rows=255905849 width=8)
                                  Hash Cond: ("outer".ss_customer_sk = "inner".c_customer_sk)
                                  ->  XN Nested Loop DS_BCAST_INNER  (cost=5762714929.50..10073859321.50 rows=343408000 width=8)
                                        Join Filter: (("outer".ss_sales_price < ("inner".ss_sales_price + 5::double precision)) OR ("outer".ss_sales_price > ("inner".ss_sales_price - 5::double precision)))
                                        ->  XN Seq Scan on store_sales  (cost=0.00..360.00 rows=28800 width=12)
                                              Filter: (ss_item_sk < 10)
                                        ->  XN Materialize  (cost=5762714929.50..5762715144.13 rows=21463 width=12)
                                              ->  XN Hash Join DS_BCAST_INNER  (cost=432.00..5762285648.04 rows=21463 width=12)
                                                    Hash Cond: ("outer".c_customer_sk = "inner".ss_customer_sk)
                                                    ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=1600001 width=4)
                                                          Filter: ((c_first_name)::text ~~ '%ro%'::text)
                                                    ->  XN Hash  (cost=360.00..360.00 rows=28800 width=12)
                                                          ->  XN Seq Scan on store_sales  (cost=0.00..360.00 rows=28800 width=12)
                                                                Filter: (ss_item_sk < 10)
                                  ->  XN Hash  (cost=25000.00..25000.00 rows=1600001 width=4)
                                        ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=1600001 width=4)
                                              Filter: ((c_first_name)::text ~~ '%ro%'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----