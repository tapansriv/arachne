XN Limit  (cost=2000157527859.35..2000157527859.60 rows=100 width=80)
  ->  XN Merge  (cost=2000157527859.35..2000157527861.88 rows=1011 width=80)
        Merge Key: lochierarchy, CASE WHEN (lochierarchy = 0) THEN i_category ELSE NULL::character varying END, pg_catalog.rank()
        ->  XN Network  (cost=2000157527859.35..2000157527861.88 rows=1011 width=80)
              Send to leader
              ->  XN Sort  (cost=2000157527859.35..2000157527861.88 rows=1011 width=80)
                    Sort Key: lochierarchy, CASE WHEN (lochierarchy = 0) THEN i_category ELSE NULL::character varying END, pg_catalog.rank()
                    ->  XN Window  (cost=1000157527783.62..1000157527808.89 rows=1011 width=80)
                          Partition: lochierarchy, CASE WHEN (t_class = 0) THEN i_category ELSE NULL::character varying END
                          Order: gross_margin
                          ->  XN Sort  (cost=1000157527783.62..1000157527786.15 rows=1011 width=80)
                                Sort Key: lochierarchy, CASE WHEN (t_class = 0) THEN i_category ELSE NULL::character varying END, gross_margin
                                ->  XN Network  (cost=52509412.29..157527733.16 rows=1011 width=80)
                                      Distribute
                                      ->  XN Subquery Scan results_rollup  (cost=52509412.29..157527733.16 rows=1011 width=80)
                                            ->  XN Unique  (cost=52509412.29..157527723.05 rows=1011 width=36)
                                                  ->  XN Append  (cost=52509412.29..157527707.89 rows=1011 width=36)
                                                        ->  XN Subquery Scan "*SELECT* 1"  (cost=52509412.29..52509432.29 rows=1000 width=36)
                                                              ->  XN HashAggregate  (cost=52509412.29..52509422.29 rows=1000 width=36)
                                                                    ->  XN Hash Join DS_DIST_NONE  (cost=52502249.09..52508125.69 rows=128660 width=36)
                                                                          Hash Cond: ("outer".i_item_sk = "inner".ss_item_sk)
                                                                          ->  XN Seq Scan on item  (cost=0.00..2040.00 rows=204000 width=24)
                                                                          ->  XN Hash  (cost=52501942.12..52501942.12 rows=122787 width=20)
                                                                                ->  XN Hash Join DS_BCAST_INNER  (cost=919.10..52501942.12 rows=122787 width=20)
                                                                                      Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                                                                      ->  XN Hash Join DS_BCAST_INNER  (cost=913.96..46966200.80 rows=1160665 width=24)
                                                                                            Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                                            ->  XN Seq Scan on store_sales  (cost=0.00..2879970.24 rows=261896796 width=28)
                                                                                                  Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                                                            ->  XN Hash  (cost=913.11..913.11 rows=340 width=4)
                                                                                                  ->  XN Seq Scan on date_dim d1  (cost=0.00..913.11 rows=340 width=4)
                                                                                                        Filter: (d_year = 2001)
                                                                                      ->  XN Hash  (cost=5.03..5.03 rows=46 width=4)
                                                                                            ->  XN Seq Scan on store  (cost=0.00..5.03 rows=46 width=4)
                                                                                                  Filter: ((s_state)::text = 'TN'::text)
                                                        ->  XN Subquery Scan "*SELECT* 2"  (cost=52509090.64..52509090.84 rows=10 width=25)
                                                              ->  XN HashAggregate  (cost=52509090.64..52509090.74 rows=10 width=25)
                                                                    ->  XN Hash Join DS_DIST_NONE  (cost=52502249.09..52508125.69 rows=128660 width=25)
                                                                          Hash Cond: ("outer".i_item_sk = "inner".ss_item_sk)
                                                                          ->  XN Seq Scan on item  (cost=0.00..2040.00 rows=204000 width=13)
                                                                          ->  XN Hash  (cost=52501942.12..52501942.12 rows=122787 width=20)
                                                                                ->  XN Hash Join DS_BCAST_INNER  (cost=919.10..52501942.12 rows=122787 width=20)
                                                                                      Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                                                                      ->  XN Hash Join DS_BCAST_INNER  (cost=913.96..46966200.80 rows=1160665 width=24)
                                                                                            Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                                            ->  XN Seq Scan on store_sales  (cost=0.00..2879970.24 rows=261896796 width=28)
                                                                                                  Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                                                            ->  XN Hash  (cost=913.11..913.11 rows=340 width=4)
                                                                                                  ->  XN Seq Scan on date_dim d1  (cost=0.00..913.11 rows=340 width=4)
                                                                                                        Filter: (d_year = 2001)
                                                                                      ->  XN Hash  (cost=5.03..5.03 rows=46 width=4)
                                                                                            ->  XN Seq Scan on store  (cost=0.00..5.03 rows=46 width=4)
                                                                                                  Filter: ((s_state)::text = 'TN'::text)
                                                        ->  XN Network  (cost=52509184.74..52509184.75 rows=1 width=16)
                                                              Distribute Round Robin
                                                              ->  XN Subquery Scan "*SELECT* 3"  (cost=52509184.74..52509184.75 rows=1 width=16)
                                                                    ->  XN Aggregate  (cost=52509184.74..52509184.74 rows=1 width=16)
                                                                          ->  XN Hash Join DS_DIST_NONE  (cost=3469.10..52508541.43 rows=128660 width=16)
                                                                                Hash Cond: ("outer".ss_item_sk = "inner".i_item_sk)
                                                                                ->  XN Hash Join DS_BCAST_INNER  (cost=919.10..52501942.12 rows=122787 width=20)
                                                                                      Hash Cond: ("outer".ss_store_sk = "inner".s_store_sk)
                                                                                      ->  XN Hash Join DS_BCAST_INNER  (cost=913.96..46966200.80 rows=1160665 width=24)
                                                                                            Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                                            ->  XN Seq Scan on store_sales  (cost=0.00..2879970.24 rows=261896796 width=28)
                                                                                                  Filter: ((ss_sold_date_sk IS NOT NULL) AND (ss_store_sk IS NOT NULL))
                                                                                            ->  XN Hash  (cost=913.11..913.11 rows=340 width=4)
                                                                                                  ->  XN Seq Scan on date_dim d1  (cost=0.00..913.11 rows=340 width=4)
                                                                                                        Filter: (d_year = 2001)
                                                                                      ->  XN Hash  (cost=5.03..5.03 rows=46 width=4)
                                                                                            ->  XN Seq Scan on store  (cost=0.00..5.03 rows=46 width=4)
                                                                                                  Filter: ((s_state)::text = 'TN'::text)
                                                                                ->  XN Hash  (cost=2040.00..2040.00 rows=204000 width=4)
                                                                                      ->  XN Seq Scan on item  (cost=0.00..2040.00 rows=204000 width=4)