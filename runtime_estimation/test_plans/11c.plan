XN CTE Scan on friend_shortest  (cost=25906542122020.89..25906542122677.87 rows=262790 width=12)
  InitPlan
    ->  XN Recursive Union  (cost=0.00..25906542122020.89 rows=262790 width=20)
          ->  XN Subquery Scan "*SELECT* 1"  (cost=0.00..25000.01 rows=1 width=4)
                ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=1 width=4)
                      Filter: (c_customer_sk = 1)
          ->  XN Subquery Scan "*SELECT* 2"  (cost=18728612675.62..25906542097020.88 rows=262789 width=20)
                ->  XN Nested Loop DS_BCAST_INNER  (cost=18728612675.62..25906542094392.99 rows=262789 width=20)
                      Join Filter: (("inner".c_customer_sk = "outer".friend) OR ("inner".c_customer_sk = "outer".friend))
                      ->  XN CTE Scan on friend_shortest f  (cost=0.00..25.00 rows=1667 width=12)
                            Filter: (hopcount < 3)
                      ->  XN Materialize  (cost=18728612675.62..18730546134.73 rows=161753411 width=8)
                            ->  XN Hash Join DS_BCAST_INNER  (cost=6146320281.03..16140080421.21 rows=161753411 width=8)
                                  Hash Cond: ("outer".cs_bill_customer_sk = "inner".c_customer_sk)
                                  ->  XN Nested Loop DS_BCAST_INNER  (cost=6146295153.03..9912847283.55 rows=6517632720 width=8)
                                        Join Filter: (("outer".cs_sales_price < ("inner".cs_sales_price + 5::double precision)) OR ("outer".cs_sales_price > ("inner".cs_sales_price - 5::double precision)))
                                        ->  XN Seq Scan on catalog_sales  (cost=0.00..1799963.40 rows=687514 width=12)
                                              Filter: (cs_item_sk < 1000)
                                        ->  XN Materialize  (cost=6146295153.03..6146295323.67 rows=17064 width=12)
                                              ->  XN Hash Join DS_BCAST_INNER  (cost=25128.00..6145953855.97 rows=17064 width=12)
                                                    Hash Cond: ("outer".cs_bill_customer_sk = "inner".c_customer_sk)
                                                    ->  XN Seq Scan on catalog_sales  (cost=0.00..1799963.40 rows=687514 width=12)
                                                          Filter: (cs_item_sk < 1000)
                                                    ->  XN Hash  (cost=25000.00..25000.00 rows=51201 width=4)
                                                          ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=51201 width=4)
                                                                Filter: ((c_birth_country)::text ~~ '%STAN'::text)
                                  ->  XN Hash  (cost=25000.00..25000.00 rows=51201 width=4)
                                        ->  XN Seq Scan on customer  (cost=0.00..25000.00 rows=51201 width=4)
                                              Filter: ((c_birth_country)::text ~~ '%STAN'::text)
----- Nested Loop Join in the query plan - review the join predicates to avoid Cartesian products -----