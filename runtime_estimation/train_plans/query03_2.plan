XN Limit  (cost=1000974951417.84..1000974951418.03 rows=77 width=36)
  ->  XN Merge  (cost=1000974951417.84..1000974951418.03 rows=77 width=36)
        Merge Key: dt.d_year, sum(store_sales.ss_sales_price), item.i_brand_id
        ->  XN Network  (cost=1000974951417.84..1000974951418.03 rows=77 width=36)
              Send to leader
              ->  XN Sort  (cost=1000974951417.84..1000974951418.03 rows=77 width=36)
                    Sort Key: dt.d_year, sum(store_sales.ss_sales_price), item.i_brand_id
                    ->  XN HashAggregate  (cost=974951415.24..974951415.43 rows=77 width=36)
                          ->  XN Hash Join DS_DIST_NONE  (cost=1153.46..974951409.63 rows=560 width=36)
                                Hash Cond: ("outer".ss_item_sk = "inner".i_item_sk)
                                ->  XN Hash Join DS_BCAST_INNER  (cost=928.35..974946263.24 rows=218475 width=16)
                                      Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                      ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2747688 width=16)
                                            Filter: (ss_sold_date_sk IS NOT NULL)
                                      ->  XN Hash  (cost=913.11..913.11 rows=6093 width=8)
                                            ->  XN Seq Scan on date_dim dt  (cost=0.00..913.11 rows=6093 width=8)
                                                  Filter: (d_moy = 12)
                                ->  XN Hash  (cost=225.00..225.00 rows=45 width=28)
                                      ->  XN Seq Scan on item  (cost=0.00..225.00 rows=45 width=28)
                                            Filter: (i_manufact_id = 16)