XN Merge  (cost=1000013092483.63..1000013092484.34 rows=284 width=56)
  Merge Key: inv1.w_warehouse_sk, inv1.i_item_sk, inv1.d_moy, inv1.mean, inv1.cov, inv2.d_moy, inv2.mean, inv2.cov
  ->  XN Network  (cost=1000013092483.63..1000013092484.34 rows=284 width=56)
        Send to leader
        ->  XN Sort  (cost=1000013092483.63..1000013092484.34 rows=284 width=56)
              Sort Key: inv1.w_warehouse_sk, inv1.i_item_sk, inv1.d_moy, inv1.mean, inv1.cov, inv2.d_moy, inv2.mean, inv2.cov
              ->  XN Hash Join DS_DIST_NONE  (cost=13092122.14..13092472.05 rows=284 width=56)
                    Hash Cond: (("outer".i_item_sk = "inner".i_item_sk) AND ("outer".w_warehouse_sk = "inner".w_warehouse_sk))
                    ->  XN Subquery Scan inv2  (cost=6706018.73..6706039.68 rows=419 width=28)
                          ->  XN HashAggregate  (cost=6706018.73..6706035.49 rows=419 width=37)
                                Filter: (CASE WHEN (avg(inv_quantity_on_hand) = 0) THEN 0::double precision ELSE (stddev((inv_quantity_on_hand)::double precision) / (avg(inv_quantity_on_hand))::double precision) END > 1::double precision)
                                ->  XN Hash Join DS_DIST_NONE  (cost=1320.87..6705887.42 rows=4775 width=37)
                                      Hash Cond: ("outer".inv_item_sk = "inner".i_item_sk)
                                      ->  XN Hash Join DS_BCAST_INNER  (cost=1095.87..6705509.82 rows=4660 width=37)
                                            Hash Cond: ("outer".inv_warehouse_sk = "inner".w_warehouse_sk)
                                            ->  XN Hash Join DS_BCAST_INNER  (cost=1095.81..4905404.91 rows=4660 width=16)
                                                  Hash Cond: ("outer".inv_date_sk = "inner".d_date_sk)
                                                  ->  XN Seq Scan on inventory  (cost=0.00..117450.00 rows=11745000 width=16)
                                                  ->  XN Hash  (cost=1095.73..1095.73 rows=29 width=8)
                                                        ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=29 width=8)
                                                              Filter: ((d_year = 1999) AND (d_moy = 3))
                                            ->  XN Hash  (cost=0.05..0.05 rows=5 width=25)
                                                  ->  XN Seq Scan on warehouse  (cost=0.00..0.05 rows=5 width=25)
                                      ->  XN Hash  (cost=180.00..180.00 rows=18000 width=4)
                                            ->  XN Seq Scan on item  (cost=0.00..180.00 rows=18000 width=4)
                    ->  XN Hash  (cost=6386101.46..6386101.46 rows=390 width=28)
                          ->  XN Subquery Scan inv1  (cost=6386081.95..6386101.46 rows=390 width=28)
                                ->  XN HashAggregate  (cost=6386081.95..6386097.55 rows=390 width=37)
                                      Filter: (CASE WHEN (avg(inv_quantity_on_hand) = 0) THEN 0::double precision ELSE (stddev((inv_quantity_on_hand)::double precision) / (avg(inv_quantity_on_hand))::double precision) END > 1::double precision)
                                      ->  XN Hash Join DS_DIST_NONE  (cost=6385510.23..6385959.69 rows=4446 width=37)
                                            Hash Cond: ("outer".i_item_sk = "inner".inv_item_sk)
                                            ->  XN Seq Scan on item  (cost=0.00..180.00 rows=18000 width=4)
                                            ->  XN Hash  (cost=6385499.38..6385499.38 rows=4339 width=37)
                                                  ->  XN Hash Join DS_BCAST_INNER  (cost=1095.87..6385499.38 rows=4339 width=37)
                                                        Hash Cond: ("outer".inv_warehouse_sk = "inner".w_warehouse_sk)
                                                        ->  XN Hash Join DS_BCAST_INNER  (cost=1095.80..4585401.69 rows=4339 width=16)
                                                              Hash Cond: ("outer".inv_date_sk = "inner".d_date_sk)
                                                              ->  XN Seq Scan on inventory  (cost=0.00..117450.00 rows=11745000 width=16)
                                                              ->  XN Hash  (cost=1095.73..1095.73 rows=27 width=8)
                                                                    ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=27 width=8)
                                                                          Filter: ((d_year = 1999) AND (d_moy = 2))
                                                        ->  XN Hash  (cost=0.05..0.05 rows=5 width=25)
                                                              ->  XN Seq Scan on warehouse  (cost=0.00..0.05 rows=5 width=25)