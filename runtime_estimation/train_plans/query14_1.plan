XN Aggregate  (cost=258235678.27..258235678.27 rows=1 width=16)
  ->  XN Subquery Scan x  (cost=86104633.32..258235678.26 rows=3 width=16)
        ->  XN Append  (cost=86104633.32..258235678.23 rows=3 width=12)
              ->  XN Subquery Scan "*SELECT* 1"  (cost=86104633.32..86104633.34 rows=1 width=12)
                    ->  XN Aggregate  (cost=86104633.32..86104633.33 rows=1 width=12)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=1097.53..86104504.77 rows=25710 width=12)
                                Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                ->  XN Seq Scan on store_sales store_sales_2  (cost=0.00..28804.04 rows=2747688 width=16)
                                      Filter: (ss_sold_date_sk IS NOT NULL)
                                ->  XN Hash  (cost=1095.73..1095.73 rows=717 width=4)
                                      ->  XN Seq Scan on date_dim date_dim_1  (cost=0.00..1095.73 rows=717 width=4)
                                            Filter: ((d_year >= 1998) AND (d_year <= 2000))
              ->  XN Subquery Scan "*SELECT* 2"  (cost=86073655.35..86073655.37 rows=1 width=12)
                    ->  XN Aggregate  (cost=86073655.35..86073655.36 rows=1 width=12)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=1097.53..86073585.32 rows=14004 width=12)
                                Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                                ->  XN Seq Scan on catalog_sales catalog_sales_1  (cost=0.00..14415.48 rows=1434582 width=16)
                                      Filter: (cs_sold_date_sk IS NOT NULL)
                                ->  XN Hash  (cost=1095.73..1095.73 rows=717 width=4)
                                      ->  XN Seq Scan on date_dim date_dim_2  (cost=0.00..1095.73 rows=717 width=4)
                                            Filter: ((d_year >= 1998) AND (d_year <= 2000))
              ->  XN Subquery Scan "*SELECT* 3"  (cost=86057389.50..86057389.52 rows=1 width=12)
                    ->  XN Aggregate  (cost=86057389.50..86057389.51 rows=1 width=12)
                          ->  XN Hash Join DS_BCAST_INNER  (cost=1097.53..86057354.22 rows=7055 width=12)
                                Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                                ->  XN Seq Scan on web_sales web_sales_1  (cost=0.00..7193.84 rows=719384 width=16)
                                ->  XN Hash  (cost=1095.73..1095.73 rows=717 width=4)
                                      ->  XN Seq Scan on date_dim date_dim_3  (cost=0.00..1095.73 rows=717 width=4)
                                            Filter: ((d_year >= 1998) AND (d_year <= 2000))

XN Hash Join DS_BCAST_INNER  (cost=126.51..1446188301.24 rows=16291 width=4)
  Hash Cond: (("outer".i_brand_id = "inner".brand_id) AND ("outer".i_category_id = "inner".category_id) AND ("outer".i_class_id = "inner".class_id))
  ->  XN Seq Scan on item item_1  (cost=0.00..180.00 rows=17882 width=16)
        Filter: ((i_brand_id IS NOT NULL) AND (i_category_id IS NOT NULL) AND (i_class_id IS NOT NULL))
  ->  XN Hash  (cost=72.29..72.29 rows=7229 width=12)
        ->  XN Subquery Scan derived_table1  (cost=0.00..72.29 rows=7229 width=12)
              ->  XN Hash Intersect Distinct DS_DIST_NONE  (cost=0.00..0.00 rows=7229 width=12)
                    Hash Cond: (("outer".brand_id = "inner".brand_id) AND ("outer".class_id = "inner".class_id) AND ("outer".category_id = "inner".category_id))
                    Join Filter: ((("outer".brand_id = "inner".brand_id) OR (("inner".brand_id IS NULL) AND ("outer".brand_id IS NULL))) AND (("outer".class_id = "inner".class_id) OR (("inner".class_id IS NULL) AND ("outer".class_id IS NULL))) AND (("outer".category_id = "inner".category_id) OR (("inner".category_id IS NULL) AND ("outer".category_id IS NULL))))
                    ->  XN Network  (cost=0.00..0.00 rows=14350 width=12)
                          Distribute
                          ->  XN Hash Intersect Distinct DS_DIST_NONE  (cost=0.00..0.00 rows=14350 width=12)
                                Hash Cond: (("outer".brand_id = "inner".brand_id) AND ("outer".class_id = "inner".class_id) AND ("outer".category_id = "inner".category_id))
                                Join Filter: ((("outer".brand_id = "inner".brand_id) OR (("inner".brand_id IS NULL) AND ("outer".brand_id IS NULL))) AND (("outer".class_id = "inner".class_id) OR (("inner".class_id IS NULL) AND ("outer".class_id IS NULL))) AND (("outer".category_id = "inner".category_id) OR (("inner".category_id IS NULL) AND ("outer".category_id IS NULL))))
                                ->  XN Network  (cost=86104569.04..86105680.92 rows=26344 width=12)
                                      Distribute
                                      ->  XN Subquery Scan "*SELECT* 1"  (cost=86104569.04..86105680.92 rows=26344 width=12)
                                            ->  XN Hash Join DS_DIST_NONE  (cost=86104569.04..86105417.48 rows=26344 width=12)
                                                  Hash Cond: ("outer".i_item_sk = "inner".ss_item_sk)
                                                  ->  XN Seq Scan on item iss  (cost=0.00..180.00 rows=18000 width=16)
                                                  ->  XN Hash  (cost=86104504.77..86104504.77 rows=25710 width=4)
                                                        ->  XN Hash Join DS_BCAST_INNER  (cost=1097.53..86104504.77 rows=25710 width=4)
                                                              Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                              ->  XN Seq Scan on store_sales store_sales_1  (cost=0.00..28804.04 rows=2747688 width=8)
                                                                    Filter: (ss_sold_date_sk IS NOT NULL)
                                                              ->  XN Hash  (cost=1095.73..1095.73 rows=717 width=4)
                                                                    ->  XN Seq Scan on date_dim d1  (cost=0.00..1095.73 rows=717 width=4)
                                                                          Filter: ((d_year >= 1998) AND (d_year <= 2000))
                                ->  XN Hash  (cost=86074312.33..86074312.33 rows=14350 width=12)
                                      ->  XN Network  (cost=86073620.33..86074312.33 rows=14350 width=12)
                                            Distribute
                                            ->  XN Subquery Scan "*SELECT* 2"  (cost=86073620.33..86074312.33 rows=14350 width=12)
                                                  ->  XN Hash Join DS_DIST_NONE  (cost=86073620.33..86074168.83 rows=14350 width=12)
                                                        Hash Cond: ("outer".i_item_sk = "inner".cs_item_sk)
                                                        ->  XN Seq Scan on item ics  (cost=0.00..180.00 rows=18000 width=16)
                                                        ->  XN Hash  (cost=86073585.32..86073585.32 rows=14004 width=4)
                                                              ->  XN Hash Join DS_BCAST_INNER  (cost=1097.53..86073585.32 rows=14004 width=4)
                                                                    Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                                                                    ->  XN Seq Scan on catalog_sales  (cost=0.00..14415.48 rows=1434582 width=8)
                                                                          Filter: (cs_sold_date_sk IS NOT NULL)
                                                                    ->  XN Hash  (cost=1095.73..1095.73 rows=717 width=4)
                                                                          ->  XN Seq Scan on date_dim d2  (cost=0.00..1095.73 rows=717 width=4)
                                                                                Filter: ((d_year >= 1998) AND (d_year <= 2000))
                    ->  XN Hash  (cost=932657921.43..932657921.43 rows=7229 width=12)
                          ->  XN Network  (cost=86057371.86..932657921.43 rows=7229 width=12)
                                Distribute
                                ->  XN Subquery Scan "*SELECT* 3"  (cost=86057371.86..932657921.43 rows=7229 width=12)
                                      ->  XN Hash Join DS_BCAST_INNER  (cost=86057371.86..932657849.14 rows=7229 width=12)
                                            Hash Cond: ("outer".i_item_sk = "inner".ws_item_sk)
                                            ->  XN Seq Scan on item iws  (cost=0.00..180.00 rows=18000 width=16)
                                            ->  XN Hash  (cost=86057354.22..86057354.22 rows=7055 width=4)
                                                  ->  XN Hash Join DS_BCAST_INNER  (cost=1097.53..86057354.22 rows=7055 width=4)
                                                        Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                                                        ->  XN Seq Scan on web_sales  (cost=0.00..7193.84 rows=719384 width=8)
                                                        ->  XN Hash  (cost=1095.73..1095.73 rows=717 width=4)
                                                              ->  XN Seq Scan on date_dim d3  (cost=0.00..1095.73 rows=717 width=4)
                                                                    Filter: ((d_year >= 1998) AND (d_year <= 2000))

XN Limit  (cost=1000650832771.69..1000650832771.94 rows=100 width=60)
  ->  XN Merge  (cost=1000650832771.69..1000650832773.69 rows=801 width=60)
        Merge Key: channel, i_brand_id, i_class_id, i_category_id
        ->  XN Network  (cost=1000650832771.69..1000650832773.69 rows=801 width=60)
              Send to leader
              ->  XN Sort  (cost=1000650832771.69..1000650832773.69 rows=801 width=60)
                    Sort Key: channel, i_brand_id, i_class_id, i_category_id
                    ->  XN HashAggregate  (cost=650832729.05..650832733.06 rows=801 width=60)
                          GROUPING SETS((), (channel), (channel, i_brand_id), (channel, i_brand_id, i_class_id), (channel, i_brand_id, i_class_id, i_category_id))
                          ->  XN Subquery Scan y  (cost=3740855.13..650832704.66 rows=1626 width=60)
                                ->  XN Append  (cost=3740855.13..650832688.40 rows=1626 width=24)
                                      ->  XN Subquery Scan "*SELECT* 1"  (cost=3740855.13..3740881.92 rows=893 width=24)
                                            ->  XN HashAggregate  (cost=3740855.13..3740872.99 rows=893 width=24)
                                                  Filter: ($2 < sum((ss_list_price * (ss_quantity)::double precision)))
                                                  InitPlan
                                                    ->  XN Seq Scan on volt_tt_618d8b42a141e  (cost=0.00..0.01 rows=1 width=8)
                                                  ->  XN Hash Join DS_DIST_NONE  (cost=3740427.80..3740841.73 rows=893 width=24)
                                                        Hash Cond: ("outer".i_item_sk = "inner".ss_item_sk)
                                                        ->  XN Seq Scan on item  (cost=0.00..180.00 rows=18000 width=16)
                                                        ->  XN Hash  (cost=3740425.62..3740425.62 rows=871 width=20)
                                                              ->  XN Hash Join DS_BCAST_INNER  (cost=1278.63..3740425.62 rows=871 width=20)
                                                                    Hash Cond: ("outer".ss_sold_date_sk = "inner".d_date_sk)
                                                                    ->  XN Hash IN Join DS_DIST_NONE  (cost=182.82..111520.84 rows=2224021 width=24)
                                                                          Hash Cond: ("outer".ss_item_sk = "inner".ss_item_sk)
                                                                          ->  XN Seq Scan on store_sales  (cost=0.00..28804.04 rows=2747688 width=20)
                                                                                Filter: (ss_sold_date_sk IS NOT NULL)
                                                                          ->  XN Hash  (cost=146.26..146.26 rows=14626 width=4)
                                                                                ->  XN Seq Scan on volt_tt_618d8b42a580c  (cost=0.00..146.26 rows=14626 width=4)
                                                                    ->  XN Hash  (cost=1095.73..1095.73 rows=30 width=4)
                                                                          ->  XN Seq Scan on date_dim  (cost=0.00..1095.73 rows=30 width=4)
                                                                                Filter: ((d_year = 2000) AND (d_moy = 11))
                                      ->  XN Subquery Scan "*SELECT* 2"  (cost=3673723.32..3673737.93 rows=487 width=24)
                                            ->  XN HashAggregate  (cost=3673723.32..3673733.06 rows=487 width=24)
                                                  Filter: ($1 < sum((cs_list_price * (cs_quantity)::double precision)))
                                                  InitPlan
                                                    ->  XN Seq Scan on volt_tt_618d8b42a141e  (cost=0.00..0.01 rows=1 width=8)
                                                  ->  XN Hash Join DS_DIST_NONE  (cost=3673306.13..3673716.00 rows=487 width=24)
                                                        Hash Cond: ("outer".i_item_sk = "inner".cs_item_sk)
                                                        ->  XN Seq Scan on item item_2  (cost=0.00..180.00 rows=18000 width=16)
                                                        ->  XN Hash  (cost=3673304.95..3673304.95 rows=475 width=20)
                                                              ->  XN Hash Join DS_BCAST_INNER  (cost=1278.63..3673304.95 rows=475 width=20)
                                                                    Hash Cond: ("outer".cs_sold_date_sk = "inner".d_date_sk)
                                                                    ->  XN Hash IN Join DS_DIST_NONE  (cost=182.82..57689.72 rows=1161173 width=24)
                                                                          Hash Cond: ("outer".cs_item_sk = "inner".ss_item_sk)
                                                                          ->  XN Seq Scan on catalog_sales catalog_sales_2  (cost=0.00..14415.48 rows=1434582 width=20)
                                                                                Filter: (cs_sold_date_sk IS NOT NULL)
                                                                          ->  XN Hash  (cost=146.26..146.26 rows=14626 width=4)
                                                                                ->  XN Seq Scan on volt_tt_618d8b42a580c  (cost=0.00..146.26 rows=14626 width=4)
                                                                    ->  XN Hash  (cost=1095.73..1095.73 rows=30 width=4)
                                                                          ->  XN Seq Scan on date_dim date_dim_4  (cost=0.00..1095.73 rows=30 width=4)
                                                                                Filter: ((d_year = 2000) AND (d_moy = 11))
                                      ->  XN Subquery Scan "*SELECT* 3"  (cost=643418061.17..643418068.55 rows=246 width=24)
                                            ->  XN HashAggregate  (cost=643418061.17..643418066.09 rows=246 width=24)
                                                  Filter: ($0 < sum((ws_list_price * (ws_quantity)::double precision)))
                                                  InitPlan
                                                    ->  XN Seq Scan on volt_tt_618d8b42a141e  (cost=0.00..0.01 rows=1 width=8)
                                                  ->  XN Hash Join DS_DIST_NONE  (cost=74657877.27..643418057.47 rows=246 width=24)
                                                        Hash Cond: ("outer".ss_item_sk = "inner".i_item_sk)
                                                        ->  XN HashAggregate  (cost=182.82..182.82 rows=14219 width=4)
                                                              ->  XN Seq Scan on volt_tt_618d8b42a580c  (cost=0.00..146.26 rows=14626 width=4)
                                                        ->  XN Hash  (cost=74657693.69..74657693.69 rows=303 width=32)
                                                              ->  XN Hash Join DS_BCAST_INNER  (cost=3617285.65..74657693.69 rows=303 width=32)
                                                                    Hash Cond: ("outer".i_item_sk = "inner".ws_item_sk)
                                                                    ->  XN Seq Scan on item item_4  (cost=0.00..180.00 rows=18000 width=16)
                                                                    ->  XN Hash  (cost=3617284.91..3617284.91 rows=296 width=16)
                                                                          ->  XN Hash Join DS_BCAST_INNER  (cost=1095.81..3617284.91 rows=296 width=16)
                                                                                Hash Cond: ("outer".ws_sold_date_sk = "inner".d_date_sk)
                                                                                ->  XN Seq Scan on web_sales web_sales_4  (cost=0.00..7193.84 rows=719384 width=20)
                                                                                ->  XN Hash  (cost=1095.73..1095.73 rows=30 width=4)
                                                                                      ->  XN Seq Scan on date_dim date_dim_8  (cost=0.00..1095.73 rows=30 width=4)
                                                                                            Filter: ((d_year = 2000) AND (d_moy = 11))